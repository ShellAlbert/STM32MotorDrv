
STM32MotorDrv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef34  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800f128  0800f128  0001f128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4f0  0800f4f0  00020b18  2**0
                  CONTENTS
  4 .ARM          00000000  0800f4f0  0800f4f0  00020b18  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f4f0  0800f4f0  00020b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4f0  0800f4f0  0001f4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4f4  0800f4f4  0001f4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b18  20000000  0800f4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094e0  20000b18  08010010  00020b18  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20009ff8  08010010  00029ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b18  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030afe  00000000  00000000  00020b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007535  00000000  00000000  0005163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ca0  00000000  00000000  00058b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001958  00000000  00000000  0005a818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000213c7  00000000  00000000  0005c170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024a3f  00000000  00000000  0007d537  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093111  00000000  00000000  000a1f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007910  00000000  00000000  00135104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000b18 	.word	0x20000b18
 800020c:	00000000 	.word	0x00000000
 8000210:	0800f10c 	.word	0x0800f10c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000b1c 	.word	0x20000b1c
 800022c:	0800f10c 	.word	0x0800f10c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037e:	f1a4 0401 	sub.w	r4, r4, #1
 8000382:	d1e9      	bne.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_d2iz>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d215      	bcs.n	8000b22 <__aeabi_d2iz+0x36>
 8000af6:	d511      	bpl.n	8000b1c <__aeabi_d2iz+0x30>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d912      	bls.n	8000b28 <__aeabi_d2iz+0x3c>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b26:	d105      	bne.n	8000b34 <__aeabi_d2iz+0x48>
 8000b28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	bf08      	it	eq
 8000b2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	d1ed      	bne.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <adh_param_init>:
uint8_t fiber_H[9]={0x53,0x4F,0x50,0x3D,0x32,0x37,0x30,0x0A,0x0D};
uint8_t fiber_L[9]={0x53,0x4F,0x50,0x3D,0x31,0x37,0x30,0x0A,0x0D};
uint8_t fiber_flg=0;

void adh_param_init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	adc1_manage_init();
 8001174:	f00a fc18 	bl	800b9a8 <adc1_manage_init>
	adc2_manage_init();
 8001178:	f00a fc24 	bl	800b9c4 <adc2_manage_init>
	adc3_manage_init();
 800117c:	f00a fc2c 	bl	800b9d8 <adc3_manage_init>
//	adc1_conv_cplt_callback_register(adh_adc_dma_data_handle);
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <adc_upload_data_register>:
	memcpy(adc1_conv_buff,buf,len);
	osSignalSet(CommunicateTaskHandle, RECV_ADC_DMA_SIGNAL);
}

void adc_upload_data_register(adc_upload_handler_t upload_t)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	adc_protocol_upload = upload_t;
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <adc_upload_data_register+0x18>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000b3c 	.word	0x20000b3c

080011a0 <adh_prase_adc_dam_data>:

void adh_prase_adc_dam_data(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
	uint8_t i,j = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	72bb      	strb	r3, [r7, #10]
	upload_attr_t upload_attr;
	for( j=0;j<SAMPLE_CHANNEL_NUM;j++ )
 80011ae:	2300      	movs	r3, #0
 80011b0:	72bb      	strb	r3, [r7, #10]
 80011b2:	e024      	b.n	80011fe <adh_prase_adc_dam_data+0x5e>
	{
		for( i=0;i<SAMPLE_PER_CHANNEL;i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	72fb      	strb	r3, [r7, #11]
 80011b8:	e00f      	b.n	80011da <adh_prase_adc_dam_data+0x3a>
		{
			sum += adc1_conv_buff[i][j];
 80011ba:	7afa      	ldrb	r2, [r7, #11]
 80011bc:	7ab9      	ldrb	r1, [r7, #10]
 80011be:	482f      	ldr	r0, [pc, #188]	; (800127c <adh_prase_adc_dam_data+0xdc>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
		for( i=0;i<SAMPLE_PER_CHANNEL;i++)
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	3301      	adds	r3, #1
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	2b31      	cmp	r3, #49	; 0x31
 80011de:	d9ec      	bls.n	80011ba <adh_prase_adc_dam_data+0x1a>
		}
		average_value[j] = sum/SAMPLE_PER_CHANNEL;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <adh_prase_adc_dam_data+0xe0>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	091a      	lsrs	r2, r3, #4
 80011ea:	7abb      	ldrb	r3, [r7, #10]
 80011ec:	b291      	uxth	r1, r2
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <adh_prase_adc_dam_data+0xe4>)
 80011f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sum = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
	for( j=0;j<SAMPLE_CHANNEL_NUM;j++ )
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	3301      	adds	r3, #1
 80011fc:	72bb      	strb	r3, [r7, #10]
 80011fe:	7abb      	ldrb	r3, [r7, #10]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d9d7      	bls.n	80011b4 <adh_prase_adc_dam_data+0x14>
	}
	if((average_value[0]>3000)&&(fiber_flg==0))
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <adh_prase_adc_dam_data+0xe4>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800120c:	4293      	cmp	r3, r2
 800120e:	d90d      	bls.n	800122c <adh_prase_adc_dam_data+0x8c>
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <adh_prase_adc_dam_data+0xe8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <adh_prase_adc_dam_data+0x8c>
	{
		  HAL_UART_Transmit(&huart4,&fiber_L[0],9,1);
 8001218:	2301      	movs	r3, #1
 800121a:	2209      	movs	r2, #9
 800121c:	491b      	ldr	r1, [pc, #108]	; (800128c <adh_prase_adc_dam_data+0xec>)
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <adh_prase_adc_dam_data+0xf0>)
 8001220:	f006 f9b4 	bl	800758c <HAL_UART_Transmit>
		  fiber_flg=1;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <adh_prase_adc_dam_data+0xe8>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e012      	b.n	8001252 <adh_prase_adc_dam_data+0xb2>
	}
	else if((average_value[0]<3000)&&(fiber_flg==1))
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <adh_prase_adc_dam_data+0xe4>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001234:	4293      	cmp	r3, r2
 8001236:	d80c      	bhi.n	8001252 <adh_prase_adc_dam_data+0xb2>
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <adh_prase_adc_dam_data+0xe8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <adh_prase_adc_dam_data+0xb2>
	{
		  HAL_UART_Transmit(&huart4,&fiber_H[0],9,1);
 8001240:	2301      	movs	r3, #1
 8001242:	2209      	movs	r2, #9
 8001244:	4913      	ldr	r1, [pc, #76]	; (8001294 <adh_prase_adc_dam_data+0xf4>)
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <adh_prase_adc_dam_data+0xf0>)
 8001248:	f006 f9a0 	bl	800758c <HAL_UART_Transmit>
		  fiber_flg=0;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <adh_prase_adc_dam_data+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
//	if(adc_protocol_upload != NULL)
//	{
//		adc_protocol_upload(upload_attr.pdata,upload_attr.len);
//	}
	// 字节序与老机器相反
	upload_attr = pack_upload_data(BATTERY_AND_RSSI_VOLTAGE,(uint8_t *)&average_value[Battery_Voltage_ADC1_CH10],4);
 8001252:	4638      	mov	r0, r7
 8001254:	2304      	movs	r3, #4
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <adh_prase_adc_dam_data+0xf8>)
 8001258:	210f      	movs	r1, #15
 800125a:	f00c f8af 	bl	800d3bc <pack_upload_data>
	if(adc_protocol_upload != NULL)
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <adh_prase_adc_dam_data+0xfc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <adh_prase_adc_dam_data+0xd2>
	{
		adc_protocol_upload(upload_attr.pdata,upload_attr.len);
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <adh_prase_adc_dam_data+0xfc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	7939      	ldrb	r1, [r7, #4]
 800126e:	4610      	mov	r0, r2
 8001270:	4798      	blx	r3
	}
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200088d8 	.word	0x200088d8
 8001280:	51eb851f 	.word	0x51eb851f
 8001284:	20000b34 	.word	0x20000b34
 8001288:	20000b40 	.word	0x20000b40
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20009f4c 	.word	0x20009f4c
 8001294:	20000000 	.word	0x20000000
 8001298:	20000b36 	.word	0x20000b36
 800129c:	20000b3c 	.word	0x20000b3c

080012a0 <cj_param_init>:
static fifo_s_t  cj_rxdata_fifo;
static uint8_t   cj_rxdata_buf[CJ_FIFO_BUFLEN];
static hold_distance_t hold_distance;

void cj_param_init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  fifo_s_init(&cj_rxdata_fifo, cj_rxdata_buf, CJ_FIFO_BUFLEN);
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	4909      	ldr	r1, [pc, #36]	; (80012cc <cj_param_init+0x2c>)
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <cj_param_init+0x30>)
 80012aa:	f00b ff31 	bl	800d110 <fifo_s_init>
  /* initial judge data unpack object */
  cj_unpack_obj.data_fifo = &cj_rxdata_fifo;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <cj_param_init+0x34>)
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <cj_param_init+0x30>)
 80012b2:	601a      	str	r2, [r3, #0]
  cj_unpack_obj.index = 0;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <cj_param_init+0x34>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	755a      	strb	r2, [r3, #21]
  cj_unpack_obj.frame_len = 0;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <cj_param_init+0x34>)
 80012bc:	2200      	movs	r2, #0
 80012be:	711a      	strb	r2, [r3, #4]
  cj_unpack_obj.unpack_step = STEP_CEJU_HRADER_FIRST;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <cj_param_init+0x34>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000b74 	.word	0x20000b74
 80012d0:	20000b5c 	.word	0x20000b5c
 80012d4:	20000b44 	.word	0x20000b44

080012d8 <cj_uart_rx_data_handle>:

uint32_t cj_uart_rx_data_handle(uint8_t *data, uint32_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
//	data[len]='\0';
//	usart1_printf("len: %d Str: %s\n",len, data);

	fifo_s_puts(&cj_rxdata_fifo, (char *)data, len);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <cj_uart_rx_data_handle+0x2c>)
 80012ea:	f00b ff32 	bl	800d152 <fifo_s_puts>
	osSignalSet(CommunicateTaskHandle, RECV_CEJU_SIGNAL);
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <cj_uart_rx_data_handle+0x30>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 ffdd 	bl	80082b4 <osSignalSet>

	return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000b5c 	.word	0x20000b5c
 8001308:	20009be0 	.word	0x20009be0

0800130c <cj_data_handler>:

void cj_data_handler(uint8_t *p_frame, uint8_t len)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
	uint16_t dis = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	82fb      	strh	r3, [r7, #22]
	/* When distance measure fail: D=-----m , don't change the value of distance*/
	if( (p_frame[2]!='-') && (p_frame[6]!='-') )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3302      	adds	r3, #2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b2d      	cmp	r3, #45	; 0x2d
 8001324:	d01f      	beq.n	8001366 <cj_data_handler+0x5a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3306      	adds	r3, #6
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b2d      	cmp	r3, #45	; 0x2d
 800132e:	d01a      	beq.n	8001366 <cj_data_handler+0x5a>
	{
		dis = (uint16_t)(atof((char*)(&p_frame[2]))+0.5);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	4618      	mov	r0, r3
 8001336:	f00c f87f 	bl	800d438 <atof>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <cj_data_handler+0xa0>)
 8001340:	f7fe ff84 	bl	800024c <__adddf3>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	f7ff fbf6 	bl	8000b3c <__aeabi_d2uiz>
 8001350:	4603      	mov	r3, r0
 8001352:	82fb      	strh	r3, [r7, #22]
		manifold_cmd.distance = dis;
 8001354:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <cj_data_handler+0xa4>)
 8001356:	8afb      	ldrh	r3, [r7, #22]
 8001358:	80d3      	strh	r3, [r2, #6]
		osSignalSet(CmdTaskHandle, MANIFOLD2_DISTANCE_SIGNAL);
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <cj_data_handler+0xa8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2104      	movs	r1, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f006 ffa7 	bl	80082b4 <osSignalSet>
//	}

	/* upload the distance to android app */
	upload_attr_t
	// len-4去除D=和\r\n
	upload_attr = pack_upload_data(MEASURE_DISTANCE,&p_frame[2],len-4);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	1c9a      	adds	r2, r3, #2
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	3b04      	subs	r3, #4
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f107 000c 	add.w	r0, r7, #12
 8001374:	2103      	movs	r1, #3
 8001376:	f00c f821 	bl	800d3bc <pack_upload_data>
	pdh_data_upload(upload_attr.pdata,upload_attr.len);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	7c3a      	ldrb	r2, [r7, #16]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fde9 	bl	8001f58 <pdh_data_upload>
	// save the distance
	memcpy(hold_distance.distance,&p_frame[2],len-4);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	1c99      	adds	r1, r3, #2
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	3b04      	subs	r3, #4
 800138e:	461a      	mov	r2, r3
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <cj_data_handler+0xac>)
 8001392:	f00c f881 	bl	800d498 <memcpy>
	hold_distance.len = len-4;
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	3b04      	subs	r3, #4
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <cj_data_handler+0xac>)
 800139e:	729a      	strb	r2, [r3, #10]

	stop_distance_measure();
 80013a0:	f000 fa3c 	bl	800181c <stop_distance_measure>
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	3fe00000 	.word	0x3fe00000
 80013b0:	20009af0 	.word	0x20009af0
 80013b4:	20009bf4 	.word	0x20009bf4
 80013b8:	20000bf4 	.word	0x20000bf4

080013bc <cj_get_distance>:


void cj_get_distance(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	upload_attr_t upload_attr = pack_upload_data(MEASURE_DISTANCE,hold_distance.distance,hold_distance.len);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <cj_get_distance+0x28>)
 80013c4:	7a9b      	ldrb	r3, [r3, #10]
 80013c6:	4638      	mov	r0, r7
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <cj_get_distance+0x28>)
 80013ca:	2103      	movs	r1, #3
 80013cc:	f00b fff6 	bl	800d3bc <pack_upload_data>
	pdh_data_upload(upload_attr.pdata,upload_attr.len);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	793a      	ldrb	r2, [r7, #4]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fdbe 	bl	8001f58 <pdh_data_upload>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000bf4 	.word	0x20000bf4

080013e8 <cj_unpack_fifo_data>:
uint8_t  write_step_flag=0;
uint8_t  distence_data_H=0,distence_data_L=0,point_flg=0;
uint16_t distence_turn=0;

void cj_unpack_fifo_data(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	uint8_t  distence_bai=0,distence_shi=0,distence_ge=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	2300      	movs	r3, #0
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	2300      	movs	r3, #0
 80013f8:	717b      	strb	r3, [r7, #5]
	uint8_t byte = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	713b      	strb	r3, [r7, #4]
	unpack_ceju_data_t *p_obj = &cj_unpack_obj;
 80013fe:	4b9d      	ldr	r3, [pc, #628]	; (8001674 <cj_unpack_fifo_data+0x28c>)
 8001400:	603b      	str	r3, [r7, #0]

	while ( fifo_s_used(p_obj->data_fifo) )
 8001402:	e1e5      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
	{
		byte = fifo_s_get(p_obj->data_fifo);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f00b ff1d 	bl	800d248 <fifo_s_get>
 800140e:	4603      	mov	r3, r0
 8001410:	713b      	strb	r3, [r7, #4]
		switch(p_obj->unpack_step)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7d1b      	ldrb	r3, [r3, #20]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d029      	beq.n	800146e <cj_unpack_fifo_data+0x86>
 800141a:	2b02      	cmp	r3, #2
 800141c:	d04f      	beq.n	80014be <cj_unpack_fifo_data+0xd6>
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 81c9 	bne.w	80017b6 <cj_unpack_fifo_data+0x3ce>
		{
			case STEP_CEJU_HRADER_FIRST:
			{
				if(byte ==0x10 ) // p_obj->index==0
 8001424:	793b      	ldrb	r3, [r7, #4]
 8001426:	2b10      	cmp	r3, #16
 8001428:	d117      	bne.n	800145a <cj_unpack_fifo_data+0x72>
				{
					p_obj->unpack_step = STEP_CEJU_HEADER_SECOND;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	751a      	strb	r2, [r3, #20]
					p_obj->protocol_packet[p_obj->index++] =CEJU_HRADER_FIRST_C ;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	7d5b      	ldrb	r3, [r3, #21]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	b2d1      	uxtb	r1, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	7551      	strb	r1, [r2, #21]
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	2244      	movs	r2, #68	; 0x44
 8001444:	715a      	strb	r2, [r3, #5]
					write_step_flag++;
 8001446:	4b8c      	ldr	r3, [pc, #560]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b8a      	ldr	r3, [pc, #552]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001450:	701a      	strb	r2, [r3, #0]
					distence_flag= 0;
 8001452:	4b8a      	ldr	r3, [pc, #552]	; (800167c <cj_unpack_fifo_data+0x294>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e1ba      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
				}
				else
				{
					p_obj->index = 0;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	755a      	strb	r2, [r3, #21]
					write_step_flag=0;
 8001460:	4b85      	ldr	r3, [pc, #532]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
					distence_flag= 0;
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <cj_unpack_fifo_data+0x294>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
				}
			}break;
 800146c:	e1b0      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>

			case STEP_CEJU_HEADER_SECOND:
			{
				if(byte ==0x01 )// p_obj->index==1
 800146e:	793b      	ldrb	r3, [r7, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d117      	bne.n	80014a4 <cj_unpack_fifo_data+0xbc>
				{
					p_obj->unpack_step = STEP_CEJU_END;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2202      	movs	r2, #2
 8001478:	751a      	strb	r2, [r3, #20]
					p_obj->protocol_packet[p_obj->index++] =CEJU_HRADER_SECOND_C ;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7d5b      	ldrb	r3, [r3, #21]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	b2d1      	uxtb	r1, r2
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	7551      	strb	r1, [r2, #21]
 8001486:	461a      	mov	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	223d      	movs	r2, #61	; 0x3d
 800148e:	715a      	strb	r2, [r3, #5]
					write_step_flag++;
 8001490:	4b79      	ldr	r3, [pc, #484]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b77      	ldr	r3, [pc, #476]	; (8001678 <cj_unpack_fifo_data+0x290>)
 800149a:	701a      	strb	r2, [r3, #0]
					distence_flag= 0;
 800149c:	4b77      	ldr	r3, [pc, #476]	; (800167c <cj_unpack_fifo_data+0x294>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e195      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
				}
				else
				{
					p_obj->index = 0;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	755a      	strb	r2, [r3, #21]
					p_obj->unpack_step = STEP_CEJU_HRADER_FIRST;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	751a      	strb	r2, [r3, #20]
					write_step_flag=0;
 80014b0:	4b71      	ldr	r3, [pc, #452]	; (8001678 <cj_unpack_fifo_data+0x290>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
					distence_flag= 0;
 80014b6:	4b71      	ldr	r3, [pc, #452]	; (800167c <cj_unpack_fifo_data+0x294>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80014bc:	e188      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>

			case STEP_CEJU_END:
			{

				if(distence_flag==0)// p_obj->index==2
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <cj_unpack_fifo_data+0x294>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d119      	bne.n	80014fa <cj_unpack_fifo_data+0x112>
				{
					if(byte==0x00)// 数据描述符 0x00：有效数据
 80014c6:	793b      	ldrb	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <cj_unpack_fifo_data+0xf8>
					{
						distence_flag=1;
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <cj_unpack_fifo_data+0x294>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
						write_step_flag++;
 80014d2:	4b69      	ldr	r3, [pc, #420]	; (8001678 <cj_unpack_fifo_data+0x290>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b67      	ldr	r3, [pc, #412]	; (8001678 <cj_unpack_fifo_data+0x290>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e177      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
					}
					else		// 数据描述符 0x10：无效数据
					{
						p_obj->index = 0;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	755a      	strb	r2, [r3, #21]
						p_obj->unpack_step = STEP_CEJU_HRADER_FIRST;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	751a      	strb	r2, [r3, #20]
						write_step_flag=0;
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <cj_unpack_fifo_data+0x290>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
						distence_flag= 0;
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <cj_unpack_fifo_data+0x294>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e16a      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
					}

				}
				else
				{
					if(write_step_flag==3)
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <cj_unpack_fifo_data+0x290>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d109      	bne.n	8001516 <cj_unpack_fifo_data+0x12e>
					{
						distence_data_H=byte;
 8001502:	4a5f      	ldr	r2, [pc, #380]	; (8001680 <cj_unpack_fifo_data+0x298>)
 8001504:	793b      	ldrb	r3, [r7, #4]
 8001506:	7013      	strb	r3, [r2, #0]
						write_step_flag++;
 8001508:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <cj_unpack_fifo_data+0x290>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e15c      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
					}
					else if(write_step_flag==4)
 8001516:	4b58      	ldr	r3, [pc, #352]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d109      	bne.n	8001532 <cj_unpack_fifo_data+0x14a>
					{
						distence_data_L=byte;
 800151e:	4a59      	ldr	r2, [pc, #356]	; (8001684 <cj_unpack_fifo_data+0x29c>)
 8001520:	793b      	ldrb	r3, [r7, #4]
 8001522:	7013      	strb	r3, [r2, #0]
						write_step_flag++;
 8001524:	4b54      	ldr	r3, [pc, #336]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b52      	ldr	r3, [pc, #328]	; (8001678 <cj_unpack_fifo_data+0x290>)
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e14e      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
					}
					else if(write_step_flag==5)
 8001532:	4b51      	ldr	r3, [pc, #324]	; (8001678 <cj_unpack_fifo_data+0x290>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b05      	cmp	r3, #5
 8001538:	f040 814a 	bne.w	80017d0 <cj_unpack_fifo_data+0x3e8>
					{
						if(byte==(0x100-((uint8_t)(distence_data_H+distence_data_L+0x01))))//验证校验和
 800153c:	793a      	ldrb	r2, [r7, #4]
 800153e:	4b50      	ldr	r3, [pc, #320]	; (8001680 <cj_unpack_fifo_data+0x298>)
 8001540:	7819      	ldrb	r1, [r3, #0]
 8001542:	4b50      	ldr	r3, [pc, #320]	; (8001684 <cj_unpack_fifo_data+0x29c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	440b      	add	r3, r1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001552:	429a      	cmp	r2, r3
 8001554:	f040 8122 	bne.w	800179c <cj_unpack_fifo_data+0x3b4>
						{
							distence_turn=(distence_data_H<<8)+distence_data_L;
 8001558:	4b49      	ldr	r3, [pc, #292]	; (8001680 <cj_unpack_fifo_data+0x298>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <cj_unpack_fifo_data+0x29c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	4413      	add	r3, r2
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b46      	ldr	r3, [pc, #280]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 800156e:	801a      	strh	r2, [r3, #0]
							point_flg=distence_turn%2;
 8001570:	4b45      	ldr	r3, [pc, #276]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <cj_unpack_fifo_data+0x2a4>)
 800157e:	701a      	strb	r2, [r3, #0]
							distence_turn=distence_turn/2;
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 800158a:	801a      	strh	r2, [r3, #0]

							distence_bai=(distence_turn/100);
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	4a3f      	ldr	r2, [pc, #252]	; (8001690 <cj_unpack_fifo_data+0x2a8>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	b29b      	uxth	r3, r3
 800159a:	71fb      	strb	r3, [r7, #7]
							if(distence_bai>0)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00f      	beq.n	80015c2 <cj_unpack_fifo_data+0x1da>
							{
								distence_bai+=0x30;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3330      	adds	r3, #48	; 0x30
 80015a6:	71fb      	strb	r3, [r7, #7]
								p_obj->protocol_packet[p_obj->index] =distence_bai ;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	7d5b      	ldrb	r3, [r3, #21]
 80015ac:	461a      	mov	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	715a      	strb	r2, [r3, #5]
								p_obj->index++;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7d5b      	ldrb	r3, [r3, #21]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	755a      	strb	r2, [r3, #21]
							}

							distence_shi=((distence_turn%100)/10);
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4a32      	ldr	r2, [pc, #200]	; (8001690 <cj_unpack_fifo_data+0x2a8>)
 80015c8:	fba2 1203 	umull	r1, r2, r2, r3
 80015cc:	0952      	lsrs	r2, r2, #5
 80015ce:	2164      	movs	r1, #100	; 0x64
 80015d0:	fb01 f202 	mul.w	r2, r1, r2
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <cj_unpack_fifo_data+0x2ac>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	71bb      	strb	r3, [r7, #6]
							if(distence_shi>0)
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d010      	beq.n	800160c <cj_unpack_fifo_data+0x224>
							{
								distence_shi+=0x30;
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	3330      	adds	r3, #48	; 0x30
 80015ee:	71bb      	strb	r3, [r7, #6]
								p_obj->protocol_packet[p_obj->index] =distence_shi ;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	7d5b      	ldrb	r3, [r3, #21]
 80015f4:	461a      	mov	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	79ba      	ldrb	r2, [r7, #6]
 80015fc:	715a      	strb	r2, [r3, #5]
								p_obj->index++;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	7d5b      	ldrb	r3, [r3, #21]
 8001602:	3301      	adds	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	755a      	strb	r2, [r3, #21]
 800160a:	e012      	b.n	8001632 <cj_unpack_fifo_data+0x24a>
							}
							else
							{
								if(distence_bai>0x30)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b30      	cmp	r3, #48	; 0x30
 8001610:	d90f      	bls.n	8001632 <cj_unpack_fifo_data+0x24a>
								{
									distence_shi+=0x30;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	3330      	adds	r3, #48	; 0x30
 8001616:	71bb      	strb	r3, [r7, #6]
									p_obj->protocol_packet[p_obj->index] =distence_shi ;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7d5b      	ldrb	r3, [r3, #21]
 800161c:	461a      	mov	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	79ba      	ldrb	r2, [r7, #6]
 8001624:	715a      	strb	r2, [r3, #5]
									p_obj->index++;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	7d5b      	ldrb	r3, [r3, #21]
 800162a:	3301      	adds	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	755a      	strb	r2, [r3, #21]
								}
							}

							distence_ge=(distence_turn%10);
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <cj_unpack_fifo_data+0x2a0>)
 8001634:	881a      	ldrh	r2, [r3, #0]
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <cj_unpack_fifo_data+0x2ac>)
 8001638:	fba3 1302 	umull	r1, r3, r3, r2
 800163c:	08d9      	lsrs	r1, r3, #3
 800163e:	460b      	mov	r3, r1
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	717b      	strb	r3, [r7, #5]
							if(distence_ge>0)
 800164c:	797b      	ldrb	r3, [r7, #5]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d022      	beq.n	8001698 <cj_unpack_fifo_data+0x2b0>
							{
								distence_ge+=0x30;
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	3330      	adds	r3, #48	; 0x30
 8001656:	717b      	strb	r3, [r7, #5]
								p_obj->protocol_packet[p_obj->index] =distence_ge ;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7d5b      	ldrb	r3, [r3, #21]
 800165c:	461a      	mov	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	797a      	ldrb	r2, [r7, #5]
 8001664:	715a      	strb	r2, [r3, #5]
								p_obj->index++;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	7d5b      	ldrb	r3, [r3, #21]
 800166a:	3301      	adds	r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	755a      	strb	r2, [r3, #21]
 8001672:	e027      	b.n	80016c4 <cj_unpack_fifo_data+0x2dc>
 8001674:	20000b44 	.word	0x20000b44
 8001678:	20000c00 	.word	0x20000c00
 800167c:	20000bff 	.word	0x20000bff
 8001680:	20000c01 	.word	0x20000c01
 8001684:	20000c02 	.word	0x20000c02
 8001688:	20000c04 	.word	0x20000c04
 800168c:	20000c03 	.word	0x20000c03
 8001690:	51eb851f 	.word	0x51eb851f
 8001694:	cccccccd 	.word	0xcccccccd
							}
							else
							{
								if((distence_shi>0x30)||(distence_bai>0x30))
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	2b30      	cmp	r3, #48	; 0x30
 800169c:	d802      	bhi.n	80016a4 <cj_unpack_fifo_data+0x2bc>
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b30      	cmp	r3, #48	; 0x30
 80016a2:	d90f      	bls.n	80016c4 <cj_unpack_fifo_data+0x2dc>
								{
									distence_ge+=0x30;
 80016a4:	797b      	ldrb	r3, [r7, #5]
 80016a6:	3330      	adds	r3, #48	; 0x30
 80016a8:	717b      	strb	r3, [r7, #5]
									p_obj->protocol_packet[p_obj->index] =distence_ge ;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	7d5b      	ldrb	r3, [r3, #21]
 80016ae:	461a      	mov	r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	797a      	ldrb	r2, [r7, #5]
 80016b6:	715a      	strb	r2, [r3, #5]
									p_obj->index++;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	7d5b      	ldrb	r3, [r3, #21]
 80016bc:	3301      	adds	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	755a      	strb	r2, [r3, #21]
								}
							}

							p_obj->protocol_packet[p_obj->index] =0x2E ;//.
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	7d5b      	ldrb	r3, [r3, #21]
 80016c8:	461a      	mov	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	222e      	movs	r2, #46	; 0x2e
 80016d0:	715a      	strb	r2, [r3, #5]
							p_obj->index++;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	7d5b      	ldrb	r3, [r3, #21]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	755a      	strb	r2, [r3, #21]

							if(point_flg)
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <cj_unpack_fifo_data+0x404>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <cj_unpack_fifo_data+0x31a>
							{
								p_obj->protocol_packet[p_obj->index] =0x35 ;//5
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7d5b      	ldrb	r3, [r3, #21]
 80016ea:	461a      	mov	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	2235      	movs	r2, #53	; 0x35
 80016f2:	715a      	strb	r2, [r3, #5]
								p_obj->index++;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	7d5b      	ldrb	r3, [r3, #21]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	755a      	strb	r2, [r3, #21]
 8001700:	e00c      	b.n	800171c <cj_unpack_fifo_data+0x334>
							}
							else
							{
								p_obj->protocol_packet[p_obj->index] =0x30 ;//0
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	7d5b      	ldrb	r3, [r3, #21]
 8001706:	461a      	mov	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	2230      	movs	r2, #48	; 0x30
 800170e:	715a      	strb	r2, [r3, #5]
								p_obj->index++;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7d5b      	ldrb	r3, [r3, #21]
 8001714:	3301      	adds	r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	755a      	strb	r2, [r3, #21]
							}
							p_obj->protocol_packet[p_obj->index] ='m' ;//
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	7d5b      	ldrb	r3, [r3, #21]
 8001720:	461a      	mov	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	226d      	movs	r2, #109	; 0x6d
 8001728:	715a      	strb	r2, [r3, #5]
							p_obj->index++;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7d5b      	ldrb	r3, [r3, #21]
 800172e:	3301      	adds	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	755a      	strb	r2, [r3, #21]
							p_obj->protocol_packet[p_obj->index] ='\r' ;//
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	7d5b      	ldrb	r3, [r3, #21]
 800173a:	461a      	mov	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	220d      	movs	r2, #13
 8001742:	715a      	strb	r2, [r3, #5]
							p_obj->index++;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	7d5b      	ldrb	r3, [r3, #21]
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	755a      	strb	r2, [r3, #21]
							p_obj->protocol_packet[p_obj->index] ='\n' ;//.
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	7d5b      	ldrb	r3, [r3, #21]
 8001754:	461a      	mov	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	220a      	movs	r2, #10
 800175c:	715a      	strb	r2, [r3, #5]
							p_obj->index++;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	7d5b      	ldrb	r3, [r3, #21]
 8001762:	3301      	adds	r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	755a      	strb	r2, [r3, #21]

							p_obj->frame_len = p_obj->index;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7d5a      	ldrb	r2, [r3, #21]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	711a      	strb	r2, [r3, #4]
							p_obj->unpack_step = STEP_CEJU_HRADER_FIRST;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	751a      	strb	r2, [r3, #20]
							p_obj->index = 0;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	755a      	strb	r2, [r3, #21]
							distence_flag= 0; 
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <cj_unpack_fifo_data+0x408>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
							write_step_flag=0;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <cj_unpack_fifo_data+0x40c>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
							cj_data_handler(p_obj->protocol_packet, p_obj->frame_len);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	1d5a      	adds	r2, r3, #5
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff fdb9 	bl	800130c <cj_data_handler>
 800179a:	e019      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>
						}
						else
						{
							p_obj->index = 0;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	755a      	strb	r2, [r3, #21]
							p_obj->unpack_step = STEP_CEJU_HRADER_FIRST;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	751a      	strb	r2, [r3, #20]
							distence_flag= 0;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <cj_unpack_fifo_data+0x408>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
							write_step_flag=0;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <cj_unpack_fifo_data+0x40c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
					}
					else{;}

				}

			}break;
 80017b4:	e00c      	b.n	80017d0 <cj_unpack_fifo_data+0x3e8>

			default:
			{
				p_obj->unpack_step = STEP_CEJU_HRADER_FIRST;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2200      	movs	r2, #0
 80017ba:	751a      	strb	r2, [r3, #20]
				p_obj->index = 0;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	755a      	strb	r2, [r3, #21]
				distence_flag= 0;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <cj_unpack_fifo_data+0x408>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
				write_step_flag=0;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <cj_unpack_fifo_data+0x40c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
			}break;
 80017ce:	bf00      	nop
	while ( fifo_s_used(p_obj->data_fifo) )
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00b fde5 	bl	800d3a4 <fifo_s_used>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f ae11 	bne.w	8001404 <cj_unpack_fifo_data+0x1c>
		}
	}
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000c03 	.word	0x20000c03
 80017f0:	20000bff 	.word	0x20000bff
 80017f4:	20000c00 	.word	0x20000c00

080017f8 <start_distance_measure>:
		}
	}
}
*/
void start_distance_measure(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
//	uint8_t start[7] = {0x0D, 0x0A, 0x4F, 0x3D, 0x31, 0x0D, 0x0A};
	uint8_t start[4] = {0x10, 0x83, 0x00, 0x7D};//新测距机单次测距
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <start_distance_measure+0x20>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	607b      	str	r3, [r7, #4]
	usart3_transmit(start,4);
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2104      	movs	r1, #4
 8001808:	4618      	mov	r0, r3
 800180a:	f00a fb3b 	bl	800be84 <usart3_transmit>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	0800f128 	.word	0x0800f128

0800181c <stop_distance_measure>:

void stop_distance_measure(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
//	uint8_t stop[7] = {0x0D, 0x0A, 0x4F, 0x46, 0x46, 0x0D, 0x0A};
	 uint8_t stop[3] = {0x10, 0x84, 0x7C};//新测距机停止测距
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <stop_distance_measure+0x28>)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	4611      	mov	r1, r2
 800182a:	8019      	strh	r1, [r3, #0]
 800182c:	3302      	adds	r3, #2
 800182e:	0c12      	lsrs	r2, r2, #16
 8001830:	701a      	strb	r2, [r3, #0]
	usart3_transmit(stop,3);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2103      	movs	r1, #3
 8001836:	4618      	mov	r0, r3
 8001838:	f00a fb24 	bl	800be84 <usart3_transmit>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800f12c 	.word	0x0800f12c

08001848 <protocol_rcv_cmd_register>:
#include "cmd.h"

struct rcv_cmd_info rcv_cmds[PROTOCOL_CMD_MAX_NUM];

int8_t protocol_rcv_cmd_register(uint16_t cmd, rcv_handle_fn_t rcv_callback)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e01d      	b.n	8001896 <protocol_rcv_cmd_register+0x4e>
  {
    if (rcv_cmds[i].used == 0)
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <protocol_rcv_cmd_register+0x64>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d114      	bne.n	8001890 <protocol_rcv_cmd_register+0x48>
    {
      rcv_cmds[i].used = 1;
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <protocol_rcv_cmd_register+0x64>)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2101      	movs	r1, #1
 800186c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      rcv_cmds[i].cmd = cmd;
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	b2d9      	uxtb	r1, r3
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <protocol_rcv_cmd_register+0x64>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	460a      	mov	r2, r1
 800187e:	705a      	strb	r2, [r3, #1]
      rcv_cmds[i].rcv_callback = rcv_callback;
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <protocol_rcv_cmd_register+0x64>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	605a      	str	r2, [r3, #4]
      return 0;
 800188c:	2300      	movs	r3, #0
 800188e:	e007      	b.n	80018a0 <protocol_rcv_cmd_register+0x58>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b4f      	cmp	r3, #79	; 0x4f
 800189a:	ddde      	ble.n	800185a <protocol_rcv_cmd_register+0x12>
    }
  }
  return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200095b0 	.word	0x200095b0

080018b0 <protocol_rcv_pack_handle>:
  }
  return -1;
}

void protocol_rcv_pack_handle(uint8_t *pack_data, uint16_t cmd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  attr_pack_t *pack = (attr_pack_t *)(pack_data);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e024      	b.n	8001910 <protocol_rcv_pack_handle+0x60>
  {
    if ((rcv_cmds[i].cmd == cmd) && (rcv_cmds[i].rcv_callback != NULL) && (rcv_cmds[i].used == 1))
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <protocol_rcv_pack_handle+0x70>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d118      	bne.n	800190a <protocol_rcv_pack_handle+0x5a>
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <protocol_rcv_pack_handle+0x70>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d011      	beq.n	800190a <protocol_rcv_pack_handle+0x5a>
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <protocol_rcv_pack_handle+0x70>)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10b      	bne.n	800190a <protocol_rcv_pack_handle+0x5a>
    {
      rcv_cmds[i].rcv_callback(pack->pdata, pack->len);
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <protocol_rcv_pack_handle+0x70>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	68b8      	ldr	r0, [r7, #8]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001904:	b292      	uxth	r2, r2
 8001906:	4611      	mov	r1, r2
 8001908:	4798      	blx	r3
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b4f      	cmp	r3, #79	; 0x4f
 8001914:	ddd7      	ble.n	80018c6 <protocol_rcv_pack_handle+0x16>
    }
  }

  return;
 8001916:	bf00      	nop
}
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200095b0 	.word	0x200095b0

08001924 <communicate_task>:
#include "drv_uart.h"
#include "cmd.h"
#include "adc_data_handle.h"

void communicate_task(void const * argument)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
  	osEvent event;
  	event = osSignalWait(RECV_PROTOCOL_SIGNAL | RECV_CEJU_SIGNAL | RECV_ADC_DMA_SIGNAL, osWaitForever);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	2107      	movs	r1, #7
 8001936:	4618      	mov	r0, r3
 8001938:	f006 fcfc 	bl	8008334 <osSignalWait>

  	if (event.status == osEventSignal)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b08      	cmp	r3, #8
 8001940:	d1f4      	bne.n	800192c <communicate_task+0x8>
		{
			if (event.value.signals & RECV_PROTOCOL_SIGNAL)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <communicate_task+0x2c>
			{
				pdh_unpack_fifo_data();
 800194c:	f000 f9ec 	bl	8001d28 <pdh_unpack_fifo_data>
			}

			if (event.value.signals & RECV_CEJU_SIGNAL)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0e8      	beq.n	800192c <communicate_task+0x8>
			{
				cj_unpack_fifo_data();
 800195a:	f7ff fd45 	bl	80013e8 <cj_unpack_fifo_data>
  {
 800195e:	e7e5      	b.n	800192c <communicate_task+0x8>

08001960 <device_init>:
struct lens lens;
struct bracket bracket;
struct protect_structure protect_structure;

void device_init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  adh_param_init();
 8001964:	f7ff fc04 	bl	8001170 <adh_param_init>
  pdh_param_init();
 8001968:	f000 f97e 	bl	8001c68 <pdh_param_init>
  cj_param_init();
 800196c:	f7ff fc98 	bl	80012a0 <cj_param_init>
  usart1_manage_init();
 8001970:	f00a fa42 	bl	800bdf8 <usart1_manage_init>
  usart3_manage_init();
 8001974:	f00a f9fe 	bl	800bd74 <usart3_manage_init>
  usart1_rx_callback_register(pdh_uart_rx_data_handle);
 8001978:	480f      	ldr	r0, [pc, #60]	; (80019b8 <device_init+0x58>)
 800197a:	f00a f959 	bl	800bc30 <usart1_rx_callback_register>
  usart3_rx_callback_register(cj_uart_rx_data_handle);
 800197e:	480f      	ldr	r0, [pc, #60]	; (80019bc <device_init+0x5c>)
 8001980:	f00a f964 	bl	800bc4c <usart3_rx_callback_register>
 //	 usart1_printf("%x\n",res);
 //  }

   /******************************************************************************************/

  lens_pid_register(&lens,"lens");
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <device_init+0x60>)
 8001986:	480f      	ldr	r0, [pc, #60]	; (80019c4 <device_init+0x64>)
 8001988:	f00b f876 	bl	800ca78 <lens_pid_register>
  bracket_register(&bracket,"bracket");
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <device_init+0x68>)
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <device_init+0x6c>)
 8001990:	f00a fe66 	bl	800c660 <bracket_register>
  protect_structure_register(&protect_structure,"protect_structure");
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <device_init+0x70>)
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <device_init+0x74>)
 8001998:	f00b fa14 	bl	800cdc4 <protect_structure_register>
  m62429_init();
 800199c:	f00a fcd6 	bl	800c34c <m62429_init>
  adc_upload_data_register(pdh_data_upload);
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <device_init+0x78>)
 80019a2:	f7ff fbef 	bl	8001184 <adc_upload_data_register>
  right_motor_awd_trigger_callback_register(right_motor_awd_trigger_handle);
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <device_init+0x7c>)
 80019a8:	f00a f820 	bl	800b9ec <right_motor_awd_trigger_callback_register>
  left_motor_awd_trigger_callback_register(left_motor_awd_trigger_handle);
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <device_init+0x80>)
 80019ae:	f00a f82b 	bl	800ba08 <left_motor_awd_trigger_callback_register>

//  stop_distance_measure();
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08001ca5 	.word	0x08001ca5
 80019bc:	080012d9 	.word	0x080012d9
 80019c0:	0800f130 	.word	0x0800f130
 80019c4:	20009830 	.word	0x20009830
 80019c8:	0800f138 	.word	0x0800f138
 80019cc:	20009a00 	.word	0x20009a00
 80019d0:	0800f140 	.word	0x0800f140
 80019d4:	20009984 	.word	0x20009984
 80019d8:	08001f59 	.word	0x08001f59
 80019dc:	08001b89 	.word	0x08001b89
 80019e0:	08001b09 	.word	0x08001b09

080019e4 <init_task>:
#include "drv_uart.h"
#include "charge_test.h"
#include "adc_data_handle.h"

void init_task(void const * argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	writer_u writer;
	bracket_t bracket = bracket_find("bracket");
 80019ec:	4839      	ldr	r0, [pc, #228]	; (8001ad4 <init_task+0xf0>)
 80019ee:	f00a ff25 	bl	800c83c <bracket_find>
 80019f2:	6138      	str	r0, [r7, #16]
	uint8_t write_flash_flag = FALSE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		if(HAL_GPIO_ReadPin(bracket->stepper[up_down_stepper].limit_gpio_port_handle,bracket->stepper[up_down_stepper].limit_gpio_Pin))
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f003 ffdf 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <init_task+0x4e>
		{
			if((bracket->stepper[up_down_stepper].position == left) || (bracket->stepper[up_down_stepper].position == right))
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <init_task+0x40>
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d113      	bne.n	8001a4c <init_task+0x68>
			{
				bracket->stepper[up_down_stepper].position = middle;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				// TODO: update status into flash
				write_flash_flag=TRUE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	75fb      	strb	r3, [r7, #23]
 8001a30:	e00c      	b.n	8001a4c <init_task+0x68>
			}
		}
		else
		{
			if(bracket->stepper[up_down_stepper].position == middle)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <init_task+0x68>
			{
				bracket->stepper[up_down_stepper].position = bracket->stepper[up_down_stepper].last_position;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				// TODO: update status into flash
				write_flash_flag=TRUE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	75fb      	strb	r3, [r7, #23]
			}
		}

		if(HAL_GPIO_ReadPin(bracket->stepper[left_right_stepper].limit_gpio_port_handle,bracket->stepper[left_right_stepper].limit_gpio_Pin))
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f003 ffb4 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <init_task+0xa4>
		{
			if((bracket->stepper[left_right_stepper].position == left) || (bracket->stepper[left_right_stepper].position == right))
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <init_task+0x96>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d113      	bne.n	8001aa2 <init_task+0xbe>
			{
				bracket->stepper[left_right_stepper].position = middle;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				// TODO: update status into flash
				write_flash_flag=TRUE;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
 8001a86:	e00c      	b.n	8001aa2 <init_task+0xbe>
			}
		}
		else
		{
			if(bracket->stepper[left_right_stepper].position == middle)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <init_task+0xbe>
			{
				bracket->stepper[left_right_stepper].position = bracket->stepper[left_right_stepper].last_position;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				// TODO: update status into flash
				write_flash_flag=TRUE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
			}
		}

		if(write_flash_flag)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00c      	beq.n	8001ac2 <init_task+0xde>
		{
			write_flash_flag = FALSE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	75fb      	strb	r3, [r7, #23]
			writer.data[0] = bracket->stepper[up_down_stepper].position;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001ab2:	733b      	strb	r3, [r7, #12]
			writer.data[1] = bracket->stepper[left_right_stepper].position;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8001aba:	737b      	strb	r3, [r7, #13]
			write_word_to_flash(writer);
 8001abc:	89b8      	ldrh	r0, [r7, #12]
 8001abe:	f00a f875 	bl	800bbac <write_word_to_flash>
		}

		adh_prase_adc_dam_data();
 8001ac2:	f7ff fb6d 	bl	80011a0 <adh_prase_adc_dam_data>

		charge_test();
 8001ac6:	f00a ffb5 	bl	800ca34 <charge_test>

		osDelay(20);
 8001aca:	2014      	movs	r0, #20
 8001acc:	f006 fb7c 	bl	80081c8 <osDelay>
		if(HAL_GPIO_ReadPin(bracket->stepper[up_down_stepper].limit_gpio_port_handle,bracket->stepper[up_down_stepper].limit_gpio_Pin))
 8001ad0:	e792      	b.n	80019f8 <init_task+0x14>
 8001ad2:	bf00      	nop
 8001ad4:	0800f154 	.word	0x0800f154

08001ad8 <lens_task>:

static void resume_the_task(void);
static uint8_t left_motor_arrive_zero,right_motor_arrive_zero = 0;

void lens_task(void const * argument)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	uint32_t period = osKernelSysTick();
 8001ae0:	f006 fb3b 	bl	800815a <osKernelSysTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60bb      	str	r3, [r7, #8]

	lens_t plens = lens_find("lens");
 8001ae8:	4806      	ldr	r0, [pc, #24]	; (8001b04 <lens_task+0x2c>)
 8001aea:	f00b f893 	bl	800cc14 <lens_find>
 8001aee:	60f8      	str	r0, [r7, #12]
  for(;;)
  {
  	lens_execute(plens);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f00b f89d 	bl	800cc30 <lens_execute>
  	osDelayUntil(&period, 5);
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	2105      	movs	r1, #5
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 fd23 	bl	8008548 <osDelayUntil>
  	lens_execute(plens);
 8001b02:	e7f5      	b.n	8001af0 <lens_task+0x18>
 8001b04:	0800f15c 	.word	0x0800f15c

08001b08 <left_motor_awd_trigger_handle>:
  }
}

void left_motor_awd_trigger_handle(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	lens_t plens = lens_find("lens");
 8001b0e:	481a      	ldr	r0, [pc, #104]	; (8001b78 <left_motor_awd_trigger_handle+0x70>)
 8001b10:	f00b f880 	bl	800cc14 <lens_find>
 8001b14:	6078      	str	r0, [r7, #4]
	static uint16_t left_awd_conut =0;
	if(plens->motor[left_motor].goto_zp_flag)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d027      	beq.n	8001b70 <left_motor_awd_trigger_handle+0x68>
	{
		if(left_awd_conut++ >= 10000)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <left_motor_awd_trigger_handle+0x74>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	b291      	uxth	r1, r2
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <left_motor_awd_trigger_handle+0x74>)
 8001b2a:	8011      	strh	r1, [r2, #0]
 8001b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d91d      	bls.n	8001b70 <left_motor_awd_trigger_handle+0x68>
		{
			plens->motor[left_motor].goto_zp_flag = FALSE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			left_awd_conut = 0;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <left_motor_awd_trigger_handle+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	801a      	strh	r2, [r3, #0]
			left_motor_arrive_zero = 1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <left_motor_awd_trigger_handle+0x78>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
			motor_device_run(&plens->motor[left_motor], 500);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3330      	adds	r3, #48	; 0x30
 8001b4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00a fd21 	bl	800c598 <motor_device_run>
			if(left_motor_arrive_zero && right_motor_arrive_zero)
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <left_motor_awd_trigger_handle+0x78>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <left_motor_awd_trigger_handle+0x68>
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <left_motor_awd_trigger_handle+0x7c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <left_motor_awd_trigger_handle+0x68>
			{
				left_motor_arrive_zero = 0;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <left_motor_awd_trigger_handle+0x78>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
				resume_the_task();
 8001b6c:	f000 f84c 	bl	8001c08 <resume_the_task>
			}
		}
	}

}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0800f15c 	.word	0x0800f15c
 8001b7c:	20000c08 	.word	0x20000c08
 8001b80:	20000c06 	.word	0x20000c06
 8001b84:	20000c07 	.word	0x20000c07

08001b88 <right_motor_awd_trigger_handle>:

void right_motor_awd_trigger_handle(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	lens_t plens = lens_find("lens");
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <right_motor_awd_trigger_handle+0x70>)
 8001b90:	f00b f840 	bl	800cc14 <lens_find>
 8001b94:	6078      	str	r0, [r7, #4]
	static uint16_t right_awd_conut = 0;
	if(plens->motor[right_motor].goto_zp_flag)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d027      	beq.n	8001bf0 <right_motor_awd_trigger_handle+0x68>
	{
		if(right_awd_conut++ >= 10000)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <right_motor_awd_trigger_handle+0x74>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	b291      	uxth	r1, r2
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <right_motor_awd_trigger_handle+0x74>)
 8001baa:	8011      	strh	r1, [r2, #0]
 8001bac:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d91d      	bls.n	8001bf0 <right_motor_awd_trigger_handle+0x68>
		{
			plens->motor[right_motor].goto_zp_flag = FALSE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			right_awd_conut = 0;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <right_motor_awd_trigger_handle+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	801a      	strh	r2, [r3, #0]
			right_motor_arrive_zero = 1;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <right_motor_awd_trigger_handle+0x78>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
			motor_device_run(&plens->motor[right_motor], 500);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3380      	adds	r3, #128	; 0x80
 8001bcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00a fce1 	bl	800c598 <motor_device_run>
			if(left_motor_arrive_zero && right_motor_arrive_zero)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <right_motor_awd_trigger_handle+0x7c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <right_motor_awd_trigger_handle+0x68>
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <right_motor_awd_trigger_handle+0x78>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <right_motor_awd_trigger_handle+0x68>
			{
				right_motor_arrive_zero = 0;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <right_motor_awd_trigger_handle+0x78>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
				resume_the_task();
 8001bec:	f000 f80c 	bl	8001c08 <resume_the_task>
			}
		}
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0800f15c 	.word	0x0800f15c
 8001bfc:	20000c0a 	.word	0x20000c0a
 8001c00:	20000c07 	.word	0x20000c07
 8001c04:	20000c06 	.word	0x20000c06

08001c08 <resume_the_task>:

static void resume_the_task(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	lens_t plens = lens_find("lens");
 8001c0e:	4814      	ldr	r0, [pc, #80]	; (8001c60 <resume_the_task+0x58>)
 8001c10:	f00b f800 	bl	800cc14 <lens_find>
 8001c14:	6078      	str	r0, [r7, #4]
	if(!plens->auto_focus_flag)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <resume_the_task+0x2c>
	{
		plens->motor[left_motor].target = left_motor_zp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f247 5230 	movw	r2, #30000	; 0x7530
 8001c26:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		plens->motor[right_motor].target = right_motor_zp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001c30:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	}
	motor_device_set_encoder(&plens->motor[left_motor], 100);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3330      	adds	r3, #48	; 0x30
 8001c38:	2164      	movs	r1, #100	; 0x64
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00a fcda 	bl	800c5f4 <motor_device_set_encoder>
	motor_device_set_encoder(&plens->motor[right_motor], 100);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3380      	adds	r3, #128	; 0x80
 8001c44:	2164      	movs	r1, #100	; 0x64
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00a fcd4 	bl	800c5f4 <motor_device_set_encoder>
	osThreadResume(LensTaskHandle);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <resume_the_task+0x5c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f006 fc57 	bl	8008504 <osThreadResume>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800f15c 	.word	0x0800f15c
 8001c64:	20009bf8 	.word	0x20009bf8

08001c68 <pdh_param_init>:

//add by zhangshaoyan 2020/3/15 end.


void pdh_param_init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	fifo_s_init(&dh_rxdata_fifo, dh_rxdata_buf, DH_FIFO_BUFLEN);
 8001c6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c70:	4909      	ldr	r1, [pc, #36]	; (8001c98 <pdh_param_init+0x30>)
 8001c72:	480a      	ldr	r0, [pc, #40]	; (8001c9c <pdh_param_init+0x34>)
 8001c74:	f00b fa4c 	bl	800d110 <fifo_s_init>

	/* initial judge data unpack object */
	dh_unpack_obj.data_fifo = &dh_rxdata_fifo;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <pdh_param_init+0x38>)
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <pdh_param_init+0x34>)
 8001c7c:	601a      	str	r2, [r3, #0]
	dh_unpack_obj.index = 0;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <pdh_param_init+0x38>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	dh_unpack_obj.frame_len = 0;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <pdh_param_init+0x38>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	711a      	strb	r2, [r3, #4]
	dh_unpack_obj.unpack_step = STEP_HEADER_5A;
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <pdh_param_init+0x38>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000d28 	.word	0x20000d28
 8001c9c:	20000d10 	.word	0x20000d10
 8001ca0:	20000c0c 	.word	0x20000c0c

08001ca4 <pdh_uart_rx_data_handle>:

uint32_t pdh_uart_rx_data_handle(uint8_t *data, uint32_t len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	//将数据复制到Rx FIFO中
	fifo_s_puts(&dh_rxdata_fifo, (char *)data, len);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <pdh_uart_rx_data_handle+0x2c>)
 8001cb6:	f00b fa4c 	bl	800d152 <fifo_s_puts>
	//向通信任务CommunicateTask发送通知，并携带通知值
	osSignalSet(CommunicateTaskHandle, RECV_PROTOCOL_SIGNAL);
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <pdh_uart_rx_data_handle+0x30>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 faf7 	bl	80082b4 <osSignalSet>
	return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000d10 	.word	0x20000d10
 8001cd4:	20009be0 	.word	0x20009be0

08001cd8 <pdh_data_handler>:

void pdh_data_handler(uint8_t *p_frame, uint8_t len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
	static attr_pack_t pdata;
	uint8_t data_len = p_frame[frame_length]-PROTOCOL_FIXED_LENGTH;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3b06      	subs	r3, #6
 8001cec:	73fb      	strb	r3, [r7, #15]
	if(data_len>0)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <pdh_data_handler+0x42>
	{
		memcpy(pdata.pdata,&p_frame[attribute_id],data_len);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <pdh_data_handler+0x4c>)
 8001cfe:	f00b fbcb 	bl	800d498 <memcpy>
		pdata.len = data_len;
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <pdh_data_handler+0x4c>)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
		protocol_rcv_pack_handle((uint8_t*)&pdata,p_frame[attribute_id]);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3305      	adds	r3, #5
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <pdh_data_handler+0x4c>)
 8001d16:	f7ff fdcb 	bl	80018b0 <protocol_rcv_pack_handle>
	}
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000f1c 	.word	0x20000f1c

08001d28 <pdh_unpack_fifo_data>:

void pdh_unpack_fifo_data(void)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
	unpack_data_t *p_obj = &dh_unpack_obj;
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <pdh_unpack_fifo_data+0x22c>)
 8001d34:	60bb      	str	r3, [r7, #8]

	//add by zhangshaoyan 2020/3/15 begin.
	while(fifo_s_used(p_obj->data_fifo)>=sizeof(int))
 8001d36:	e043      	b.n	8001dc0 <pdh_unpack_fifo_data+0x98>
	{
		uint32_t uFetchData;
		uint8_t *p=(uint8_t*)&uFetchData;
 8001d38:	463b      	mov	r3, r7
 8001d3a:	607b      	str	r3, [r7, #4]
		//fetch 1 int (4 bytes) from fifo.
		p[0]=fifo_s_get(p_obj->data_fifo);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00b fa81 	bl	800d248 <fifo_s_get>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	701a      	strb	r2, [r3, #0]
		p[1]=fifo_s_get(p_obj->data_fifo);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	1c5c      	adds	r4, r3, #1
 8001d56:	4610      	mov	r0, r2
 8001d58:	f00b fa76 	bl	800d248 <fifo_s_get>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	7023      	strb	r3, [r4, #0]
		p[2]=fifo_s_get(p_obj->data_fifo);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	1c9c      	adds	r4, r3, #2
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f00b fa6d 	bl	800d248 <fifo_s_get>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	7023      	strb	r3, [r4, #0]
		p[3]=fifo_s_get(p_obj->data_fifo);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	1cdc      	adds	r4, r3, #3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f00b fa64 	bl	800d248 <fifo_s_get>
 8001d80:	4603      	mov	r3, r0
 8001d82:	7023      	strb	r3, [r4, #0]
		switch(p_obj->unpack_step)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d80e      	bhi.n	8001dac <pdh_unpack_fifo_data+0x84>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <pdh_unpack_fifo_data+0x6c>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001dbf 	.word	0x08001dbf
 8001d98:	08001dbf 	.word	0x08001dbf
 8001d9c:	08001dbf 	.word	0x08001dbf
 8001da0:	08001dbf 	.word	0x08001dbf
 8001da4:	08001dbf 	.word	0x08001dbf
 8001da8:	08001dbf 	.word	0x08001dbf
			break;
		case UnPack_Field_CRC32:
			break;
		default:
		{
			p_obj->unpack_step = UnPack_Field_Sync;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			p_obj->index = 0;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		}
		break;
 8001dbc:	e000      	b.n	8001dc0 <pdh_unpack_fifo_data+0x98>
			break;
 8001dbe:	bf00      	nop
	while(fifo_s_used(p_obj->data_fifo)>=sizeof(int))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00b faed 	bl	800d3a4 <fifo_s_used>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d8b3      	bhi.n	8001d38 <pdh_unpack_fifo_data+0x10>
		}
	}
	//add by zhangshaoyan 2020/3/15 end.

	while ( fifo_s_used(p_obj->data_fifo) )
 8001dd0:	e0b2      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>
	{
		byte = fifo_s_get(p_obj->data_fifo);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00b fa36 	bl	800d248 <fifo_s_get>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]
		switch(p_obj->unpack_step)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	f200 809d 	bhi.w	8001f26 <pdh_unpack_fifo_data+0x1fe>
 8001dec:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <pdh_unpack_fifo_data+0xcc>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e39 	.word	0x08001e39
 8001dfc:	08001e6d 	.word	0x08001e6d
 8001e00:	08001eb9 	.word	0x08001eb9
		{
		case STEP_HEADER_5A:
		{
			if(byte == DH_PROTOCOL_HEADER_5A)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b5a      	cmp	r3, #90	; 0x5a
 8001e08:	d111      	bne.n	8001e2e <pdh_unpack_fifo_data+0x106>
			{
				p_obj->unpack_step = STEP_HEADER_A5;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
				p_obj->protocol_packet[p_obj->index++] = byte;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	b2d1      	uxtb	r1, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4413      	add	r3, r2
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	715a      	strb	r2, [r3, #5]
 8001e2c:	e084      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>
			}
			else
			{
				p_obj->index = 0;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			}
		}break;
 8001e36:	e07f      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>

		case STEP_HEADER_A5:
		{
			if(byte == DH_PROTOCOL_HEADER_A5)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2ba5      	cmp	r3, #165	; 0xa5
 8001e3c:	d111      	bne.n	8001e62 <pdh_unpack_fifo_data+0x13a>
			{
				p_obj->unpack_step = STEP_LENGTH;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
				p_obj->protocol_packet[p_obj->index++] = byte;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	b2d1      	uxtb	r1, r2
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	715a      	strb	r2, [r3, #5]
 8001e60:	e06a      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>
			}
			else
			{
				p_obj->index = 0;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			}
		}break;
 8001e6a:	e065      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>

		case STEP_LENGTH:
		{
			p_obj->frame_len = byte;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	711a      	strb	r2, [r3, #4]
			p_obj->protocol_packet[p_obj->index++] = byte;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	b2d1      	uxtb	r1, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4413      	add	r3, r2
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	715a      	strb	r2, [r3, #5]

			if( (p_obj->frame_len > (PROTOCOL_FIXED_LENGTH)) && (p_obj->frame_len < (DH_PROTOCOL_FRAME_MAX_SIZE)) )
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d908      	bls.n	8001ea6 <pdh_unpack_fifo_data+0x17e>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	2bf9      	cmp	r3, #249	; 0xf9
 8001e9a:	d804      	bhi.n	8001ea6 <pdh_unpack_fifo_data+0x17e>
			{
				p_obj->unpack_step = STEP_FRAME_SUM;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8001ea4:	e007      	b.n	8001eb6 <pdh_unpack_fifo_data+0x18e>
			}
			else
			{
				p_obj->unpack_step = STEP_HEADER_5A;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
				p_obj->index = 0;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			}
		}break;
 8001eb6:	e03f      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>

		case STEP_FRAME_SUM:
		{
			if (p_obj->index < (p_obj->frame_len))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	791b      	ldrb	r3, [r3, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d20c      	bcs.n	8001ee0 <pdh_unpack_fifo_data+0x1b8>
			{
				p_obj->protocol_packet[p_obj->index++] = byte;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	b2d1      	uxtb	r1, r2
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4413      	add	r3, r2
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	715a      	strb	r2, [r3, #5]
			}
			if (p_obj->index >= (p_obj->frame_len))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d324      	bcc.n	8001f38 <pdh_unpack_fifo_data+0x210>
			{
				p_obj->unpack_step = STEP_HEADER_5A;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
				p_obj->index = 0;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

				if (pdh_verify_sum(p_obj->protocol_packet, p_obj->frame_len))
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1d5a      	adds	r2, r3, #5
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	791b      	ldrb	r3, [r3, #4]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f000 f8b3 	bl	8002074 <pdh_verify_sum>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d011      	beq.n	8001f38 <pdh_unpack_fifo_data+0x210>
				{
					pdh_data_handler(p_obj->protocol_packet, p_obj->frame_len);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1d5a      	adds	r2, r3, #5
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	791b      	ldrb	r3, [r3, #4]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7ff feda 	bl	8001cd8 <pdh_data_handler>
				}
			}
		}break;
 8001f24:	e008      	b.n	8001f38 <pdh_unpack_fifo_data+0x210>

		default:
		{
			p_obj->unpack_step = STEP_HEADER_5A;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			p_obj->index = 0;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		}break;
 8001f36:	bf00      	nop
	while ( fifo_s_used(p_obj->data_fifo) )
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f00b fa31 	bl	800d3a4 <fifo_s_used>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f af44 	bne.w	8001dd2 <pdh_unpack_fifo_data+0xaa>
		}
	}
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000c0c 	.word	0x20000c0c

08001f58 <pdh_data_upload>:

void pdh_data_upload(uint8_t *p_frame, uint8_t len)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b0c5      	sub	sp, #276	; 0x114
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	6018      	str	r0, [r3, #0]
 8001f62:	460a      	mov	r2, r1
 8001f64:	1cfb      	adds	r3, r7, #3
 8001f66:	701a      	strb	r2, [r3, #0]
	osMutexWait(uploadMutexHandle,osWaitForever);
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <pdh_data_upload+0x118>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	4618      	mov	r0, r3
 8001f72:	f006 fa37 	bl	80083e4 <osMutexWait>
	//cmd:1个字节表示upload或download，表示方向
	//endpoint:1个字节表示端点，0x00:表示APP,0x01:表示STM32
	//data:帧数据，这个是不定长的
	//checksum:1个字节的校验和

	uint8_t i=0,j=0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t buff[256];
	buff[i++]=0x5A;
 8001f82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	215a      	movs	r1, #90	; 0x5a
 8001f94:	5499      	strb	r1, [r3, r2]
	buff[i++]=0xA5;
 8001f96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	21a5      	movs	r1, #165	; 0xa5
 8001fa8:	5499      	strb	r1, [r3, r2]
	buff[i++]=PROTOCOL_FIXED_LENGTH+len;
 8001faa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	1cfb      	adds	r3, r7, #3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3306      	adds	r3, #6
 8001fbc:	b2d9      	uxtb	r1, r3
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	5499      	strb	r1, [r3, r2]
	buff[i++]=0x05; // upload
 8001fc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2105      	movs	r1, #5
 8001fd6:	5499      	strb	r1, [r3, r2]
	buff[i++]=0x01; // endpoint
 8001fd8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2101      	movs	r1, #1
 8001fea:	5499      	strb	r1, [r3, r2]
	for(j=0;j<len;j++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8001ff2:	e013      	b.n	800201c <pdh_data_upload+0xc4>
	{
		buff[i++]=p_frame[j];
 8001ff4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001ff8:	1d3a      	adds	r2, r7, #4
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	441a      	add	r2, r3
 8001ffe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	f887 110f 	strb.w	r1, [r7, #271]	; 0x10f
 8002008:	4619      	mov	r1, r3
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	545a      	strb	r2, [r3, r1]
	for(j=0;j<len;j++)
 8002012:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002016:	3301      	adds	r3, #1
 8002018:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800201c:	1cfb      	adds	r3, r7, #3
 800201e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3e5      	bcc.n	8001ff4 <pdh_data_upload+0x9c>
	}
	buff[i]=pdh_get_sum(buff,i);
 8002028:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
 800202c:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f845 	bl	80020c6 <pdh_get_sum>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	551a      	strb	r2, [r3, r4]
	usart1_transmit(buff, i+1);
 8002046:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800204a:	b29b      	uxth	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f009 ff26 	bl	800bea8 <usart1_transmit>
	osMutexRelease(uploadMutexHandle);
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <pdh_data_upload+0x118>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f006 fa0d 	bl	8008480 <osMutexRelease>
}
 8002066:	bf00      	nop
 8002068:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}
 8002070:	20009bf0 	.word	0x20009bf0

08002074 <pdh_verify_sum>:

uint8_t pdh_verify_sum(uint8_t *p_msg, uint8_t len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
	uint16_t w_expected = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	81fb      	strh	r3, [r7, #14]

	if ((p_msg == NULL) || (len <= PROTOCOL_FIXED_LENGTH))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <pdh_verify_sum+0x1c>
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	2b06      	cmp	r3, #6
 800208e:	d801      	bhi.n	8002094 <pdh_verify_sum+0x20>
	{
		return 1;
 8002090:	2301      	movs	r3, #1
 8002092:	e014      	b.n	80020be <pdh_verify_sum+0x4a>
	}
	w_expected = pdh_get_sum(p_msg, len-1);
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	3b01      	subs	r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f812 	bl	80020c6 <pdh_get_sum>
 80020a2:	4603      	mov	r3, r0
 80020a4:	81fb      	strh	r3, [r7, #14]

	return w_expected == p_msg[len-1];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	89fa      	ldrh	r2, [r7, #14]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3

}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <pdh_get_sum>:

uint8_t pdh_get_sum(uint8_t *p_msg, uint8_t len)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t sum = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < len; i ++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e009      	b.n	80020f0 <pdh_get_sum+0x2a>
	{
		sum += *(p_msg++);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	4413      	add	r3, r2
 80020e8:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < len; i ++)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3f1      	bcc.n	80020dc <pdh_get_sum+0x16>
	}

	return sum;
 80020f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <system_cmd_task>:

lens_t plens;
bracket_t pbracket;
protect_structure_t pprotect_structure;
void system_cmd_task(void const * argument)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	osDelay(1000);
 800210c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002110:	f006 f85a 	bl	80081c8 <osDelay>
	stop_distance_measure();
 8002114:	f7ff fb82 	bl	800181c <stop_distance_measure>

	plens = lens_find("lens");
 8002118:	486c      	ldr	r0, [pc, #432]	; (80022cc <system_cmd_task+0x1c8>)
 800211a:	f00a fd7b 	bl	800cc14 <lens_find>
 800211e:	4602      	mov	r2, r0
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <system_cmd_task+0x1cc>)
 8002122:	601a      	str	r2, [r3, #0]
	pbracket = bracket_find("bracket");
 8002124:	486b      	ldr	r0, [pc, #428]	; (80022d4 <system_cmd_task+0x1d0>)
 8002126:	f00a fb89 	bl	800c83c <bracket_find>
 800212a:	4602      	mov	r2, r0
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <system_cmd_task+0x1d4>)
 800212e:	601a      	str	r2, [r3, #0]
	pprotect_structure = protect_structure_find("protect_structure");
 8002130:	486a      	ldr	r0, [pc, #424]	; (80022dc <system_cmd_task+0x1d8>)
 8002132:	f00a fe97 	bl	800ce64 <protect_structure_find>
 8002136:	4602      	mov	r2, r0
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <system_cmd_task+0x1dc>)
 800213a:	601a      	str	r2, [r3, #0]
	osEvent event;

	protocol_rcv_cmd_register(AUTO_FOCUS,auto_focus);
 800213c:	4969      	ldr	r1, [pc, #420]	; (80022e4 <system_cmd_task+0x1e0>)
 800213e:	2002      	movs	r0, #2
 8002140:	f7ff fb82 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(LEFT_MOTOR_MANUAL_FOCUS_PLUS,left_motor_move);
 8002144:	4968      	ldr	r1, [pc, #416]	; (80022e8 <system_cmd_task+0x1e4>)
 8002146:	2004      	movs	r0, #4
 8002148:	f7ff fb7e 	bl	8001848 <protocol_rcv_cmd_register>
	protocol_rcv_cmd_register(LEFT_MOTOR_MANUAL_FOCUS_MINUS,left_motor_move);
 800214c:	4966      	ldr	r1, [pc, #408]	; (80022e8 <system_cmd_task+0x1e4>)
 800214e:	2005      	movs	r0, #5
 8002150:	f7ff fb7a 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(RIGHT_MOTOR_MANUAL_FOCUS_PLUS,right_motor_move);
 8002154:	4965      	ldr	r1, [pc, #404]	; (80022ec <system_cmd_task+0x1e8>)
 8002156:	202e      	movs	r0, #46	; 0x2e
 8002158:	f7ff fb76 	bl	8001848 <protocol_rcv_cmd_register>
	protocol_rcv_cmd_register(RIGHT_MOTOR_MANUAL_FOCUS_MINUS,right_motor_move);
 800215c:	4963      	ldr	r1, [pc, #396]	; (80022ec <system_cmd_task+0x1e8>)
 800215e:	202f      	movs	r0, #47	; 0x2f
 8002160:	f7ff fb72 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(M3_FORWARD,ud_stepper_move);
 8002164:	4962      	ldr	r1, [pc, #392]	; (80022f0 <system_cmd_task+0x1ec>)
 8002166:	2016      	movs	r0, #22
 8002168:	f7ff fb6e 	bl	8001848 <protocol_rcv_cmd_register>
	protocol_rcv_cmd_register(M3_REVERSAL,ud_stepper_move);
 800216c:	4960      	ldr	r1, [pc, #384]	; (80022f0 <system_cmd_task+0x1ec>)
 800216e:	2017      	movs	r0, #23
 8002170:	f7ff fb6a 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(M4_FORWARD,lr_stepper_move);
 8002174:	495f      	ldr	r1, [pc, #380]	; (80022f4 <system_cmd_task+0x1f0>)
 8002176:	2019      	movs	r0, #25
 8002178:	f7ff fb66 	bl	8001848 <protocol_rcv_cmd_register>
	protocol_rcv_cmd_register(M4_REVERSAL,lr_stepper_move);
 800217c:	495d      	ldr	r1, [pc, #372]	; (80022f4 <system_cmd_task+0x1f0>)
 800217e:	201a      	movs	r0, #26
 8002180:	f7ff fb62 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(PROTECT_STEPPER_MOVE,protect_stepper_move);
 8002184:	495c      	ldr	r1, [pc, #368]	; (80022f8 <system_cmd_task+0x1f4>)
 8002186:	2033      	movs	r0, #51	; 0x33
 8002188:	f7ff fb5e 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(SET_VOLUME,set_volume);
 800218c:	495b      	ldr	r1, [pc, #364]	; (80022fc <system_cmd_task+0x1f8>)
 800218e:	2022      	movs	r0, #34	; 0x22
 8002190:	f7ff fb5a 	bl	8001848 <protocol_rcv_cmd_register>

	protocol_rcv_cmd_register(MEASURE_DISTANCE,get_distance);
 8002194:	495a      	ldr	r1, [pc, #360]	; (8002300 <system_cmd_task+0x1fc>)
 8002196:	2003      	movs	r0, #3
 8002198:	f7ff fb56 	bl	8001848 <protocol_rcv_cmd_register>

  for(;;)
  {
  	event = osSignalWait(MANIFOLD2_DISTANCE_SIGNAL, osWaitForever);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	2104      	movs	r1, #4
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 f8c4 	bl	8008334 <osSignalWait>

		if (event.status == osEventSignal)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	f040 8087 	bne.w	80022c2 <system_cmd_task+0x1be>
		{
			if(event.value.signals & MANIFOLD2_DISTANCE_SIGNAL)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8081 	beq.w	80022c2 <system_cmd_task+0x1be>
			{
				osThreadSuspend(LensTaskHandle);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <system_cmd_task+0x200>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f006 f991 	bl	80084ec <osThreadSuspend>
				plens->auto_focus_flag = TRUE;
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <system_cmd_task+0x1cc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
				plens->motor[left_motor].goto_zp_flag = TRUE;
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <system_cmd_task+0x1cc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				plens->motor[right_motor].goto_zp_flag = TRUE;
 80021de:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <system_cmd_task+0x1cc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				__HAL_TIM_SET_COMPARE(plens->motor[left_motor].pwm_tim_handle,plens->motor[left_motor].pwm_channel,1000);
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <system_cmd_task+0x1cc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <system_cmd_task+0xfe>
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <system_cmd_task+0x1cc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002200:	e020      	b.n	8002244 <system_cmd_task+0x140>
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <system_cmd_task+0x1cc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <system_cmd_task+0x118>
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <system_cmd_task+0x1cc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
 800221a:	e013      	b.n	8002244 <system_cmd_task+0x140>
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <system_cmd_task+0x1cc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002222:	2b08      	cmp	r3, #8
 8002224:	d107      	bne.n	8002236 <system_cmd_task+0x132>
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <system_cmd_task+0x1cc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002232:	63da      	str	r2, [r3, #60]	; 0x3c
 8002234:	e006      	b.n	8002244 <system_cmd_task+0x140>
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <system_cmd_task+0x1cc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(plens->motor[right_motor].pwm_tim_handle,plens->motor[right_motor].pwm_channel,1000);
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <system_cmd_task+0x1cc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <system_cmd_task+0x15e>
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <system_cmd_task+0x1cc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225e:	635a      	str	r2, [r3, #52]	; 0x34
 8002260:	e025      	b.n	80022ae <system_cmd_task+0x1aa>
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <system_cmd_task+0x1cc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800226a:	2b04      	cmp	r3, #4
 800226c:	d108      	bne.n	8002280 <system_cmd_task+0x17c>
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <system_cmd_task+0x1cc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
 800227e:	e016      	b.n	80022ae <system_cmd_task+0x1aa>
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <system_cmd_task+0x1cc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d108      	bne.n	800229e <system_cmd_task+0x19a>
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <system_cmd_task+0x1cc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c
 800229c:	e007      	b.n	80022ae <system_cmd_task+0x1aa>
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <system_cmd_task+0x1cc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
				lens_set_motors_target_by_distance(manifold_cmd.distance,plens);
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <system_cmd_task+0x204>)
 80022b0:	88da      	ldrh	r2, [r3, #6]
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <system_cmd_task+0x1cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f00a fd1d 	bl	800ccf8 <lens_set_motors_target_by_distance>
				stop_distance_measure();
 80022be:	f7ff faad 	bl	800181c <stop_distance_measure>
			}
		}

    osDelay(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f005 ff80 	bl	80081c8 <osDelay>
  	event = osSignalWait(MANIFOLD2_DISTANCE_SIGNAL, osWaitForever);
 80022c8:	e768      	b.n	800219c <system_cmd_task+0x98>
 80022ca:	bf00      	nop
 80022cc:	0800f164 	.word	0x0800f164
 80022d0:	20009b00 	.word	0x20009b00
 80022d4:	0800f16c 	.word	0x0800f16c
 80022d8:	20009b04 	.word	0x20009b04
 80022dc:	0800f174 	.word	0x0800f174
 80022e0:	20009aec 	.word	0x20009aec
 80022e4:	0800230d 	.word	0x0800230d
 80022e8:	08002329 	.word	0x08002329
 80022ec:	080023c9 	.word	0x080023c9
 80022f0:	08002469 	.word	0x08002469
 80022f4:	080024c9 	.word	0x080024c9
 80022f8:	08002529 	.word	0x08002529
 80022fc:	08002579 	.word	0x08002579
 8002300:	080025a3 	.word	0x080025a3
 8002304:	20009bf8 	.word	0x20009bf8
 8002308:	20009af0 	.word	0x20009af0

0800230c <auto_focus>:
  }
}


static int8_t auto_focus(uint8_t *buff, uint16_t len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
	start_distance_measure();
 8002318:	f7ff fa6e 	bl	80017f8 <start_distance_measure>
	return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <left_motor_move>:

static int8_t left_motor_move(uint8_t *buff, uint16_t len)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
	if(buff[0] == LEFT_MOTOR_MANUAL_FOCUS_PLUS)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d104      	bne.n	8002346 <left_motor_move+0x1e>
	{
		stride = 500;
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <left_motor_move+0x98>)
 800233e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	e00b      	b.n	800235e <left_motor_move+0x36>
	}
	else if(buff[0] == LEFT_MOTOR_MANUAL_FOCUS_MINUS)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d104      	bne.n	8002358 <left_motor_move+0x30>
	{
		stride = -500;
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <left_motor_move+0x98>)
 8002350:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	e002      	b.n	800235e <left_motor_move+0x36>
	}
	else
	{
		return -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	e02a      	b.n	80023b4 <left_motor_move+0x8c>
	}

	plens->motor[left_motor].target += stride;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <left_motor_move+0x9c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <left_motor_move+0x98>)
 8002368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <left_motor_move+0x9c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	440a      	add	r2, r1
 8002374:	b292      	uxth	r2, r2
 8002376:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	VAL_LIMIT(plens->motor[left_motor].target,MOTOR_TARGET_MIN,MOTOR_TARGET_MAX);
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <left_motor_move+0x9c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8002382:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002386:	d806      	bhi.n	8002396 <left_motor_move+0x6e>
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <left_motor_move+0x9c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002390:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8002394:	e00d      	b.n	80023b2 <left_motor_move+0x8a>
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <left_motor_move+0x9c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d105      	bne.n	80023b2 <left_motor_move+0x8a>
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <left_motor_move+0x9c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ae:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20009b08 	.word	0x20009b08
 80023c4:	20009b00 	.word	0x20009b00

080023c8 <right_motor_move>:


static int8_t right_motor_move(uint8_t *buff, uint16_t len)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
	if(buff[0] == RIGHT_MOTOR_MANUAL_FOCUS_PLUS)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b2e      	cmp	r3, #46	; 0x2e
 80023da:	d104      	bne.n	80023e6 <right_motor_move+0x1e>
		{
			stride = 500;
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <right_motor_move+0x98>)
 80023de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	e00b      	b.n	80023fe <right_motor_move+0x36>
		}
		else if(buff[0] == RIGHT_MOTOR_MANUAL_FOCUS_MINUS)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b2f      	cmp	r3, #47	; 0x2f
 80023ec:	d104      	bne.n	80023f8 <right_motor_move+0x30>
		{
			stride = -500;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <right_motor_move+0x98>)
 80023f0:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	e002      	b.n	80023fe <right_motor_move+0x36>
		}
		else
		{
			return -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	e02a      	b.n	8002454 <right_motor_move+0x8c>
		}
		plens->motor[right_motor].target += stride;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <right_motor_move+0x9c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 10bc 	ldrh.w	r1, [r3, #188]	; 0xbc
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <right_motor_move+0x98>)
 8002408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240c:	b29a      	uxth	r2, r3
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <right_motor_move+0x9c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	440a      	add	r2, r1
 8002414:	b292      	uxth	r2, r2
 8002416:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VAL_LIMIT(plens->motor[right_motor].target,MOTOR_TARGET_MIN,MOTOR_TARGET_MAX);
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <right_motor_move+0x9c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002422:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002426:	d806      	bhi.n	8002436 <right_motor_move+0x6e>
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <right_motor_move+0x9c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002430:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8002434:	e00d      	b.n	8002452 <right_motor_move+0x8a>
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <right_motor_move+0x9c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800243e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002442:	4293      	cmp	r3, r2
 8002444:	d105      	bne.n	8002452 <right_motor_move+0x8a>
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <right_motor_move+0x9c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20009b08 	.word	0x20009b08
 8002464:	20009b00 	.word	0x20009b00

08002468 <ud_stepper_move>:

static int8_t ud_stepper_move(uint8_t *buff, uint16_t len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
	if(buff[0] == M3_FORWARD)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b16      	cmp	r3, #22
 800247a:	d104      	bne.n	8002486 <ud_stepper_move+0x1e>
	{
		stride = -500;
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <ud_stepper_move+0x58>)
 800247e:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	e00b      	b.n	800249e <ud_stepper_move+0x36>
	}
	else if(buff[0] == M3_REVERSAL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b17      	cmp	r3, #23
 800248c:	d104      	bne.n	8002498 <ud_stepper_move+0x30>
	{
		stride = 500;
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <ud_stepper_move+0x58>)
 8002490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e002      	b.n	800249e <ud_stepper_move+0x36>
	}
	else
	{
		return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	e00b      	b.n	80024b6 <ud_stepper_move+0x4e>
	}

	stepper_run(&pbracket->stepper[up_down_stepper], stride);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <ud_stepper_move+0x5c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <ud_stepper_move+0x58>)
 80024a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f00a f9d2 	bl	800c858 <stepper_run>

	return 0;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20009b08 	.word	0x20009b08
 80024c4:	20009b04 	.word	0x20009b04

080024c8 <lr_stepper_move>:

static int8_t lr_stepper_move(uint8_t *buff, uint16_t len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
	if(buff[0] == M4_FORWARD)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b19      	cmp	r3, #25
 80024da:	d104      	bne.n	80024e6 <lr_stepper_move+0x1e>
	{
		stride = 500;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <lr_stepper_move+0x58>)
 80024de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	e00b      	b.n	80024fe <lr_stepper_move+0x36>
	}
	else if(buff[0] == M4_REVERSAL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b1a      	cmp	r3, #26
 80024ec:	d104      	bne.n	80024f8 <lr_stepper_move+0x30>
	{
		stride = -500;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <lr_stepper_move+0x58>)
 80024f0:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e002      	b.n	80024fe <lr_stepper_move+0x36>
	}
	else
	{
		return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	e00b      	b.n	8002516 <lr_stepper_move+0x4e>
	}

	stepper_run(&pbracket->stepper[left_right_stepper], stride);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <lr_stepper_move+0x5c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <lr_stepper_move+0x58>)
 8002508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f00a f9a2 	bl	800c858 <stepper_run>

	return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20009b08 	.word	0x20009b08
 8002524:	20009b04 	.word	0x20009b04

08002528 <protect_stepper_move>:


static int8_t protect_stepper_move(uint8_t *buff, uint16_t len)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]

	if(buff[0] == PROTECT_STEPPER_MOVE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b33      	cmp	r3, #51	; 0x33
 800253a:	d114      	bne.n	8002566 <protect_stepper_move+0x3e>
	{
		stride = (int16_t)(buff[2]<<8 | buff[3]);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3302      	adds	r3, #2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	b21a      	sxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3303      	adds	r3, #3
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b21a      	sxth	r2, r3
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <protect_stepper_move+0x4c>)
 8002554:	801a      	strh	r2, [r3, #0]
	{
		return -1;
	}

//	protect_structure_stepper_run(pprotect_structure, stride);
	protect_structure_motor_run(stride);
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <protect_stepper_move+0x4c>)
 8002558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255c:	4618      	mov	r0, r3
 800255e:	f00a fc8f 	bl	800ce80 <protect_structure_motor_run>
	return 0;
 8002562:	2300      	movs	r3, #0
 8002564:	e001      	b.n	800256a <protect_stepper_move+0x42>
		return -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20009b08 	.word	0x20009b08

08002578 <set_volume>:

static int8_t set_volume(uint8_t *buff, uint16_t len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
	if(buff[0] == SET_VOLUME)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b22      	cmp	r3, #34	; 0x22
 800258a:	d105      	bne.n	8002598 <set_volume+0x20>
	{
		m62429_control(&buff[1],1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3301      	adds	r3, #1
 8002590:	2101      	movs	r1, #1
 8002592:	4618      	mov	r0, r3
 8002594:	f009 feee 	bl	800c374 <m62429_control>
	}
	return 0;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <get_distance>:

static int8_t get_distance(uint8_t *buff, uint16_t len)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	807b      	strh	r3, [r7, #2]
	if(buff[0] == MEASURE_DISTANCE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d101      	bne.n	80025ba <get_distance+0x18>
	{
		cj_get_distance();
 80025b6:	f7fe ff01 	bl	80013bc <cj_get_distance>
	}
	return 0;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025d6:	4a28      	ldr	r2, [pc, #160]	; (8002678 <MX_ADC1_Init+0xb4>)
 80025d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80025f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_ADC1_Init+0xb0>)
 80025fe:	2203      	movs	r2, #3
 8002600:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002602:	481c      	ldr	r0, [pc, #112]	; (8002674 <MX_ADC1_Init+0xb0>)
 8002604:	f001 fc38 	bl	8003e78 <HAL_ADC_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800260e:	f000 fc6d 	bl	8002eec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002612:	2304      	movs	r3, #4
 8002614:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002616:	2301      	movs	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800261a:	2307      	movs	r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4814      	ldr	r0, [pc, #80]	; (8002674 <MX_ADC1_Init+0xb0>)
 8002624:	f001 ff7c 	bl	8004520 <HAL_ADC_ConfigChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800262e:	f000 fc5d 	bl	8002eec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002632:	230a      	movs	r3, #10
 8002634:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002636:	2302      	movs	r3, #2
 8002638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4619      	mov	r1, r3
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_ADC1_Init+0xb0>)
 8002640:	f001 ff6e 	bl	8004520 <HAL_ADC_ConfigChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800264a:	f000 fc4f 	bl	8002eec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800264e:	230c      	movs	r3, #12
 8002650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002652:	2303      	movs	r3, #3
 8002654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_ADC1_Init+0xb0>)
 800265c:	f001 ff60 	bl	8004520 <HAL_ADC_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002666:	f000 fc41 	bl	8002eec <Error_Handler>
  }

}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20009b3c 	.word	0x20009b3c
 8002678:	40012400 	.word	0x40012400

0800267c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <MX_ADC2_Init+0xb8>)
 80026a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80026bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026cc:	f001 fbd4 	bl	8003e78 <HAL_ADC_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 80026d6:	f000 fc09 	bl	8002eec <Error_Handler>
  }
  /** Configure Analog WatchDog 1 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <MX_ADC2_Init+0xbc>)
 80026dc:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2000;
 80026de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80026e2:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_8;
 80026e8:	2308      	movs	r3, #8
 80026ea:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4619      	mov	r1, r3
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <MX_ADC2_Init+0xb4>)
 80026f8:	f002 f80a 	bl	8004710 <HAL_ADC_AnalogWDGConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002702:	f000 fbf3 	bl	8002eec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002706:	2308      	movs	r3, #8
 8002708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800270a:	2301      	movs	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_ADC2_Init+0xb4>)
 8002718:	f001 ff02 	bl	8004520 <HAL_ADC_ConfigChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002722:	f000 fbe3 	bl	8002eec <Error_Handler>
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20009b0c 	.word	0x20009b0c
 8002734:	40012800 	.word	0x40012800
 8002738:	00800200 	.word	0x00800200

0800273c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <MX_ADC3_Init+0xb4>)
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <MX_ADC3_Init+0xb8>)
 8002762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MX_ADC3_Init+0xb4>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <MX_ADC3_Init+0xb4>)
 800276c:	2201      	movs	r2, #1
 800276e:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <MX_ADC3_Init+0xb4>)
 8002772:	2200      	movs	r2, #0
 8002774:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <MX_ADC3_Init+0xb4>)
 8002778:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800277c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_ADC3_Init+0xb4>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_ADC3_Init+0xb4>)
 8002786:	2201      	movs	r2, #1
 8002788:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800278a:	4819      	ldr	r0, [pc, #100]	; (80027f0 <MX_ADC3_Init+0xb4>)
 800278c:	f001 fb74 	bl	8003e78 <HAL_ADC_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_ADC3_Init+0x5e>
  {
    Error_Handler();
 8002796:	f000 fba9 	bl	8002eec <Error_Handler>
  }
  /** Configure Analog WatchDog 1 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <MX_ADC3_Init+0xbc>)
 800279c:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2000;
 800279e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027a2:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80027a8:	2303      	movs	r3, #3
 80027aa:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4619      	mov	r1, r3
 80027b6:	480e      	ldr	r0, [pc, #56]	; (80027f0 <MX_ADC3_Init+0xb4>)
 80027b8:	f001 ffaa 	bl	8004710 <HAL_ADC_AnalogWDGConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80027c2:	f000 fb93 	bl	8002eec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80027c6:	2303      	movs	r3, #3
 80027c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4806      	ldr	r0, [pc, #24]	; (80027f0 <MX_ADC3_Init+0xb4>)
 80027d8:	f001 fea2 	bl	8004520 <HAL_ADC_ConfigChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80027e2:	f000 fb83 	bl	8002eec <Error_Handler>
  }

}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20009b6c 	.word	0x20009b6c
 80027f4:	40013c00 	.word	0x40013c00
 80027f8:	00800200 	.word	0x00800200

080027fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a67      	ldr	r2, [pc, #412]	; (80029b4 <HAL_ADC_MspInit+0x1b8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d168      	bne.n	80028ee <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800281c:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002834:	4b60      	ldr	r3, [pc, #384]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800283a:	f043 0310 	orr.w	r3, r3, #16
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4a59      	ldr	r2, [pc, #356]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6193      	str	r3, [r2, #24]
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = Battery_Voltage_ADC1_CH10_Pin|RSSI1_ADC1_CH12_Pin;
 8002864:	2305      	movs	r3, #5
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002868:	2303      	movs	r3, #3
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002870:	4619      	mov	r1, r3
 8002872:	4852      	ldr	r0, [pc, #328]	; (80029bc <HAL_ADC_MspInit+0x1c0>)
 8002874:	f002 ff3e 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_ADC1_CH4_Pin;
 8002878:	2310      	movs	r3, #16
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287c:	2303      	movs	r3, #3
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NTC_ADC1_CH4_GPIO_Port, &GPIO_InitStruct);
 8002880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002884:	4619      	mov	r1, r3
 8002886:	484e      	ldr	r0, [pc, #312]	; (80029c0 <HAL_ADC_MspInit+0x1c4>)
 8002888:	f002 ff34 	bl	80056f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800288c:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 800288e:	4a4e      	ldr	r2, [pc, #312]	; (80029c8 <HAL_ADC_MspInit+0x1cc>)
 8002890:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002892:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ac:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028b6:	2220      	movs	r2, #32
 80028b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028c0:	4840      	ldr	r0, [pc, #256]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028c2:	f002 f957 	bl	8004b74 <HAL_DMA_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80028cc:	f000 fb0e 	bl	8002eec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3c      	ldr	r2, [pc, #240]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028d4:	621a      	str	r2, [r3, #32]
 80028d6:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <HAL_ADC_MspInit+0x1c8>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2105      	movs	r1, #5
 80028e0:	2012      	movs	r0, #18
 80028e2:	f002 f91c 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028e6:	2012      	movs	r0, #18
 80028e8:	f002 f935 	bl	8004b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80028ec:	e05e      	b.n	80029ac <HAL_ADC_MspInit+0x1b0>
  else if(adcHandle->Instance==ADC2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a36      	ldr	r2, [pc, #216]	; (80029cc <HAL_ADC_MspInit+0x1d0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d12a      	bne.n	800294e <HAL_ADC_MspInit+0x152>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M1_ADC2_CH8_AWD_Pin;
 8002928:	2301      	movs	r3, #1
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292c:	2303      	movs	r3, #3
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1_ADC2_CH8_AWD_GPIO_Port, &GPIO_InitStruct);
 8002930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002934:	4619      	mov	r1, r3
 8002936:	4826      	ldr	r0, [pc, #152]	; (80029d0 <HAL_ADC_MspInit+0x1d4>)
 8002938:	f002 fedc 	bl	80056f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2105      	movs	r1, #5
 8002940:	2012      	movs	r0, #18
 8002942:	f002 f8ec 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002946:	2012      	movs	r0, #18
 8002948:	f002 f905 	bl	8004b56 <HAL_NVIC_EnableIRQ>
}
 800294c:	e02e      	b.n	80029ac <HAL_ADC_MspInit+0x1b0>
  else if(adcHandle->Instance==ADC3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_ADC_MspInit+0x1d8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d129      	bne.n	80029ac <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_ADC_MspInit+0x1bc>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_ADC3_CH3_AWD_Pin;
 8002988:	2308      	movs	r3, #8
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298c:	2303      	movs	r3, #3
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2_ADC3_CH3_AWD_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002994:	4619      	mov	r1, r3
 8002996:	480a      	ldr	r0, [pc, #40]	; (80029c0 <HAL_ADC_MspInit+0x1c4>)
 8002998:	f002 feac 	bl	80056f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2105      	movs	r1, #5
 80029a0:	202f      	movs	r0, #47	; 0x2f
 80029a2:	f002 f8bc 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80029a6:	202f      	movs	r0, #47	; 0x2f
 80029a8:	f002 f8d5 	bl	8004b56 <HAL_NVIC_EnableIRQ>
}
 80029ac:	bf00      	nop
 80029ae:	3738      	adds	r7, #56	; 0x38
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40012400 	.word	0x40012400
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40010800 	.word	0x40010800
 80029c4:	20009b9c 	.word	0x20009b9c
 80029c8:	40020008 	.word	0x40020008
 80029cc:	40012800 	.word	0x40012800
 80029d0:	40010c00 	.word	0x40010c00
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <MX_DMA_Init+0x78>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <MX_DMA_Init+0x78>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6153      	str	r3, [r2, #20]
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <MX_DMA_Init+0x78>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2105      	movs	r1, #5
 80029fa:	200b      	movs	r0, #11
 80029fc:	f002 f88f 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a00:	200b      	movs	r0, #11
 8002a02:	f002 f8a8 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2105      	movs	r1, #5
 8002a0a:	200c      	movs	r0, #12
 8002a0c:	f002 f887 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002a10:	200c      	movs	r0, #12
 8002a12:	f002 f8a0 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2105      	movs	r1, #5
 8002a1a:	200d      	movs	r0, #13
 8002a1c:	f002 f87f 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a20:	200d      	movs	r0, #13
 8002a22:	f002 f898 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2105      	movs	r1, #5
 8002a2a:	200e      	movs	r0, #14
 8002a2c:	f002 f877 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002a30:	200e      	movs	r0, #14
 8002a32:	f002 f890 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2105      	movs	r1, #5
 8002a3a:	200f      	movs	r0, #15
 8002a3c:	f002 f86f 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002a40:	200f      	movs	r0, #15
 8002a42:	f002 f888 	bl	8004b56 <HAL_NVIC_EnableIRQ>

}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b098      	sub	sp, #96	; 0x60
 8002a58:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of uploadMutex */
  osMutexDef(uploadMutex);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uploadMutexHandle = osMutexCreate(osMutex(uploadMutex));
 8002a5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 fcb2 	bl	80083cc <osMutexCreate>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <MX_FREERTOS_Init+0xe0>)
 8002a6c:	601a      	str	r2, [r3, #0]

  /* definition and creation of packMutex */
  osMutexDef(packMutex);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	65bb      	str	r3, [r7, #88]	; 0x58
  packMutexHandle = osMutexCreate(osMutex(packMutex));
 8002a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 fca8 	bl	80083cc <osMutexCreate>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <MX_FREERTOS_Init+0xe4>)
 8002a80:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of once_timer */
  osTimerDef(once_timer, stop_protect_motor);
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <MX_FREERTOS_Init+0xe8>)
 8002a84:	657b      	str	r3, [r7, #84]	; 0x54
  once_timerHandle = osTimerCreate(osTimer(once_timer), osTimerPeriodic, NULL);
 8002a86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 fbae 	bl	80081f0 <osTimerCreate>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <MX_FREERTOS_Init+0xec>)
 8002a98:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, init_task, osPriorityNormal, 0, 128);
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <MX_FREERTOS_Init+0xf0>)
 8002a9c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa6:	682b      	ldr	r3, [r5, #0]
 8002aa8:	6023      	str	r3, [r4, #0]
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8002aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f005 fb62 	bl	800817a <osThreadCreate>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <MX_FREERTOS_Init+0xf4>)
 8002aba:	601a      	str	r2, [r3, #0]

  /* definition and creation of CommunicateTask */
  osThreadDef(CommunicateTask, communicate_task, osPriorityRealtime, 0, 256);
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <MX_FREERTOS_Init+0xf8>)
 8002abe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	6023      	str	r3, [r4, #0]
  CommunicateTaskHandle = osThreadCreate(osThread(CommunicateTask), NULL);
 8002acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f005 fb51 	bl	800817a <osThreadCreate>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <MX_FREERTOS_Init+0xfc>)
 8002adc:	601a      	str	r2, [r3, #0]

  /* definition and creation of LensTask */
  osThreadDef(LensTask, lens_task, osPriorityRealtime, 0, 512);
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <MX_FREERTOS_Init+0x100>)
 8002ae0:	f107 0418 	add.w	r4, r7, #24
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	6023      	str	r3, [r4, #0]
  LensTaskHandle = osThreadCreate(osThread(LensTask), NULL);
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 fb40 	bl	800817a <osThreadCreate>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_FREERTOS_Init+0x104>)
 8002afe:	601a      	str	r2, [r3, #0]

  /* definition and creation of CmdTask */
  osThreadDef(CmdTask, system_cmd_task, osPriorityRealtime, 0, 512);
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <MX_FREERTOS_Init+0x108>)
 8002b02:	1d3c      	adds	r4, r7, #4
 8002b04:	461d      	mov	r5, r3
 8002b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	6023      	str	r3, [r4, #0]
  CmdTaskHandle = osThreadCreate(osThread(CmdTask), NULL);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 fb31 	bl	800817a <osThreadCreate>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_FREERTOS_Init+0x10c>)
 8002b1c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(LensTaskHandle);
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_FREERTOS_Init+0x104>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f005 fce2 	bl	80084ec <osThreadSuspend>

  taskEXIT_CRITICAL();
 8002b28:	f008 fc7c 	bl	800b424 <vPortExitCritical>
  /* USER CODE END RTOS_THREADS */

}
 8002b2c:	bf00      	nop
 8002b2e:	3760      	adds	r7, #96	; 0x60
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	20009bf0 	.word	0x20009bf0
 8002b38:	20009be4 	.word	0x20009be4
 8002b3c:	0800cec5 	.word	0x0800cec5
 8002b40:	20009bec 	.word	0x20009bec
 8002b44:	0800f194 	.word	0x0800f194
 8002b48:	20009be8 	.word	0x20009be8
 8002b4c:	0800f1b8 	.word	0x0800f1b8
 8002b50:	20009be0 	.word	0x20009be0
 8002b54:	0800f1d8 	.word	0x0800f1d8
 8002b58:	20009bf8 	.word	0x20009bf8
 8002b5c:	0800f1f4 	.word	0x0800f1f4
 8002b60:	20009bf4 	.word	0x20009bf4

08002b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a56      	ldr	r2, [pc, #344]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b54      	ldr	r3, [pc, #336]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b90:	4b51      	ldr	r3, [pc, #324]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a50      	ldr	r2, [pc, #320]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b4e      	ldr	r3, [pc, #312]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc0:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a44      	ldr	r2, [pc, #272]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	4a3e      	ldr	r2, [pc, #248]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	6193      	str	r3, [r2, #24]
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <MX_GPIO_Init+0x174>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Laser_Fiber_En_Pin|AOM1_En_Pin|AOM2_En_Pin|Sleep1_Pin, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	219c      	movs	r1, #156	; 0x9c
 8002bf4:	4839      	ldr	r0, [pc, #228]	; (8002cdc <MX_GPIO_Init+0x178>)
 8002bf6:	f002 fefe 	bl	80059f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper_LR_Sleep_GPIO_Port, Stepper_LR_Sleep_Pin, GPIO_PIN_RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	4838      	ldr	r0, [pc, #224]	; (8002ce0 <MX_GPIO_Init+0x17c>)
 8002c00:	f002 fef9 	bl	80059f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sleep2_GPIO_Port, Sleep2_Pin, GPIO_PIN_RESET);
 8002c04:	2200      	movs	r2, #0
 8002c06:	2110      	movs	r1, #16
 8002c08:	4836      	ldr	r0, [pc, #216]	; (8002ce4 <MX_GPIO_Init+0x180>)
 8002c0a:	f002 fef4 	bl	80059f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Stepper_LR_Dir_Pin|Stepper_Protect_Sleep_Pin|Stepper_UD_Sleep_Pin|Stepper_Up_Dir_Pin 
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f64f 01e0 	movw	r1, #63712	; 0xf8e0
 8002c14:	4834      	ldr	r0, [pc, #208]	; (8002ce8 <MX_GPIO_Init+0x184>)
 8002c16:	f002 feee 	bl	80059f6 <HAL_GPIO_WritePin>
                          |Stepper_Protect_Dir_Pin|TestPin_Pin|M62429_D_Pin|M62429_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Laser_Fiber_En_Pin|AOM1_En_Pin|AOM2_En_Pin|Sleep1_Pin;
 8002c1a:	239c      	movs	r3, #156	; 0x9c
 8002c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2302      	movs	r3, #2
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c2a:	f107 0318 	add.w	r3, r7, #24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	482a      	ldr	r0, [pc, #168]	; (8002cdc <MX_GPIO_Init+0x178>)
 8002c32:	f002 fd5f 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charge_Test_Pin;
 8002c36:	2320      	movs	r3, #32
 8002c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Charge_Test_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 0318 	add.w	r3, r7, #24
 8002c46:	4619      	mov	r1, r3
 8002c48:	4824      	ldr	r0, [pc, #144]	; (8002cdc <MX_GPIO_Init+0x178>)
 8002c4a:	f002 fd53 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Stepper_LR_Sleep_Pin;
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Stepper_LR_Sleep_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f107 0318 	add.w	r3, r7, #24
 8002c62:	4619      	mov	r1, r3
 8002c64:	481e      	ldr	r0, [pc, #120]	; (8002ce0 <MX_GPIO_Init+0x17c>)
 8002c66:	f002 fd45 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sleep2_Pin;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2302      	movs	r3, #2
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sleep2_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 0318 	add.w	r3, r7, #24
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4818      	ldr	r0, [pc, #96]	; (8002ce4 <MX_GPIO_Init+0x180>)
 8002c82:	f002 fd37 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LR_Limit_Switch_Pin|UD_Limit_Switch_Pin;
 8002c86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <MX_GPIO_Init+0x188>)
 8002c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c90:	2301      	movs	r3, #1
 8002c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c94:	f107 0318 	add.w	r3, r7, #24
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <MX_GPIO_Init+0x18c>)
 8002c9c:	f002 fd2a 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Stepper_LR_Dir_Pin|Stepper_Protect_Sleep_Pin|Stepper_UD_Sleep_Pin|Stepper_Up_Dir_Pin 
 8002ca0:	f64f 03e0 	movw	r3, #63712	; 0xf8e0
 8002ca4:	61bb      	str	r3, [r7, #24]
                          |Stepper_Protect_Dir_Pin|TestPin_Pin|M62429_D_Pin|M62429_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <MX_GPIO_Init+0x184>)
 8002cba:	f002 fd1b 	bl	80056f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2105      	movs	r1, #5
 8002cc2:	2028      	movs	r0, #40	; 0x28
 8002cc4:	f001 ff2b 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cc8:	2028      	movs	r0, #40	; 0x28
 8002cca:	f001 ff44 	bl	8004b56 <HAL_NVIC_EnableIRQ>

}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40011800 	.word	0x40011800
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	10310000 	.word	0x10310000
 8002cf0:	40010c00 	.word	0x40010c00

08002cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf8:	f001 f88c 	bl	8003e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cfc:	f000 f85e 	bl	8002dbc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  taskENTER_CRITICAL();
 8002d00:	f008 fb62 	bl	800b3c8 <vPortEnterCritical>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d04:	f7ff ff2e 	bl	8002b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d08:	f7ff fe66 	bl	80029d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002d0c:	f7ff fc5a 	bl	80025c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002d10:	f000 fa5a 	bl	80031c8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002d14:	f000 fec0 	bl	8003a98 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8002d18:	f000 fe94 	bl	8003a44 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8002d1c:	f000 fbf0 	bl	8003500 <MX_TIM5_Init>
  MX_TIM3_Init();
 8002d20:	f000 fb4c 	bl	80033bc <MX_TIM3_Init>
  MX_TIM8_Init();
 8002d24:	f000 fc40 	bl	80035a8 <MX_TIM8_Init>
  MX_TIM4_Init();
 8002d28:	f000 fb9c 	bl	8003464 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002d2c:	f000 faec 	bl	8003308 <MX_TIM2_Init>
  MX_UART4_Init();
 8002d30:	f000 fe5e 	bl	80039f0 <MX_UART4_Init>
  MX_ADC2_Init();
 8002d34:	f7ff fca2 	bl	800267c <MX_ADC2_Init>
  MX_ADC3_Init();
 8002d38:	f7ff fd00 	bl	800273c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  // left motor m1
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	481a      	ldr	r0, [pc, #104]	; (8002da8 <main+0xb4>)
 8002d40:	f003 fd2a 	bl	8006798 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_2);
 8002d44:	2104      	movs	r1, #4
 8002d46:	4818      	ldr	r0, [pc, #96]	; (8002da8 <main+0xb4>)
 8002d48:	f003 fd26 	bl	8006798 <HAL_TIM_Encoder_Start>

  // right motor m2
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4817      	ldr	r0, [pc, #92]	; (8002dac <main+0xb8>)
 8002d50:	f003 fd22 	bl	8006798 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 8002d54:	2104      	movs	r1, #4
 8002d56:	4815      	ldr	r0, [pc, #84]	; (8002dac <main+0xb8>)
 8002d58:	f003 fd1e 	bl	8006798 <HAL_TIM_Encoder_Start>
  // LR
  //  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
  //  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);

  // pwm
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4814      	ldr	r0, [pc, #80]	; (8002db0 <main+0xbc>)
 8002d60:	f003 fbf6 	bl	8006550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002d64:	2104      	movs	r1, #4
 8002d66:	4812      	ldr	r0, [pc, #72]	; (8002db0 <main+0xbc>)
 8002d68:	f003 fbf2 	bl	8006550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002d6c:	2108      	movs	r1, #8
 8002d6e:	4810      	ldr	r0, [pc, #64]	; (8002db0 <main+0xbc>)
 8002d70:	f003 fbee 	bl	8006550 <HAL_TIM_PWM_Start>

  //  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
  //  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
  //  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);

  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8002d74:	2100      	movs	r1, #0
 8002d76:	480e      	ldr	r0, [pc, #56]	; (8002db0 <main+0xbc>)
 8002d78:	f004 fac6 	bl	8007308 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	480c      	ldr	r0, [pc, #48]	; (8002db0 <main+0xbc>)
 8002d80:	f004 fac2 	bl	8007308 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8002d84:	2108      	movs	r1, #8
 8002d86:	480a      	ldr	r0, [pc, #40]	; (8002db0 <main+0xbc>)
 8002d88:	f004 fabe 	bl	8007308 <HAL_TIMEx_PWMN_Start>

  HAL_UART_Transmit(&huart4,&fiber_H[0],9,1);
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2209      	movs	r2, #9
 8002d90:	4908      	ldr	r1, [pc, #32]	; (8002db4 <main+0xc0>)
 8002d92:	4809      	ldr	r0, [pc, #36]	; (8002db8 <main+0xc4>)
 8002d94:	f004 fbfa 	bl	800758c <HAL_UART_Transmit>

  device_init();
 8002d98:	f7fe fde2 	bl	8001960 <device_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8002d9c:	f7ff fe5a 	bl	8002a54 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002da0:	f005 f9d4 	bl	800814c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002da4:	e7fe      	b.n	8002da4 <main+0xb0>
 8002da6:	bf00      	nop
 8002da8:	20009cbc 	.word	0x20009cbc
 8002dac:	20009cfc 	.word	0x20009cfc
 8002db0:	20009d3c 	.word	0x20009d3c
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20009f4c 	.word	0x20009f4c

08002dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b096      	sub	sp, #88	; 0x58
 8002dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dc6:	2228      	movs	r2, #40	; 0x28
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f00a fb6f 	bl	800d4ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd0:	f107 031c 	add.w	r3, r7, #28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e02:	2302      	movs	r3, #2
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fe1e 	bl	8005a58 <HAL_RCC_OscConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002e22:	f000 f863 	bl	8002eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e26:	230f      	movs	r3, #15
 8002e28:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 f888 	bl	8005f58 <HAL_RCC_ClockConfig>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e4e:	f000 f84d 	bl	8002eec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e52:	2302      	movs	r3, #2
 8002e54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fa46 	bl	80062f0 <HAL_RCCEx_PeriphCLKConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002e6a:	f000 f83f 	bl	8002eec <Error_Handler>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3758      	adds	r7, #88	; 0x58
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	80fb      	strh	r3, [r7, #6]
	update_stepper_positon(GPIO_Pin);
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f009 fd5a 	bl	800c93c <update_stepper_positon>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <HAL_TIM_PeriodElapsedCallback+0x24>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ea6:	f003 fb91 	bl	80065cc <HAL_TIM_PWM_Stop>
	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002eb0:	f002 fda1 	bl	80059f6 <HAL_GPIO_WritePin>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_IncTick();
 8002ebe:	f000 ffbf 	bl	8003e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM8){
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_TIM_PeriodElapsedCallback+0x40>
  	tim_rcr_uev_callback();
 8002ecc:	f009 fd92 	bl	800c9f4 <tim_rcr_uev_callback>
  }
  /* USER CODE END Callback 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	20009d7c 	.word	0x20009d7c
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40001000 	.word	0x40001000
 8002ee8:	40013400 	.word	0x40013400

08002eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_MspInit+0x68>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_MspInit+0x68>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6193      	str	r3, [r2, #24]
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_MspInit+0x68>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_MspInit+0x68>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_MspInit+0x68>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	61d3      	str	r3, [r2, #28]
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_MspInit+0x68>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	210f      	movs	r1, #15
 8002f32:	f06f 0001 	mvn.w	r0, #1
 8002f36:	f001 fdf2 	bl	8004b1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_MspInit+0x6c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_MspInit+0x6c>)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000

08002f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	2036      	movs	r0, #54	; 0x36
 8002f7e:	f001 fdce 	bl	8004b1e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8002f82:	2036      	movs	r0, #54	; 0x36
 8002f84:	f001 fde7 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_InitTick+0xa0>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_InitTick+0xa0>)
 8002f8e:	f043 0310 	orr.w	r3, r3, #16
 8002f92:	61d3      	str	r3, [r2, #28]
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_InitTick+0xa0>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa0:	f107 0210 	add.w	r2, r7, #16
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 f952 	bl	8006254 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fb0:	f003 f928 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <HAL_InitTick+0xa4>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0c9b      	lsrs	r3, r3, #18
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_InitTick+0xa8>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <HAL_InitTick+0xac>)
 8002fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_InitTick+0xa8>)
 8002fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_InitTick+0xa8>)
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_InitTick+0xa8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_InitTick+0xa8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fe8:	4809      	ldr	r0, [pc, #36]	; (8003010 <HAL_InitTick+0xa8>)
 8002fea:	f003 fa37 	bl	800645c <HAL_TIM_Base_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <HAL_InitTick+0xa8>)
 8002ff6:	f003 fa5c 	bl	80064b2 <HAL_TIM_Base_Start_IT>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	e000      	b.n	8003000 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	4618      	mov	r0, r3
 8003002:	3730      	adds	r7, #48	; 0x30
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	431bde83 	.word	0x431bde83
 8003010:	20009bfc 	.word	0x20009bfc
 8003014:	40001000 	.word	0x40001000

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <HardFault_Handler+0x4>

0800302a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <MemManage_Handler+0x4>

08003030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <BusFault_Handler+0x4>

08003036 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <UsageFault_Handler+0x4>

0800303c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <DMA1_Channel1_IRQHandler+0x10>)
 800304e:	f001 ff6f 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20009b9c 	.word	0x20009b9c

0800305c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <DMA1_Channel2_IRQHandler+0x10>)
 8003062:	f001 ff65 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20009e40 	.word	0x20009e40

08003070 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <DMA1_Channel3_IRQHandler+0x10>)
 8003076:	f001 ff5b 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20009dbc 	.word	0x20009dbc

08003084 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <DMA1_Channel4_IRQHandler+0x10>)
 800308a:	f001 ff51 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20009e84 	.word	0x20009e84

08003098 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <DMA1_Channel5_IRQHandler+0x10>)
 800309e:	f001 ff47 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20009ec8 	.word	0x20009ec8

080030ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <ADC1_2_IRQHandler+0x14>)
 80030b2:	f001 f957 	bl	8004364 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80030b6:	4803      	ldr	r0, [pc, #12]	; (80030c4 <ADC1_2_IRQHandler+0x18>)
 80030b8:	f001 f954 	bl	8004364 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20009b3c 	.word	0x20009b3c
 80030c4:	20009b0c 	.word	0x20009b0c

080030c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <TIM4_IRQHandler+0x10>)
 80030ce:	f003 fb9a 	bl	8006806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20009c7c 	.word	0x20009c7c

080030dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  usart1_idle_callback();
 80030e0:	f008 fe26 	bl	800bd30 <usart1_idle_callback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <USART1_IRQHandler+0x14>)
 80030e6:	f004 fbd7 	bl	8007898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20009f0c 	.word	0x20009f0c

080030f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_idle_callback();
 80030f8:	f008 fdf8 	bl	800bcec <usart3_idle_callback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <USART3_IRQHandler+0x14>)
 80030fe:	f004 fbcb 	bl	8007898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20009e00 	.word	0x20009e00

0800310c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003110:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003114:	f002 fc88 	bl	8005a28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800311c:	f002 fc84 	bl	8005a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}

08003124 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM8_UP_IRQHandler+0x10>)
 800312a:	f003 fb6c 	bl	8006806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20009c3c 	.word	0x20009c3c

08003138 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <ADC3_IRQHandler+0x10>)
 800313e:	f001 f911 	bl	8004364 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20009b6c 	.word	0x20009b6c

0800314c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <TIM6_IRQHandler+0x10>)
 8003152:	f003 fb58 	bl	8006806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20009bfc 	.word	0x20009bfc

08003160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003164:	4b15      	ldr	r3, [pc, #84]	; (80031bc <SystemInit+0x5c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <SystemInit+0x5c>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <SystemInit+0x5c>)
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4911      	ldr	r1, [pc, #68]	; (80031bc <SystemInit+0x5c>)
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <SystemInit+0x60>)
 8003178:	4013      	ands	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <SystemInit+0x5c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <SystemInit+0x5c>)
 8003182:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <SystemInit+0x5c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <SystemInit+0x5c>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003196:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <SystemInit+0x5c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <SystemInit+0x5c>)
 800319e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <SystemInit+0x5c>)
 80031a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80031aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <SystemInit+0x64>)
 80031ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000
 80031c0:	f8ff0000 	.word	0xf8ff0000
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b092      	sub	sp, #72	; 0x48
 80031cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2220      	movs	r2, #32
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00a f95b 	bl	800d4ae <memset>

  htim1.Instance = TIM1;
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <MX_TIM1_Init+0x138>)
 80031fa:	4a42      	ldr	r2, [pc, #264]	; (8003304 <MX_TIM1_Init+0x13c>)
 80031fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <MX_TIM1_Init+0x138>)
 8003200:	2201      	movs	r2, #1
 8003202:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003204:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <MX_TIM1_Init+0x138>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <MX_TIM1_Init+0x138>)
 800320c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003210:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <MX_TIM1_Init+0x138>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003218:	4b39      	ldr	r3, [pc, #228]	; (8003300 <MX_TIM1_Init+0x138>)
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <MX_TIM1_Init+0x138>)
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003224:	4836      	ldr	r0, [pc, #216]	; (8003300 <MX_TIM1_Init+0x138>)
 8003226:	f003 f967 	bl	80064f8 <HAL_TIM_PWM_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003230:	f7ff fe5c 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003238:	2300      	movs	r3, #0
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800323c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003240:	4619      	mov	r1, r3
 8003242:	482f      	ldr	r0, [pc, #188]	; (8003300 <MX_TIM1_Init+0x138>)
 8003244:	f004 f88a 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800324e:	f7ff fe4d 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003252:	2360      	movs	r3, #96	; 0x60
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 800;
 8003256:	f44f 7348 	mov.w	r3, #800	; 0x320
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003274:	2200      	movs	r2, #0
 8003276:	4619      	mov	r1, r3
 8003278:	4821      	ldr	r0, [pc, #132]	; (8003300 <MX_TIM1_Init+0x138>)
 800327a:	f003 fbcd 	bl	8006a18 <HAL_TIM_PWM_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003284:	f7ff fe32 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328c:	2204      	movs	r2, #4
 800328e:	4619      	mov	r1, r3
 8003290:	481b      	ldr	r0, [pc, #108]	; (8003300 <MX_TIM1_Init+0x138>)
 8003292:	f003 fbc1 	bl	8006a18 <HAL_TIM_PWM_ConfigChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800329c:	f7ff fe26 	bl	8002eec <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80032a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032aa:	2208      	movs	r2, #8
 80032ac:	4619      	mov	r1, r3
 80032ae:	4814      	ldr	r0, [pc, #80]	; (8003300 <MX_TIM1_Init+0x138>)
 80032b0:	f003 fbb2 	bl	8006a18 <HAL_TIM_PWM_ConfigChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80032ba:	f7ff fe17 	bl	8002eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4807      	ldr	r0, [pc, #28]	; (8003300 <MX_TIM1_Init+0x138>)
 80032e2:	f004 f87f 	bl	80073e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80032ec:	f7ff fdfe 	bl	8002eec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80032f0:	4803      	ldr	r0, [pc, #12]	; (8003300 <MX_TIM1_Init+0x138>)
 80032f2:	f000 fad3 	bl	800389c <HAL_TIM_MspPostInit>

}
 80032f6:	bf00      	nop
 80032f8:	3748      	adds	r7, #72	; 0x48
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20009d3c 	.word	0x20009d3c
 8003304:	40012c00 	.word	0x40012c00

08003308 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330e:	f107 0320 	add.w	r3, r7, #32
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <MX_TIM2_Init+0xb0>)
 800332c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <MX_TIM2_Init+0xb0>)
 8003334:	2203      	movs	r2, #3
 8003336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <MX_TIM2_Init+0xb0>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <MX_TIM2_Init+0xb0>)
 8003340:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_TIM2_Init+0xb0>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <MX_TIM2_Init+0xb0>)
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003352:	4819      	ldr	r0, [pc, #100]	; (80033b8 <MX_TIM2_Init+0xb0>)
 8003354:	f003 f8d0 	bl	80064f8 <HAL_TIM_PWM_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800335e:	f7ff fdc5 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003362:	2320      	movs	r3, #32
 8003364:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800336a:	f107 0320 	add.w	r3, r7, #32
 800336e:	4619      	mov	r1, r3
 8003370:	4811      	ldr	r0, [pc, #68]	; (80033b8 <MX_TIM2_Init+0xb0>)
 8003372:	f003 fff3 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800337c:	f7ff fdb6 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003380:	2360      	movs	r3, #96	; 0x60
 8003382:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8003384:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2200      	movs	r2, #0
 8003396:	4619      	mov	r1, r3
 8003398:	4807      	ldr	r0, [pc, #28]	; (80033b8 <MX_TIM2_Init+0xb0>)
 800339a:	f003 fb3d 	bl	8006a18 <HAL_TIM_PWM_ConfigChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80033a4:	f7ff fda2 	bl	8002eec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80033a8:	4803      	ldr	r0, [pc, #12]	; (80033b8 <MX_TIM2_Init+0xb0>)
 80033aa:	f000 fa77 	bl	800389c <HAL_TIM_MspPostInit>

}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20009d7c 	.word	0x20009d7c

080033bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f00a f86f 	bl	800d4ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <MX_TIM3_Init+0xa0>)
 80033da:	4a21      	ldr	r2, [pc, #132]	; (8003460 <MX_TIM3_Init+0xa4>)
 80033dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033de:	4b1f      	ldr	r3, [pc, #124]	; (800345c <MX_TIM3_Init+0xa0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <MX_TIM3_Init+0xa0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <MX_TIM3_Init+0xa0>)
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <MX_TIM3_Init+0xa0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <MX_TIM3_Init+0xa0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033fe:	2301      	movs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003402:	2302      	movs	r3, #2
 8003404:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003406:	2301      	movs	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003416:	2301      	movs	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003422:	f107 030c 	add.w	r3, r7, #12
 8003426:	4619      	mov	r1, r3
 8003428:	480c      	ldr	r0, [pc, #48]	; (800345c <MX_TIM3_Init+0xa0>)
 800342a:	f003 f927 	bl	800667c <HAL_TIM_Encoder_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003434:	f7ff fd5a 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4805      	ldr	r0, [pc, #20]	; (800345c <MX_TIM3_Init+0xa0>)
 8003446:	f003 ff89 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003450:	f7ff fd4c 	bl	8002eec <Error_Handler>
  }

}
 8003454:	bf00      	nop
 8003456:	3730      	adds	r7, #48	; 0x30
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20009cfc 	.word	0x20009cfc
 8003460:	40000400 	.word	0x40000400

08003464 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800346a:	f107 030c 	add.w	r3, r7, #12
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <MX_TIM4_Init+0x94>)
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <MX_TIM4_Init+0x98>)
 8003486:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MX_TIM4_Init+0x94>)
 800348a:	2200      	movs	r2, #0
 800348c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <MX_TIM4_Init+0x94>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <MX_TIM4_Init+0x94>)
 8003496:	22c8      	movs	r2, #200	; 0xc8
 8003498:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <MX_TIM4_Init+0x94>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <MX_TIM4_Init+0x94>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034a6:	4814      	ldr	r0, [pc, #80]	; (80034f8 <MX_TIM4_Init+0x94>)
 80034a8:	f002 ffd8 	bl	800645c <HAL_TIM_Base_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80034b2:	f7ff fd1b 	bl	8002eec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80034b6:	2307      	movs	r3, #7
 80034b8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80034ba:	2310      	movs	r3, #16
 80034bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	4619      	mov	r1, r3
 80034c4:	480c      	ldr	r0, [pc, #48]	; (80034f8 <MX_TIM4_Init+0x94>)
 80034c6:	f003 fb6d 	bl	8006ba4 <HAL_TIM_SlaveConfigSynchro>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80034d0:	f7ff fd0c 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4805      	ldr	r0, [pc, #20]	; (80034f8 <MX_TIM4_Init+0x94>)
 80034e2:	f003 ff3b 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80034ec:	f7ff fcfe 	bl	8002eec <Error_Handler>
  }

}
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20009c7c 	.word	0x20009c7c
 80034fc:	40000800 	.word	0x40000800

08003500 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	; 0x30
 8003504:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f009 ffcd 	bl	800d4ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <MX_TIM5_Init+0xa0>)
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <MX_TIM5_Init+0xa4>)
 8003520:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003522:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <MX_TIM5_Init+0xa0>)
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <MX_TIM5_Init+0xa0>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <MX_TIM5_Init+0xa0>)
 8003530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003534:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <MX_TIM5_Init+0xa0>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800353c:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <MX_TIM5_Init+0xa0>)
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003542:	2301      	movs	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800355a:	2301      	movs	r3, #1
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800355e:	2300      	movs	r3, #0
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4619      	mov	r1, r3
 800356c:	480c      	ldr	r0, [pc, #48]	; (80035a0 <MX_TIM5_Init+0xa0>)
 800356e:	f003 f885 	bl	800667c <HAL_TIM_Encoder_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003578:	f7ff fcb8 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	4619      	mov	r1, r3
 8003588:	4805      	ldr	r0, [pc, #20]	; (80035a0 <MX_TIM5_Init+0xa0>)
 800358a:	f003 fee7 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003594:	f7ff fcaa 	bl	8002eec <Error_Handler>
  }

}
 8003598:	bf00      	nop
 800359a:	3730      	adds	r7, #48	; 0x30
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20009cbc 	.word	0x20009cbc
 80035a4:	40000c00 	.word	0x40000c00

080035a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b092      	sub	sp, #72	; 0x48
 80035ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	615a      	str	r2, [r3, #20]
 80035ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	2220      	movs	r2, #32
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f009 ff6b 	bl	800d4ae <memset>

  htim8.Instance = TIM8;
 80035d8:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <MX_TIM8_Init+0x100>)
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <MX_TIM8_Init+0x104>)
 80035dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4-1;
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <MX_TIM8_Init+0x100>)
 80035e0:	2203      	movs	r2, #3
 80035e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <MX_TIM8_Init+0x100>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <MX_TIM8_Init+0x100>)
 80035ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <MX_TIM8_Init+0x100>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 250;
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <MX_TIM8_Init+0x100>)
 80035fa:	22fa      	movs	r2, #250	; 0xfa
 80035fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <MX_TIM8_Init+0x100>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003604:	4828      	ldr	r0, [pc, #160]	; (80036a8 <MX_TIM8_Init+0x100>)
 8003606:	f002 ff77 	bl	80064f8 <HAL_TIM_PWM_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003610:	f7ff fc6c 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800361c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003620:	4619      	mov	r1, r3
 8003622:	4821      	ldr	r0, [pc, #132]	; (80036a8 <MX_TIM8_Init+0x100>)
 8003624:	f003 fe9a 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800362e:	f7ff fc5d 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003632:	2360      	movs	r3, #96	; 0x60
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8003636:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	2204      	movs	r2, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4813      	ldr	r0, [pc, #76]	; (80036a8 <MX_TIM8_Init+0x100>)
 800365a:	f003 f9dd 	bl	8006a18 <HAL_TIM_PWM_ConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8003664:	f7ff fc42 	bl	8002eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800367c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003680:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4807      	ldr	r0, [pc, #28]	; (80036a8 <MX_TIM8_Init+0x100>)
 800368c:	f003 feaa 	bl	80073e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8003696:	f7ff fc29 	bl	8002eec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800369a:	4803      	ldr	r0, [pc, #12]	; (80036a8 <MX_TIM8_Init+0x100>)
 800369c:	f000 f8fe 	bl	800389c <HAL_TIM_MspPostInit>

}
 80036a0:	bf00      	nop
 80036a2:	3748      	adds	r7, #72	; 0x48
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20009c3c 	.word	0x20009c3c
 80036ac:	40013400 	.word	0x40013400

080036b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <HAL_TIM_PWM_MspInit+0x90>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 80036c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036cc:	6193      	str	r3, [r2, #24]
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */
    HAL_TIM_Base_Start_IT(tim_pwmHandle);
  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80036da:	e02d      	b.n	8003738 <HAL_TIM_PWM_MspInit+0x88>
  else if(tim_pwmHandle->Instance==TIM2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d10c      	bne.n	8003700 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	61d3      	str	r3, [r2, #28]
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
}
 80036fe:	e01b      	b.n	8003738 <HAL_TIM_PWM_MspInit+0x88>
  else if(tim_pwmHandle->Instance==TIM8)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_TIM_PWM_MspInit+0x98>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d116      	bne.n	8003738 <HAL_TIM_PWM_MspInit+0x88>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 8003710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003714:	6193      	str	r3, [r2, #24]
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 5, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2105      	movs	r1, #5
 8003726:	202c      	movs	r0, #44	; 0x2c
 8003728:	f001 f9f9 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800372c:	202c      	movs	r0, #44	; 0x2c
 800372e:	f001 fa12 	bl	8004b56 <HAL_NVIC_EnableIRQ>
    HAL_TIM_Base_Start_IT(tim_pwmHandle);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f002 febd 	bl	80064b2 <HAL_TIM_Base_Start_IT>
}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40021000 	.word	0x40021000
 8003748:	40013400 	.word	0x40013400

0800374c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 031c 	add.w	r3, r7, #28
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a33      	ldr	r2, [pc, #204]	; (8003834 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d136      	bne.n	80037da <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800376c:	4b32      	ldr	r3, [pc, #200]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	61d3      	str	r3, [r2, #28]
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	6193      	str	r3, [r2, #24]
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = M2_RS422_B_Pin|M2_RS422_A_Pin;
 800379c:	2330      	movs	r3, #48	; 0x30
 800379e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	f107 031c 	add.w	r3, r7, #28
 80037ac:	4619      	mov	r1, r3
 80037ae:	4823      	ldr	r0, [pc, #140]	; (800383c <HAL_TIM_Encoder_MspInit+0xf0>)
 80037b0:	f001 ffa0 	bl	80056f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_TIM_Encoder_MspInit+0xf4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_TIM_Encoder_MspInit+0xf4>)
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80037d8:	e028      	b.n	800382c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM5)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_TIM_Encoder_MspInit+0xf8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d123      	bne.n	800382c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a13      	ldr	r2, [pc, #76]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 80037ea:	f043 0308 	orr.w	r3, r3, #8
 80037ee:	61d3      	str	r3, [r2, #28]
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_TIM_Encoder_MspInit+0xec>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_RS422_A_Pin|M1_RS422_B_Pin;
 8003814:	2303      	movs	r3, #3
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	4619      	mov	r1, r3
 8003826:	4808      	ldr	r0, [pc, #32]	; (8003848 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003828:	f001 ff64 	bl	80056f4 <HAL_GPIO_Init>
}
 800382c:	bf00      	nop
 800382e:	3730      	adds	r7, #48	; 0x30
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40000400 	.word	0x40000400
 8003838:	40021000 	.word	0x40021000
 800383c:	40010c00 	.word	0x40010c00
 8003840:	40010000 	.word	0x40010000
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010800 	.word	0x40010800

0800384c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_TIM_Base_MspInit+0x48>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d116      	bne.n	800388c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_TIM_Base_MspInit+0x4c>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <HAL_TIM_Base_MspInit+0x4c>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	61d3      	str	r3, [r2, #28]
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_TIM_Base_MspInit+0x4c>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2105      	movs	r1, #5
 800387a:	201e      	movs	r0, #30
 800387c:	f001 f94f 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003880:	201e      	movs	r0, #30
 8003882:	f001 f968 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */
    HAL_TIM_Base_Start_IT(tim_baseHandle);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f002 fe13 	bl	80064b2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40000800 	.word	0x40000800
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 0318 	add.w	r3, r7, #24
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a47      	ldr	r2, [pc, #284]	; (80039d4 <HAL_TIM_MspPostInit+0x138>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d138      	bne.n	800392e <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038bc:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4a45      	ldr	r2, [pc, #276]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 80038c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c6:	6193      	str	r3, [r2, #24]
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = M1_PWM_OUT__Pin|M1_PWM_OUT_E9_Pin|M2_PWM_OUT__Pin|M2_PWM_OUT_E11_Pin;
 80038d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80038d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038de:	2303      	movs	r3, #3
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038e2:	f107 0318 	add.w	r3, r7, #24
 80038e6:	4619      	mov	r1, r3
 80038e8:	483c      	ldr	r0, [pc, #240]	; (80039dc <HAL_TIM_MspPostInit+0x140>)
 80038ea:	f001 ff03 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M_Protect_OUT__Pin|M_Protect_OUT_E13_Pin;
 80038ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2302      	movs	r3, #2
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038fc:	f107 0318 	add.w	r3, r7, #24
 8003900:	4619      	mov	r1, r3
 8003902:	4836      	ldr	r0, [pc, #216]	; (80039dc <HAL_TIM_MspPostInit+0x140>)
 8003904:	f001 fef6 	bl	80056f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003908:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <HAL_TIM_MspPostInit+0x144>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <HAL_TIM_MspPostInit+0x144>)
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800392c:	e04d      	b.n	80039ca <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d12b      	bne.n	8003990 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	6193      	str	r3, [r2, #24]
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Stepper_LR_Step_Pin;
 8003950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2302      	movs	r3, #2
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Stepper_LR_Step_GPIO_Port, &GPIO_InitStruct);
 800395e:	f107 0318 	add.w	r3, r7, #24
 8003962:	4619      	mov	r1, r3
 8003964:	481f      	ldr	r0, [pc, #124]	; (80039e4 <HAL_TIM_MspPostInit+0x148>)
 8003966:	f001 fec5 	bl	80056f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800396a:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_TIM_MspPostInit+0x144>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <HAL_TIM_MspPostInit+0x144>)
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	6053      	str	r3, [r2, #4]
}
 800398e:	e01c      	b.n	80039ca <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <HAL_TIM_MspPostInit+0x14c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d117      	bne.n	80039ca <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 80039a0:	f043 0310 	orr.w	r3, r3, #16
 80039a4:	6193      	str	r3, [r2, #24]
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_TIM_MspPostInit+0x13c>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Stepper_UD_Step_Pin;
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b6:	2302      	movs	r3, #2
 80039b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2302      	movs	r3, #2
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Stepper_UD_Step_GPIO_Port, &GPIO_InitStruct);
 80039be:	f107 0318 	add.w	r3, r7, #24
 80039c2:	4619      	mov	r1, r3
 80039c4:	4809      	ldr	r0, [pc, #36]	; (80039ec <HAL_TIM_MspPostInit+0x150>)
 80039c6:	f001 fe95 	bl	80056f4 <HAL_GPIO_Init>
}
 80039ca:	bf00      	nop
 80039cc:	3730      	adds	r7, #48	; 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40011800 	.word	0x40011800
 80039e0:	40010000 	.word	0x40010000
 80039e4:	40010800 	.word	0x40010800
 80039e8:	40013400 	.word	0x40013400
 80039ec:	40011000 	.word	0x40011000

080039f0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <MX_UART4_Init+0x4c>)
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <MX_UART4_Init+0x50>)
 80039f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <MX_UART4_Init+0x4c>)
 80039fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a16:	220c      	movs	r2, #12
 8003a18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a26:	4805      	ldr	r0, [pc, #20]	; (8003a3c <MX_UART4_Init+0x4c>)
 8003a28:	f003 fd63 	bl	80074f2 <HAL_UART_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003a32:	f7ff fa5b 	bl	8002eec <Error_Handler>
  }

}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20009f4c 	.word	0x20009f4c
 8003a40:	40004c00 	.word	0x40004c00

08003a44 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <MX_USART1_UART_Init+0x50>)
 8003a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a7a:	4805      	ldr	r0, [pc, #20]	; (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a7c:	f003 fd39 	bl	80074f2 <HAL_UART_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a86:	f7ff fa31 	bl	8002eec <Error_Handler>
  }

}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20009f0c 	.word	0x20009f0c
 8003a94:	40013800 	.word	0x40013800

08003a98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <MX_USART3_UART_Init+0x50>)
 8003aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003aa4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003abe:	220c      	movs	r2, #12
 8003ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_USART3_UART_Init+0x4c>)
 8003ad0:	f003 fd0f 	bl	80074f2 <HAL_UART_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003ada:	f7ff fa07 	bl	8002eec <Error_Handler>
  }

}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20009e00 	.word	0x20009e00
 8003ae8:	40004800 	.word	0x40004800

08003aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a61      	ldr	r2, [pc, #388]	; (8003c8c <HAL_UART_MspInit+0x1a0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d132      	bne.n	8003b72 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b0c:	4b60      	ldr	r3, [pc, #384]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4a5f      	ldr	r2, [pc, #380]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b16:	61d3      	str	r3, [r2, #28]
 8003b18:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b24:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	4a59      	ldr	r2, [pc, #356]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b2a:	f043 0310 	orr.w	r3, r3, #16
 8003b2e:	6193      	str	r3, [r2, #24]
 8003b30:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = Fiber_UART4_TX_Pin;
 8003b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b46:	2303      	movs	r3, #3
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(Fiber_UART4_TX_GPIO_Port, &GPIO_InitStruct);
 8003b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4850      	ldr	r0, [pc, #320]	; (8003c94 <HAL_UART_MspInit+0x1a8>)
 8003b52:	f001 fdcf 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Fiber_UART4_RX_Pin;
 8003b56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Fiber_UART4_RX_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	484a      	ldr	r0, [pc, #296]	; (8003c94 <HAL_UART_MspInit+0x1a8>)
 8003b6c:	f001 fdc2 	bl	80056f4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b70:	e13c      	b.n	8003dec <HAL_UART_MspInit+0x300>
  else if(uartHandle->Instance==USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a48      	ldr	r2, [pc, #288]	; (8003c98 <HAL_UART_MspInit+0x1ac>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f040 8099 	bne.w	8003cb0 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b7e:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	4a43      	ldr	r2, [pc, #268]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b88:	6193      	str	r3, [r2, #24]
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	4a3d      	ldr	r2, [pc, #244]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6193      	str	r3, [r2, #24]
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_UART_MspInit+0x1a4>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Jetson_UART1_TX_Pin;
 8003bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(Jetson_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4836      	ldr	r0, [pc, #216]	; (8003c9c <HAL_UART_MspInit+0x1b0>)
 8003bc4:	f001 fd96 	bl	80056f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Jetson_UART1_RX_Pin;
 8003bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Jetson_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	482f      	ldr	r0, [pc, #188]	; (8003c9c <HAL_UART_MspInit+0x1b0>)
 8003bde:	f001 fd89 	bl	80056f4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003be2:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003be4:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <HAL_UART_MspInit+0x1b8>)
 8003be6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003be8:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003bea:	2210      	movs	r2, #16
 8003bec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf4:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bfa:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c06:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c12:	4823      	ldr	r0, [pc, #140]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003c14:	f000 ffae 	bl	8004b74 <HAL_DMA_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8003c1e:	f7ff f965 	bl	8002eec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <HAL_UART_MspInit+0x1b4>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <HAL_UART_MspInit+0x1c0>)
 8003c32:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c46:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c54:	2220      	movs	r2, #32
 8003c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c5e:	4812      	ldr	r0, [pc, #72]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c60:	f000 ff88 	bl	8004b74 <HAL_DMA_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003c6a:	f7ff f93f 	bl	8002eec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_UART_MspInit+0x1bc>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2105      	movs	r1, #5
 8003c7e:	2025      	movs	r0, #37	; 0x25
 8003c80:	f000 ff4d 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c84:	2025      	movs	r0, #37	; 0x25
 8003c86:	f000 ff66 	bl	8004b56 <HAL_NVIC_EnableIRQ>
}
 8003c8a:	e0af      	b.n	8003dec <HAL_UART_MspInit+0x300>
 8003c8c:	40004c00 	.word	0x40004c00
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40011000 	.word	0x40011000
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	40010800 	.word	0x40010800
 8003ca0:	20009e84 	.word	0x20009e84
 8003ca4:	40020044 	.word	0x40020044
 8003ca8:	20009ec8 	.word	0x20009ec8
 8003cac:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART3)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a4f      	ldr	r2, [pc, #316]	; (8003df4 <HAL_UART_MspInit+0x308>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	f040 8098 	bne.w	8003dec <HAL_UART_MspInit+0x300>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cbc:	4b4e      	ldr	r3, [pc, #312]	; (8003df8 <HAL_UART_MspInit+0x30c>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_UART_MspInit+0x30c>)
 8003cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc6:	61d3      	str	r3, [r2, #28]
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <HAL_UART_MspInit+0x30c>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd4:	4b48      	ldr	r3, [pc, #288]	; (8003df8 <HAL_UART_MspInit+0x30c>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	4a47      	ldr	r2, [pc, #284]	; (8003df8 <HAL_UART_MspInit+0x30c>)
 8003cda:	f043 0320 	orr.w	r3, r3, #32
 8003cde:	6193      	str	r3, [r2, #24]
 8003ce0:	4b45      	ldr	r3, [pc, #276]	; (8003df8 <HAL_UART_MspInit+0x30c>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Ceju_UART3_TX_Pin;
 8003cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(Ceju_UART3_TX_GPIO_Port, &GPIO_InitStruct);
 8003cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cfe:	4619      	mov	r1, r3
 8003d00:	483e      	ldr	r0, [pc, #248]	; (8003dfc <HAL_UART_MspInit+0x310>)
 8003d02:	f001 fcf7 	bl	80056f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Ceju_UART3_RX_Pin;
 8003d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Ceju_UART3_RX_GPIO_Port, &GPIO_InitStruct);
 8003d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4838      	ldr	r0, [pc, #224]	; (8003dfc <HAL_UART_MspInit+0x310>)
 8003d1c:	f001 fcea 	bl	80056f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8003d20:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_UART_MspInit+0x314>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3e:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <HAL_UART_MspInit+0x314>)
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d46:	4a30      	ldr	r2, [pc, #192]	; (8003e08 <HAL_UART_MspInit+0x31c>)
 8003d48:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d50:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d56:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d62:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d74:	4823      	ldr	r0, [pc, #140]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d76:	f000 fefd 	bl	8004b74 <HAL_DMA_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_MspInit+0x298>
      Error_Handler();
 8003d80:	f7ff f8b4 	bl	8002eec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <HAL_UART_MspInit+0x318>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_UART_MspInit+0x324>)
 8003d94:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003d98:	2210      	movs	r2, #16
 8003d9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003db4:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003dc0:	4812      	ldr	r0, [pc, #72]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003dc2:	f000 fed7 	bl	8004b74 <HAL_DMA_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 8003dcc:	f7ff f88e 	bl	8002eec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <HAL_UART_MspInit+0x320>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2105      	movs	r1, #5
 8003de0:	2027      	movs	r0, #39	; 0x27
 8003de2:	f000 fe9c 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003de6:	2027      	movs	r0, #39	; 0x27
 8003de8:	f000 feb5 	bl	8004b56 <HAL_NVIC_EnableIRQ>
}
 8003dec:	bf00      	nop
 8003dee:	3738      	adds	r7, #56	; 0x38
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40004800 	.word	0x40004800
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40011400 	.word	0x40011400
 8003e00:	40010000 	.word	0x40010000
 8003e04:	20009dbc 	.word	0x20009dbc
 8003e08:	40020030 	.word	0x40020030
 8003e0c:	20009e40 	.word	0x20009e40
 8003e10:	4002001c 	.word	0x4002001c

08003e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_Init+0x28>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_Init+0x28>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f000 fe6f 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f7ff f89c 	bl	8002f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e30:	f7ff f862 	bl	8002ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40022000 	.word	0x40022000

08003e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_IncTick+0x1c>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_IncTick+0x20>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a03      	ldr	r2, [pc, #12]	; (8003e60 <HAL_IncTick+0x20>)
 8003e52:	6013      	str	r3, [r2, #0]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	20000020 	.word	0x20000020
 8003e60:	20009f8c 	.word	0x20009f8c

08003e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return uwTick;
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <HAL_GetTick+0x10>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	20009f8c 	.word	0x20009f8c

08003e78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0ce      	b.n	8004038 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fe fca0 	bl	80027fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fccf 	bl	8004860 <ADC_ConversionStop_Disable>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 80a9 	bne.w	8004026 <HAL_ADC_Init+0x1ae>
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 80a5 	bne.w	8004026 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ee4:	f023 0302 	bic.w	r3, r3, #2
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4951      	ldr	r1, [pc, #324]	; (8004040 <HAL_ADC_Init+0x1c8>)
 8003efa:	428b      	cmp	r3, r1
 8003efc:	d10a      	bne.n	8003f14 <HAL_ADC_Init+0x9c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f06:	d002      	beq.n	8003f0e <HAL_ADC_Init+0x96>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	e004      	b.n	8003f18 <HAL_ADC_Init+0xa0>
 8003f0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f12:	e001      	b.n	8003f18 <HAL_ADC_Init+0xa0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7b1b      	ldrb	r3, [r3, #12]
 8003f1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d003      	beq.n	8003f3a <HAL_ADC_Init+0xc2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_ADC_Init+0xc8>
 8003f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3e:	e000      	b.n	8003f42 <HAL_ADC_Init+0xca>
 8003f40:	2300      	movs	r3, #0
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7d1b      	ldrb	r3, [r3, #20]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d119      	bne.n	8003f84 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7b1b      	ldrb	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	035a      	lsls	r2, r3, #13
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e00b      	b.n	8003f84 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <HAL_ADC_Init+0x1cc>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb4:	d003      	beq.n	8003fbe <HAL_ADC_Init+0x146>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d104      	bne.n	8003fc8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	051b      	lsls	r3, r3, #20
 8003fc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_ADC_Init+0x1d0>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d10b      	bne.n	8004004 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004002:	e018      	b.n	8004036 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f023 0312 	bic.w	r3, r3, #18
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004024:	e007      	b.n	8004036 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f043 0210 	orr.w	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40013c00 	.word	0x40013c00
 8004044:	ffe1f7fd 	.word	0xffe1f7fd
 8004048:	ff1f0efe 	.word	0xff1f0efe

0800404c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_ADC_Start+0x1a>
 8004062:	2302      	movs	r3, #2
 8004064:	e098      	b.n	8004198 <HAL_ADC_Start+0x14c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fba4 	bl	80047bc <ADC_Enable>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 8087 	bne.w	800418e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a41      	ldr	r2, [pc, #260]	; (80041a0 <HAL_ADC_Start+0x154>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d105      	bne.n	80040aa <HAL_ADC_Start+0x5e>
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_ADC_Start+0x158>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d026      	beq.n	8004112 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040d4:	e01d      	b.n	8004112 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <HAL_ADC_Start+0x158>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_ADC_Start+0xaa>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	; (80041a0 <HAL_ADC_Start+0x154>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10d      	bne.n	8004112 <HAL_ADC_Start+0xc6>
 80040f6:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_ADC_Start+0x158>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800410a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f023 0206 	bic.w	r2, r3, #6
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c
 800412a:	e002      	b.n	8004132 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0202 	mvn.w	r2, #2
 8004142:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800414e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004152:	d113      	bne.n	800417c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004158:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <HAL_ADC_Start+0x154>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d105      	bne.n	800416a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_ADC_Start+0x158>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004166:	2b00      	cmp	r3, #0
 8004168:	d108      	bne.n	800417c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004178:	609a      	str	r2, [r3, #8]
 800417a:	e00c      	b.n	8004196 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	e003      	b.n	8004196 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40012800 	.word	0x40012800
 80041a4:	40012400 	.word	0x40012400

080041a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a64      	ldr	r2, [pc, #400]	; (8004350 <HAL_ADC_Start_DMA+0x1a8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_ADC_Start_DMA+0x24>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a63      	ldr	r2, [pc, #396]	; (8004354 <HAL_ADC_Start_DMA+0x1ac>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d106      	bne.n	80041da <HAL_ADC_Start_DMA+0x32>
 80041cc:	4b60      	ldr	r3, [pc, #384]	; (8004350 <HAL_ADC_Start_DMA+0x1a8>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 80b3 	bne.w	8004340 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_ADC_Start_DMA+0x40>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0ae      	b.n	8004346 <HAL_ADC_Start_DMA+0x19e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fae3 	bl	80047bc <ADC_Enable>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f040 809a 	bne.w	8004336 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a4e      	ldr	r2, [pc, #312]	; (8004354 <HAL_ADC_Start_DMA+0x1ac>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d105      	bne.n	800422c <HAL_ADC_Start_DMA+0x84>
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_ADC_Start_DMA+0x1a8>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d115      	bne.n	8004258 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d026      	beq.n	8004294 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800424e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004256:	e01d      	b.n	8004294 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a39      	ldr	r2, [pc, #228]	; (8004350 <HAL_ADC_Start_DMA+0x1a8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_ADC_Start_DMA+0xd0>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a38      	ldr	r2, [pc, #224]	; (8004354 <HAL_ADC_Start_DMA+0x1ac>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <HAL_ADC_Start_DMA+0xec>
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_ADC_Start_DMA+0x1a8>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800428c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d006      	beq.n	80042ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	f023 0206 	bic.w	r2, r3, #6
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80042ac:	e002      	b.n	80042b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4a25      	ldr	r2, [pc, #148]	; (8004358 <HAL_ADC_Start_DMA+0x1b0>)
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	4a24      	ldr	r2, [pc, #144]	; (800435c <HAL_ADC_Start_DMA+0x1b4>)
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a23      	ldr	r2, [pc, #140]	; (8004360 <HAL_ADC_Start_DMA+0x1b8>)
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0202 	mvn.w	r2, #2
 80042dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a18      	ldr	r0, [r3, #32]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	334c      	adds	r3, #76	; 0x4c
 80042f8:	4619      	mov	r1, r3
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f000 fcaf 	bl	8004c60 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800430c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004310:	d108      	bne.n	8004324 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004320:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004322:	e00f      	b.n	8004344 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004332:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004334:	e006      	b.n	8004344 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800433e:	e001      	b.n	8004344 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40012400 	.word	0x40012400
 8004354:	40012800 	.word	0x40012800
 8004358:	080048d5 	.word	0x080048d5
 800435c:	08004951 	.word	0x08004951
 8004360:	0800496d 	.word	0x0800496d

08004364 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b20      	cmp	r3, #32
 8004378:	d140      	bne.n	80043fc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d139      	bne.n	80043fc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80043aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80043ae:	d11d      	bne.n	80043ec <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d119      	bne.n	80043ec <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0220 	bic.w	r2, r2, #32
 80043c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f87c 	bl	80044ea <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0212 	mvn.w	r2, #18
 80043fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d14f      	bne.n	80044aa <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b04      	cmp	r3, #4
 8004416:	d148      	bne.n	80044aa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800443a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800443e:	d012      	beq.n	8004466 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800444a:	2b00      	cmp	r3, #0
 800444c:	d125      	bne.n	800449a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004458:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800445c:	d11d      	bne.n	800449a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004462:	2b00      	cmp	r3, #0
 8004464:	d119      	bne.n	800449a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004474:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	f043 0201 	orr.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa80 	bl	80049a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 020c 	mvn.w	r2, #12
 80044a8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d114      	bne.n	80044e2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10d      	bne.n	80044e2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f007 faa6 	bl	800ba24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0201 	mvn.w	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x20>
 800453c:	2302      	movs	r3, #2
 800453e:	e0dc      	b.n	80046fa <HAL_ADC_ConfigChannel+0x1da>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b06      	cmp	r3, #6
 800454e:	d81c      	bhi.n	800458a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	3b05      	subs	r3, #5
 8004562:	221f      	movs	r2, #31
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	4019      	ands	r1, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3b05      	subs	r3, #5
 800457c:	fa00 f203 	lsl.w	r2, r0, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	635a      	str	r2, [r3, #52]	; 0x34
 8004588:	e03c      	b.n	8004604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d81c      	bhi.n	80045cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	3b23      	subs	r3, #35	; 0x23
 80045a4:	221f      	movs	r2, #31
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	4019      	ands	r1, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	3b23      	subs	r3, #35	; 0x23
 80045be:	fa00 f203 	lsl.w	r2, r0, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
 80045ca:	e01b      	b.n	8004604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	3b41      	subs	r3, #65	; 0x41
 80045de:	221f      	movs	r2, #31
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	4019      	ands	r1, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	3b41      	subs	r3, #65	; 0x41
 80045f8:	fa00 f203 	lsl.w	r2, r0, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b09      	cmp	r3, #9
 800460a:	d91c      	bls.n	8004646 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68d9      	ldr	r1, [r3, #12]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	3b1e      	subs	r3, #30
 800461e:	2207      	movs	r2, #7
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	4019      	ands	r1, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6898      	ldr	r0, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	3b1e      	subs	r3, #30
 8004638:	fa00 f203 	lsl.w	r2, r0, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e019      	b.n	800467a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6919      	ldr	r1, [r3, #16]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	2207      	movs	r2, #7
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	4019      	ands	r1, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6898      	ldr	r0, [r3, #8]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	fa00 f203 	lsl.w	r2, r0, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b10      	cmp	r3, #16
 8004680:	d003      	beq.n	800468a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004686:	2b11      	cmp	r3, #17
 8004688:	d132      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <HAL_ADC_ConfigChannel+0x1e4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d125      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d126      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80046b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d11a      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <HAL_ADC_ConfigChannel+0x1e8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <HAL_ADC_ConfigChannel+0x1ec>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	0c9a      	lsrs	r2, r3, #18
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046d0:	e002      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f9      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x1b2>
 80046de:	e007      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	40012400 	.word	0x40012400
 8004708:	20000018 	.word	0x20000018
 800470c:	431bde83 	.word	0x431bde83

08004710 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004728:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <HAL_ADC_AnalogWDGConfig+0xa4>)
 800472a:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_ADC_AnalogWDGConfig+0x2a>
 8004736:	2302      	movs	r3, #2
 8004738:	e035      	b.n	80047a6 <HAL_ADC_AnalogWDGConfig+0x96>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	7a1b      	ldrb	r3, [r3, #8]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e007      	b.n	800476c <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8004774:	4013      	ands	r3, r2
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	6811      	ldr	r1, [r2, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	6852      	ldr	r2, [r2, #4]
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	68d2      	ldr	r2, [r2, #12]
 8004790:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6912      	ldr	r2, [r2, #16]
 800479a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	00800200 	.word	0x00800200
 80047b4:	00400200 	.word	0x00400200
 80047b8:	ff3ffde0 	.word	0xff3ffde0

080047bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d039      	beq.n	800484e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047ea:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <ADC_Enable+0x9c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <ADC_Enable+0xa0>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	0c9b      	lsrs	r3, r3, #18
 80047f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80047f8:	e002      	b.n	8004800 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f9      	bne.n	80047fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004806:	f7ff fb2d 	bl	8003e64 <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800480c:	e018      	b.n	8004840 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800480e:	f7ff fb29 	bl	8003e64 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d911      	bls.n	8004840 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	f043 0210 	orr.w	r2, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e007      	b.n	8004850 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d1df      	bne.n	800480e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000018 	.word	0x20000018
 800485c:	431bde83 	.word	0x431bde83

08004860 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d127      	bne.n	80048ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800488a:	f7ff faeb 	bl	8003e64 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004890:	e014      	b.n	80048bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004892:	f7ff fae7 	bl	8003e64 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d90d      	bls.n	80048bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	f043 0210 	orr.w	r2, r3, #16
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f043 0201 	orr.w	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e007      	b.n	80048cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d0e3      	beq.n	8004892 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d127      	bne.n	800493e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004904:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004908:	d115      	bne.n	8004936 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800490e:	2b00      	cmp	r3, #0
 8004910:	d111      	bne.n	8004936 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	f043 0201 	orr.w	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff fdd7 	bl	80044ea <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800493c:	e004      	b.n	8004948 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff fdcc 	bl	80044fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	f043 0204 	orr.w	r2, r3, #4
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff fdbb 	bl	800450e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
	...

080049b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <__NVIC_SetPriorityGrouping+0x44>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049d0:	4013      	ands	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049e6:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <__NVIC_SetPriorityGrouping+0x44>)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	60d3      	str	r3, [r2, #12]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <__NVIC_GetPriorityGrouping+0x18>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	f003 0307 	and.w	r3, r3, #7
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	db0b      	blt.n	8004a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4906      	ldr	r1, [pc, #24]	; (8004a4c <__NVIC_EnableIRQ+0x34>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2001      	movs	r0, #1
 8004a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	e000e100 	.word	0xe000e100

08004a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf28      	it	cs
 8004ac2:	2304      	movcs	r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d902      	bls.n	8004ad4 <NVIC_EncodePriority+0x30>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3b03      	subs	r3, #3
 8004ad2:	e000      	b.n	8004ad6 <NVIC_EncodePriority+0x32>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aec:	f04f 31ff 	mov.w	r1, #4294967295
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4313      	orrs	r3, r2
         );
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff4f 	bl	80049b4 <__NVIC_SetPriorityGrouping>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b30:	f7ff ff64 	bl	80049fc <__NVIC_GetPriorityGrouping>
 8004b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff ffb2 	bl	8004aa4 <NVIC_EncodePriority>
 8004b40:	4602      	mov	r2, r0
 8004b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff81 	bl	8004a50 <__NVIC_SetPriority>
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff57 	bl	8004a18 <__NVIC_EnableIRQ>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e059      	b.n	8004c3e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_DMA_Init+0xd4>)
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d80f      	bhi.n	8004bb6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_DMA_Init+0xd8>)
 8004b9e:	4413      	add	r3, r2
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <HAL_DMA_Init+0xdc>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <HAL_DMA_Init+0xe0>)
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bb4:	e00e      	b.n	8004bd4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <HAL_DMA_Init+0xe4>)
 8004bbe:	4413      	add	r3, r2
 8004bc0:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <HAL_DMA_Init+0xdc>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <HAL_DMA_Init+0xe8>)
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	40020407 	.word	0x40020407
 8004c4c:	bffdfff8 	.word	0xbffdfff8
 8004c50:	cccccccd 	.word	0xcccccccd
 8004c54:	40020000 	.word	0x40020000
 8004c58:	bffdfbf8 	.word	0xbffdfbf8
 8004c5c:	40020400 	.word	0x40020400

08004c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_DMA_Start_IT+0x20>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e04a      	b.n	8004d16 <HAL_DMA_Start_IT+0xb6>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d13a      	bne.n	8004d08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fb76 	bl	80053a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 020e 	orr.w	r2, r2, #14
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e00f      	b.n	8004cf6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0204 	bic.w	r2, r2, #4
 8004ce4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 020a 	orr.w	r2, r2, #10
 8004cf4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e005      	b.n	8004d14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d005      	beq.n	8004d42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e0d6      	b.n	8004ef0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 020e 	bic.w	r2, r2, #14
 8004d50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b64      	ldr	r3, [pc, #400]	; (8004efc <HAL_DMA_Abort_IT+0x1dc>)
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d958      	bls.n	8004e20 <HAL_DMA_Abort_IT+0x100>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a63      	ldr	r2, [pc, #396]	; (8004f00 <HAL_DMA_Abort_IT+0x1e0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04f      	beq.n	8004e18 <HAL_DMA_Abort_IT+0xf8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a61      	ldr	r2, [pc, #388]	; (8004f04 <HAL_DMA_Abort_IT+0x1e4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d048      	beq.n	8004e14 <HAL_DMA_Abort_IT+0xf4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a60      	ldr	r2, [pc, #384]	; (8004f08 <HAL_DMA_Abort_IT+0x1e8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <HAL_DMA_Abort_IT+0xee>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5e      	ldr	r2, [pc, #376]	; (8004f0c <HAL_DMA_Abort_IT+0x1ec>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d038      	beq.n	8004e08 <HAL_DMA_Abort_IT+0xe8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5d      	ldr	r2, [pc, #372]	; (8004f10 <HAL_DMA_Abort_IT+0x1f0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d030      	beq.n	8004e02 <HAL_DMA_Abort_IT+0xe2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5b      	ldr	r2, [pc, #364]	; (8004f14 <HAL_DMA_Abort_IT+0x1f4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d028      	beq.n	8004dfc <HAL_DMA_Abort_IT+0xdc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a53      	ldr	r2, [pc, #332]	; (8004efc <HAL_DMA_Abort_IT+0x1dc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d020      	beq.n	8004df6 <HAL_DMA_Abort_IT+0xd6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <HAL_DMA_Abort_IT+0x1f8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d019      	beq.n	8004df2 <HAL_DMA_Abort_IT+0xd2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_DMA_Abort_IT+0x1fc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d012      	beq.n	8004dee <HAL_DMA_Abort_IT+0xce>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a54      	ldr	r2, [pc, #336]	; (8004f20 <HAL_DMA_Abort_IT+0x200>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00a      	beq.n	8004de8 <HAL_DMA_Abort_IT+0xc8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a53      	ldr	r2, [pc, #332]	; (8004f24 <HAL_DMA_Abort_IT+0x204>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d102      	bne.n	8004de2 <HAL_DMA_Abort_IT+0xc2>
 8004ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de0:	e01b      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de6:	e018      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dec:	e015      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004dee:	2310      	movs	r3, #16
 8004df0:	e013      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e011      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfa:	e00e      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004dfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e00:	e00b      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e06:	e008      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e0c:	e005      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e12:	e002      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004e14:	2310      	movs	r3, #16
 8004e16:	e000      	b.n	8004e1a <HAL_DMA_Abort_IT+0xfa>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4a43      	ldr	r2, [pc, #268]	; (8004f28 <HAL_DMA_Abort_IT+0x208>)
 8004e1c:	6053      	str	r3, [r2, #4]
 8004e1e:	e057      	b.n	8004ed0 <HAL_DMA_Abort_IT+0x1b0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a36      	ldr	r2, [pc, #216]	; (8004f00 <HAL_DMA_Abort_IT+0x1e0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04f      	beq.n	8004eca <HAL_DMA_Abort_IT+0x1aa>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a35      	ldr	r2, [pc, #212]	; (8004f04 <HAL_DMA_Abort_IT+0x1e4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d048      	beq.n	8004ec6 <HAL_DMA_Abort_IT+0x1a6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a33      	ldr	r2, [pc, #204]	; (8004f08 <HAL_DMA_Abort_IT+0x1e8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0x1a0>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a32      	ldr	r2, [pc, #200]	; (8004f0c <HAL_DMA_Abort_IT+0x1ec>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d038      	beq.n	8004eba <HAL_DMA_Abort_IT+0x19a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <HAL_DMA_Abort_IT+0x1f0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d030      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0x194>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	; (8004f14 <HAL_DMA_Abort_IT+0x1f4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d028      	beq.n	8004eae <HAL_DMA_Abort_IT+0x18e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a26      	ldr	r2, [pc, #152]	; (8004efc <HAL_DMA_Abort_IT+0x1dc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d020      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0x188>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <HAL_DMA_Abort_IT+0x1f8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d019      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x184>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <HAL_DMA_Abort_IT+0x1fc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d012      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0x180>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <HAL_DMA_Abort_IT+0x200>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00a      	beq.n	8004e9a <HAL_DMA_Abort_IT+0x17a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <HAL_DMA_Abort_IT+0x204>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d102      	bne.n	8004e94 <HAL_DMA_Abort_IT+0x174>
 8004e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e92:	e01b      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e98:	e018      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e9e:	e015      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	e013      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e011      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eac:	e00e      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004eae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eb2:	e00b      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eb8:	e008      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebe:	e005      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ec4:	e002      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	e000      	b.n	8004ecc <HAL_DMA_Abort_IT+0x1ac>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_DMA_Abort_IT+0x20c>)
 8004ece:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
    } 
  }
  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40020080 	.word	0x40020080
 8004f00:	40020008 	.word	0x40020008
 8004f04:	4002001c 	.word	0x4002001c
 8004f08:	40020030 	.word	0x40020030
 8004f0c:	40020044 	.word	0x40020044
 8004f10:	40020058 	.word	0x40020058
 8004f14:	4002006c 	.word	0x4002006c
 8004f18:	40020408 	.word	0x40020408
 8004f1c:	4002041c 	.word	0x4002041c
 8004f20:	40020430 	.word	0x40020430
 8004f24:	40020444 	.word	0x40020444
 8004f28:	40020400 	.word	0x40020400
 8004f2c:	40020000 	.word	0x40020000

08004f30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80d6 	beq.w	8005106 <HAL_DMA_IRQHandler+0x1d6>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80d0 	beq.w	8005106 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b9b      	ldr	r3, [pc, #620]	; (80051f8 <HAL_DMA_IRQHandler+0x2c8>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d958      	bls.n	8005042 <HAL_DMA_IRQHandler+0x112>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a99      	ldr	r2, [pc, #612]	; (80051fc <HAL_DMA_IRQHandler+0x2cc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04f      	beq.n	800503a <HAL_DMA_IRQHandler+0x10a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a98      	ldr	r2, [pc, #608]	; (8005200 <HAL_DMA_IRQHandler+0x2d0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d048      	beq.n	8005036 <HAL_DMA_IRQHandler+0x106>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a96      	ldr	r2, [pc, #600]	; (8005204 <HAL_DMA_IRQHandler+0x2d4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d040      	beq.n	8005030 <HAL_DMA_IRQHandler+0x100>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a95      	ldr	r2, [pc, #596]	; (8005208 <HAL_DMA_IRQHandler+0x2d8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d038      	beq.n	800502a <HAL_DMA_IRQHandler+0xfa>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a93      	ldr	r2, [pc, #588]	; (800520c <HAL_DMA_IRQHandler+0x2dc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d030      	beq.n	8005024 <HAL_DMA_IRQHandler+0xf4>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a92      	ldr	r2, [pc, #584]	; (8005210 <HAL_DMA_IRQHandler+0x2e0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d028      	beq.n	800501e <HAL_DMA_IRQHandler+0xee>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a89      	ldr	r2, [pc, #548]	; (80051f8 <HAL_DMA_IRQHandler+0x2c8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d020      	beq.n	8005018 <HAL_DMA_IRQHandler+0xe8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a8e      	ldr	r2, [pc, #568]	; (8005214 <HAL_DMA_IRQHandler+0x2e4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d019      	beq.n	8005014 <HAL_DMA_IRQHandler+0xe4>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a8c      	ldr	r2, [pc, #560]	; (8005218 <HAL_DMA_IRQHandler+0x2e8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d012      	beq.n	8005010 <HAL_DMA_IRQHandler+0xe0>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a8b      	ldr	r2, [pc, #556]	; (800521c <HAL_DMA_IRQHandler+0x2ec>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00a      	beq.n	800500a <HAL_DMA_IRQHandler+0xda>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a89      	ldr	r2, [pc, #548]	; (8005220 <HAL_DMA_IRQHandler+0x2f0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d102      	bne.n	8005004 <HAL_DMA_IRQHandler+0xd4>
 8004ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005002:	e01b      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005008:	e018      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 800500a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500e:	e015      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005010:	2340      	movs	r3, #64	; 0x40
 8005012:	e013      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005014:	2304      	movs	r3, #4
 8005016:	e011      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005018:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800501c:	e00e      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 800501e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005022:	e00b      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005024:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005028:	e008      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 800502a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800502e:	e005      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005034:	e002      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	e000      	b.n	800503c <HAL_DMA_IRQHandler+0x10c>
 800503a:	2304      	movs	r3, #4
 800503c:	4a79      	ldr	r2, [pc, #484]	; (8005224 <HAL_DMA_IRQHandler+0x2f4>)
 800503e:	6053      	str	r3, [r2, #4]
 8005040:	e057      	b.n	80050f2 <HAL_DMA_IRQHandler+0x1c2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6d      	ldr	r2, [pc, #436]	; (80051fc <HAL_DMA_IRQHandler+0x2cc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d04f      	beq.n	80050ec <HAL_DMA_IRQHandler+0x1bc>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a6b      	ldr	r2, [pc, #428]	; (8005200 <HAL_DMA_IRQHandler+0x2d0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d048      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x1b8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6a      	ldr	r2, [pc, #424]	; (8005204 <HAL_DMA_IRQHandler+0x2d4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d040      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x1b2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a68      	ldr	r2, [pc, #416]	; (8005208 <HAL_DMA_IRQHandler+0x2d8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d038      	beq.n	80050dc <HAL_DMA_IRQHandler+0x1ac>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a67      	ldr	r2, [pc, #412]	; (800520c <HAL_DMA_IRQHandler+0x2dc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d030      	beq.n	80050d6 <HAL_DMA_IRQHandler+0x1a6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a65      	ldr	r2, [pc, #404]	; (8005210 <HAL_DMA_IRQHandler+0x2e0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d028      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x1a0>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5d      	ldr	r2, [pc, #372]	; (80051f8 <HAL_DMA_IRQHandler+0x2c8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d020      	beq.n	80050ca <HAL_DMA_IRQHandler+0x19a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a61      	ldr	r2, [pc, #388]	; (8005214 <HAL_DMA_IRQHandler+0x2e4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d019      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x196>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a60      	ldr	r2, [pc, #384]	; (8005218 <HAL_DMA_IRQHandler+0x2e8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d012      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x192>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5e      	ldr	r2, [pc, #376]	; (800521c <HAL_DMA_IRQHandler+0x2ec>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00a      	beq.n	80050bc <HAL_DMA_IRQHandler+0x18c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5d      	ldr	r2, [pc, #372]	; (8005220 <HAL_DMA_IRQHandler+0x2f0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d102      	bne.n	80050b6 <HAL_DMA_IRQHandler+0x186>
 80050b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050b4:	e01b      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050ba:	e018      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c0:	e015      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050c2:	2340      	movs	r3, #64	; 0x40
 80050c4:	e013      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050c6:	2304      	movs	r3, #4
 80050c8:	e011      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050ce:	e00e      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050d4:	e00b      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050da:	e008      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050e0:	e005      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e6:	e002      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	e000      	b.n	80050ee <HAL_DMA_IRQHandler+0x1be>
 80050ec:	2304      	movs	r3, #4
 80050ee:	4a4e      	ldr	r2, [pc, #312]	; (8005228 <HAL_DMA_IRQHandler+0x2f8>)
 80050f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8136 	beq.w	8005368 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005104:	e130      	b.n	8005368 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2202      	movs	r2, #2
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80f8 	beq.w	8005308 <HAL_DMA_IRQHandler+0x3d8>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80f2 	beq.w	8005308 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 020a 	bic.w	r2, r2, #10
 8005140:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_DMA_IRQHandler+0x2c8>)
 8005152:	429a      	cmp	r2, r3
 8005154:	d973      	bls.n	800523e <HAL_DMA_IRQHandler+0x30e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a28      	ldr	r2, [pc, #160]	; (80051fc <HAL_DMA_IRQHandler+0x2cc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d06a      	beq.n	8005236 <HAL_DMA_IRQHandler+0x306>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a26      	ldr	r2, [pc, #152]	; (8005200 <HAL_DMA_IRQHandler+0x2d0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d063      	beq.n	8005232 <HAL_DMA_IRQHandler+0x302>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a25      	ldr	r2, [pc, #148]	; (8005204 <HAL_DMA_IRQHandler+0x2d4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d05b      	beq.n	800522c <HAL_DMA_IRQHandler+0x2fc>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a23      	ldr	r2, [pc, #140]	; (8005208 <HAL_DMA_IRQHandler+0x2d8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d038      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x2c0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_DMA_IRQHandler+0x2dc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d030      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ba>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a20      	ldr	r2, [pc, #128]	; (8005210 <HAL_DMA_IRQHandler+0x2e0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d028      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x2b4>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_DMA_IRQHandler+0x2c8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d020      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ae>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <HAL_DMA_IRQHandler+0x2e4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d019      	beq.n	80051da <HAL_DMA_IRQHandler+0x2aa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_DMA_IRQHandler+0x2e8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d012      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2a6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <HAL_DMA_IRQHandler+0x2ec>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00a      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x2a0>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_DMA_IRQHandler+0x2f0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d102      	bne.n	80051ca <HAL_DMA_IRQHandler+0x29a>
 80051c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051c8:	e036      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ce:	e033      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d4:	e030      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051d6:	2320      	movs	r3, #32
 80051d8:	e02e      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051da:	2302      	movs	r3, #2
 80051dc:	e02c      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051e2:	e029      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051e8:	e026      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ee:	e023      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051f4:	e020      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 80051f6:	bf00      	nop
 80051f8:	40020080 	.word	0x40020080
 80051fc:	40020008 	.word	0x40020008
 8005200:	4002001c 	.word	0x4002001c
 8005204:	40020030 	.word	0x40020030
 8005208:	40020044 	.word	0x40020044
 800520c:	40020058 	.word	0x40020058
 8005210:	4002006c 	.word	0x4002006c
 8005214:	40020408 	.word	0x40020408
 8005218:	4002041c 	.word	0x4002041c
 800521c:	40020430 	.word	0x40020430
 8005220:	40020444 	.word	0x40020444
 8005224:	40020400 	.word	0x40020400
 8005228:	40020000 	.word	0x40020000
 800522c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005230:	e002      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 8005232:	2320      	movs	r3, #32
 8005234:	e000      	b.n	8005238 <HAL_DMA_IRQHandler+0x308>
 8005236:	2302      	movs	r3, #2
 8005238:	4a4e      	ldr	r2, [pc, #312]	; (8005374 <HAL_DMA_IRQHandler+0x444>)
 800523a:	6053      	str	r3, [r2, #4]
 800523c:	e057      	b.n	80052ee <HAL_DMA_IRQHandler+0x3be>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4d      	ldr	r2, [pc, #308]	; (8005378 <HAL_DMA_IRQHandler+0x448>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04f      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x3b8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a4b      	ldr	r2, [pc, #300]	; (800537c <HAL_DMA_IRQHandler+0x44c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d048      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x3b4>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a4a      	ldr	r2, [pc, #296]	; (8005380 <HAL_DMA_IRQHandler+0x450>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_IRQHandler+0x3ae>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a48      	ldr	r2, [pc, #288]	; (8005384 <HAL_DMA_IRQHandler+0x454>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d038      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x3a8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a47      	ldr	r2, [pc, #284]	; (8005388 <HAL_DMA_IRQHandler+0x458>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d030      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3a2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a45      	ldr	r2, [pc, #276]	; (800538c <HAL_DMA_IRQHandler+0x45c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d028      	beq.n	80052cc <HAL_DMA_IRQHandler+0x39c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a44      	ldr	r2, [pc, #272]	; (8005390 <HAL_DMA_IRQHandler+0x460>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d020      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x396>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a42      	ldr	r2, [pc, #264]	; (8005394 <HAL_DMA_IRQHandler+0x464>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d019      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x392>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a41      	ldr	r2, [pc, #260]	; (8005398 <HAL_DMA_IRQHandler+0x468>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d012      	beq.n	80052be <HAL_DMA_IRQHandler+0x38e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3f      	ldr	r2, [pc, #252]	; (800539c <HAL_DMA_IRQHandler+0x46c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00a      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x388>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3e      	ldr	r2, [pc, #248]	; (80053a0 <HAL_DMA_IRQHandler+0x470>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d102      	bne.n	80052b2 <HAL_DMA_IRQHandler+0x382>
 80052ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b0:	e01b      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052b6:	e018      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052bc:	e015      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052be:	2320      	movs	r3, #32
 80052c0:	e013      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e011      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052ca:	e00e      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052d0:	e00b      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052d6:	e008      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052dc:	e005      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e2:	e002      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052e4:	2320      	movs	r3, #32
 80052e6:	e000      	b.n	80052ea <HAL_DMA_IRQHandler+0x3ba>
 80052e8:	2302      	movs	r3, #2
 80052ea:	4a2e      	ldr	r2, [pc, #184]	; (80053a4 <HAL_DMA_IRQHandler+0x474>)
 80052ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d034      	beq.n	8005368 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005306:	e02f      	b.n	8005368 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2208      	movs	r2, #8
 800530e:	409a      	lsls	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d028      	beq.n	800536a <HAL_DMA_IRQHandler+0x43a>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d023      	beq.n	800536a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 020e 	bic.w	r2, r2, #14
 8005330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f202 	lsl.w	r2, r1, r2
 8005340:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
    }
  }
  return;
 8005368:	bf00      	nop
 800536a:	bf00      	nop
}
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40020400 	.word	0x40020400
 8005378:	40020008 	.word	0x40020008
 800537c:	4002001c 	.word	0x4002001c
 8005380:	40020030 	.word	0x40020030
 8005384:	40020044 	.word	0x40020044
 8005388:	40020058 	.word	0x40020058
 800538c:	4002006c 	.word	0x4002006c
 8005390:	40020080 	.word	0x40020080
 8005394:	40020408 	.word	0x40020408
 8005398:	4002041c 	.word	0x4002041c
 800539c:	40020430 	.word	0x40020430
 80053a0:	40020444 	.word	0x40020444
 80053a4:	40020000 	.word	0x40020000

080053a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	2101      	movs	r1, #1
 80053c0:	fa01 f202 	lsl.w	r2, r1, r2
 80053c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d108      	bne.n	80053e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053e6:	e007      	b.n	80053f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
	...

08005404 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800541e:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <HAL_FLASH_Program+0xd8>)
 8005420:	7e1b      	ldrb	r3, [r3, #24]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_FLASH_Program+0x26>
 8005426:	2302      	movs	r3, #2
 8005428:	e054      	b.n	80054d4 <HAL_FLASH_Program+0xd0>
 800542a:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <HAL_FLASH_Program+0xd8>)
 800542c:	2201      	movs	r2, #1
 800542e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005434:	f000 f8a8 	bl	8005588 <FLASH_WaitForLastOperation>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d144      	bne.n	80054cc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d102      	bne.n	800544e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005448:	2301      	movs	r3, #1
 800544a:	757b      	strb	r3, [r7, #21]
 800544c:	e007      	b.n	800545e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d102      	bne.n	800545a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005454:	2302      	movs	r3, #2
 8005456:	757b      	strb	r3, [r7, #21]
 8005458:	e001      	b.n	800545e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800545a:	2304      	movs	r3, #4
 800545c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800545e:	2300      	movs	r3, #0
 8005460:	75bb      	strb	r3, [r7, #22]
 8005462:	e02d      	b.n	80054c0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005464:	7dbb      	ldrb	r3, [r7, #22]
 8005466:	005a      	lsls	r2, r3, #1
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	eb02 0c03 	add.w	ip, r2, r3
 800546e:	7dbb      	ldrb	r3, [r7, #22]
 8005470:	0119      	lsls	r1, r3, #4
 8005472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005476:	f1c1 0620 	rsb	r6, r1, #32
 800547a:	f1a1 0020 	sub.w	r0, r1, #32
 800547e:	fa22 f401 	lsr.w	r4, r2, r1
 8005482:	fa03 f606 	lsl.w	r6, r3, r6
 8005486:	4334      	orrs	r4, r6
 8005488:	fa23 f000 	lsr.w	r0, r3, r0
 800548c:	4304      	orrs	r4, r0
 800548e:	fa23 f501 	lsr.w	r5, r3, r1
 8005492:	b2a3      	uxth	r3, r4
 8005494:	4619      	mov	r1, r3
 8005496:	4660      	mov	r0, ip
 8005498:	f000 f85a 	bl	8005550 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800549c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054a0:	f000 f872 	bl	8005588 <FLASH_WaitForLastOperation>
 80054a4:	4603      	mov	r3, r0
 80054a6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80054a8:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <HAL_FLASH_Program+0xdc>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <HAL_FLASH_Program+0xdc>)
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80054ba:	7dbb      	ldrb	r3, [r7, #22]
 80054bc:	3301      	adds	r3, #1
 80054be:	75bb      	strb	r3, [r7, #22]
 80054c0:	7dba      	ldrb	r2, [r7, #22]
 80054c2:	7d7b      	ldrb	r3, [r7, #21]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3cd      	bcc.n	8005464 <HAL_FLASH_Program+0x60>
 80054c8:	e000      	b.n	80054cc <HAL_FLASH_Program+0xc8>
      {
        break;
 80054ca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054cc:	4b03      	ldr	r3, [pc, #12]	; (80054dc <HAL_FLASH_Program+0xd8>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	761a      	strb	r2, [r3, #24]

  return status;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054dc:	20009f90 	.word	0x20009f90
 80054e0:	40022000 	.word	0x40022000

080054e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_FLASH_Unlock+0x40>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_FLASH_Unlock+0x40>)
 80054fc:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <HAL_FLASH_Unlock+0x44>)
 80054fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_FLASH_Unlock+0x40>)
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <HAL_FLASH_Unlock+0x48>)
 8005504:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <HAL_FLASH_Unlock+0x40>)
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005516:	79fb      	ldrb	r3, [r7, #7]
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40022000 	.word	0x40022000
 8005528:	45670123 	.word	0x45670123
 800552c:	cdef89ab 	.word	0xcdef89ab

08005530 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_FLASH_Lock+0x1c>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <HAL_FLASH_Lock+0x1c>)
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40022000 	.word	0x40022000

08005550 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <FLASH_Program_HalfWord+0x30>)
 800555e:	2200      	movs	r2, #0
 8005560:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <FLASH_Program_HalfWord+0x34>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <FLASH_Program_HalfWord+0x34>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	801a      	strh	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20009f90 	.word	0x20009f90
 8005584:	40022000 	.word	0x40022000

08005588 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7fe fc68 	bl	8003e64 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005596:	e010      	b.n	80055ba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d00c      	beq.n	80055ba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <FLASH_WaitForLastOperation+0x2e>
 80055a6:	f7fe fc5d 	bl	8003e64 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d201      	bcs.n	80055ba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e025      	b.n	8005606 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <FLASH_WaitForLastOperation+0x88>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e8      	bne.n	8005598 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <FLASH_WaitForLastOperation+0x88>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <FLASH_WaitForLastOperation+0x88>)
 80055d4:	2220      	movs	r2, #32
 80055d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <FLASH_WaitForLastOperation+0x88>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80055e4:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <FLASH_WaitForLastOperation+0x88>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <FLASH_WaitForLastOperation+0x88>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80055fc:	f000 f80a 	bl	8005614 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40022000 	.word	0x40022000

08005614 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800561e:	4b23      	ldr	r3, [pc, #140]	; (80056ac <FLASH_SetErrorCode+0x98>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800562a:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <FLASH_SetErrorCode+0x9c>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f043 0302 	orr.w	r3, r3, #2
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <FLASH_SetErrorCode+0x9c>)
 8005634:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f043 0310 	orr.w	r3, r3, #16
 800563c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800563e:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <FLASH_SetErrorCode+0x98>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <FLASH_SetErrorCode+0x9c>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <FLASH_SetErrorCode+0x9c>)
 8005654:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f043 0304 	orr.w	r3, r3, #4
 800565c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <FLASH_SetErrorCode+0x98>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <FLASH_SetErrorCode+0x9c>)
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f043 0304 	orr.w	r3, r3, #4
 8005672:	4a0f      	ldr	r2, [pc, #60]	; (80056b0 <FLASH_SetErrorCode+0x9c>)
 8005674:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <FLASH_SetErrorCode+0x98>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <FLASH_SetErrorCode+0x98>)
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f240 1201 	movw	r2, #257	; 0x101
 8005688:	4293      	cmp	r3, r2
 800568a:	d106      	bne.n	800569a <FLASH_SetErrorCode+0x86>
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <FLASH_SetErrorCode+0x98>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4a06      	ldr	r2, [pc, #24]	; (80056ac <FLASH_SetErrorCode+0x98>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	61d3      	str	r3, [r2, #28]
}  
 8005698:	e002      	b.n	80056a0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800569a:	4a04      	ldr	r2, [pc, #16]	; (80056ac <FLASH_SetErrorCode+0x98>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60d3      	str	r3, [r2, #12]
}  
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40022000 	.word	0x40022000
 80056b0:	20009f90 	.word	0x20009f90

080056b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <FLASH_PageErase+0x38>)
 80056be:	2200      	movs	r2, #0
 80056c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <FLASH_PageErase+0x3c>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <FLASH_PageErase+0x3c>)
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80056ce:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <FLASH_PageErase+0x3c>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <FLASH_PageErase+0x3c>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	4a05      	ldr	r2, [pc, #20]	; (80056f0 <FLASH_PageErase+0x3c>)
 80056da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20009f90 	.word	0x20009f90
 80056f0:	40022000 	.word	0x40022000

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005706:	e133      	b.n	8005970 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005708:	2201      	movs	r2, #1
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	429a      	cmp	r2, r3
 8005722:	f040 8122 	bne.w	800596a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b12      	cmp	r3, #18
 800572c:	d034      	beq.n	8005798 <HAL_GPIO_Init+0xa4>
 800572e:	2b12      	cmp	r3, #18
 8005730:	d80d      	bhi.n	800574e <HAL_GPIO_Init+0x5a>
 8005732:	2b02      	cmp	r3, #2
 8005734:	d02b      	beq.n	800578e <HAL_GPIO_Init+0x9a>
 8005736:	2b02      	cmp	r3, #2
 8005738:	d804      	bhi.n	8005744 <HAL_GPIO_Init+0x50>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d031      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
 800573e:	2b01      	cmp	r3, #1
 8005740:	d01c      	beq.n	800577c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005742:	e048      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005744:	2b03      	cmp	r3, #3
 8005746:	d043      	beq.n	80057d0 <HAL_GPIO_Init+0xdc>
 8005748:	2b11      	cmp	r3, #17
 800574a:	d01b      	beq.n	8005784 <HAL_GPIO_Init+0x90>
          break;
 800574c:	e043      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800574e:	4a8f      	ldr	r2, [pc, #572]	; (800598c <HAL_GPIO_Init+0x298>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d026      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
 8005754:	4a8d      	ldr	r2, [pc, #564]	; (800598c <HAL_GPIO_Init+0x298>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d806      	bhi.n	8005768 <HAL_GPIO_Init+0x74>
 800575a:	4a8d      	ldr	r2, [pc, #564]	; (8005990 <HAL_GPIO_Init+0x29c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d020      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
 8005760:	4a8c      	ldr	r2, [pc, #560]	; (8005994 <HAL_GPIO_Init+0x2a0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01d      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
          break;
 8005766:	e036      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005768:	4a8b      	ldr	r2, [pc, #556]	; (8005998 <HAL_GPIO_Init+0x2a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d019      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
 800576e:	4a8b      	ldr	r2, [pc, #556]	; (800599c <HAL_GPIO_Init+0x2a8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d016      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
 8005774:	4a8a      	ldr	r2, [pc, #552]	; (80059a0 <HAL_GPIO_Init+0x2ac>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <HAL_GPIO_Init+0xae>
          break;
 800577a:	e02c      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	623b      	str	r3, [r7, #32]
          break;
 8005782:	e028      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	3304      	adds	r3, #4
 800578a:	623b      	str	r3, [r7, #32]
          break;
 800578c:	e023      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	3308      	adds	r3, #8
 8005794:	623b      	str	r3, [r7, #32]
          break;
 8005796:	e01e      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	330c      	adds	r3, #12
 800579e:	623b      	str	r3, [r7, #32]
          break;
 80057a0:	e019      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057aa:	2304      	movs	r3, #4
 80057ac:	623b      	str	r3, [r7, #32]
          break;
 80057ae:	e012      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d105      	bne.n	80057c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057b8:	2308      	movs	r3, #8
 80057ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	611a      	str	r2, [r3, #16]
          break;
 80057c2:	e008      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057c4:	2308      	movs	r3, #8
 80057c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	615a      	str	r2, [r3, #20]
          break;
 80057ce:	e002      	b.n	80057d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057d0:	2300      	movs	r3, #0
 80057d2:	623b      	str	r3, [r7, #32]
          break;
 80057d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2bff      	cmp	r3, #255	; 0xff
 80057da:	d801      	bhi.n	80057e0 <HAL_GPIO_Init+0xec>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	e001      	b.n	80057e4 <HAL_GPIO_Init+0xf0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2bff      	cmp	r3, #255	; 0xff
 80057ea:	d802      	bhi.n	80057f2 <HAL_GPIO_Init+0xfe>
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	e002      	b.n	80057f8 <HAL_GPIO_Init+0x104>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	3b08      	subs	r3, #8
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	210f      	movs	r1, #15
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	401a      	ands	r2, r3
 800580a:	6a39      	ldr	r1, [r7, #32]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	431a      	orrs	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80a2 	beq.w	800596a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005826:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <HAL_GPIO_Init+0x2b0>)
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	4a5e      	ldr	r2, [pc, #376]	; (80059a4 <HAL_GPIO_Init+0x2b0>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6193      	str	r3, [r2, #24]
 8005832:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <HAL_GPIO_Init+0x2b0>)
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800583e:	4a5a      	ldr	r2, [pc, #360]	; (80059a8 <HAL_GPIO_Init+0x2b4>)
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	3302      	adds	r3, #2
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4013      	ands	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a51      	ldr	r2, [pc, #324]	; (80059ac <HAL_GPIO_Init+0x2b8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01f      	beq.n	80058aa <HAL_GPIO_Init+0x1b6>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a50      	ldr	r2, [pc, #320]	; (80059b0 <HAL_GPIO_Init+0x2bc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d019      	beq.n	80058a6 <HAL_GPIO_Init+0x1b2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4f      	ldr	r2, [pc, #316]	; (80059b4 <HAL_GPIO_Init+0x2c0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_GPIO_Init+0x1ae>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a4e      	ldr	r2, [pc, #312]	; (80059b8 <HAL_GPIO_Init+0x2c4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00d      	beq.n	800589e <HAL_GPIO_Init+0x1aa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a4d      	ldr	r2, [pc, #308]	; (80059bc <HAL_GPIO_Init+0x2c8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <HAL_GPIO_Init+0x1a6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a4c      	ldr	r2, [pc, #304]	; (80059c0 <HAL_GPIO_Init+0x2cc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_GPIO_Init+0x1a2>
 8005892:	2305      	movs	r3, #5
 8005894:	e00a      	b.n	80058ac <HAL_GPIO_Init+0x1b8>
 8005896:	2306      	movs	r3, #6
 8005898:	e008      	b.n	80058ac <HAL_GPIO_Init+0x1b8>
 800589a:	2304      	movs	r3, #4
 800589c:	e006      	b.n	80058ac <HAL_GPIO_Init+0x1b8>
 800589e:	2303      	movs	r3, #3
 80058a0:	e004      	b.n	80058ac <HAL_GPIO_Init+0x1b8>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e002      	b.n	80058ac <HAL_GPIO_Init+0x1b8>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <HAL_GPIO_Init+0x1b8>
 80058aa:	2300      	movs	r3, #0
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	f002 0203 	and.w	r2, r2, #3
 80058b2:	0092      	lsls	r2, r2, #2
 80058b4:	4093      	lsls	r3, r2
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80058bc:	493a      	ldr	r1, [pc, #232]	; (80059a8 <HAL_GPIO_Init+0x2b4>)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	3302      	adds	r3, #2
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	493a      	ldr	r1, [pc, #232]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]
 80058e2:	e006      	b.n	80058f2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80058e4:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	4935      	ldr	r1, [pc, #212]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	4930      	ldr	r1, [pc, #192]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
 800590a:	e006      	b.n	800591a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800590c:	4b2d      	ldr	r3, [pc, #180]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	43db      	mvns	r3, r3
 8005914:	492b      	ldr	r1, [pc, #172]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005916:	4013      	ands	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	4926      	ldr	r1, [pc, #152]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
 8005932:	e006      	b.n	8005942 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005934:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	43db      	mvns	r3, r3
 800593c:	4921      	ldr	r1, [pc, #132]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800593e:	4013      	ands	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	491c      	ldr	r1, [pc, #112]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	4313      	orrs	r3, r2
 8005958:	60cb      	str	r3, [r1, #12]
 800595a:	e006      	b.n	800596a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	43db      	mvns	r3, r3
 8005964:	4917      	ldr	r1, [pc, #92]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005966:	4013      	ands	r3, r2
 8005968:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	3301      	adds	r3, #1
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	fa22 f303 	lsr.w	r3, r2, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	f47f aec4 	bne.w	8005708 <HAL_GPIO_Init+0x14>
  }
}
 8005980:	bf00      	nop
 8005982:	372c      	adds	r7, #44	; 0x2c
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	10210000 	.word	0x10210000
 8005990:	10110000 	.word	0x10110000
 8005994:	10120000 	.word	0x10120000
 8005998:	10310000 	.word	0x10310000
 800599c:	10320000 	.word	0x10320000
 80059a0:	10220000 	.word	0x10220000
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40010800 	.word	0x40010800
 80059b0:	40010c00 	.word	0x40010c00
 80059b4:	40011000 	.word	0x40011000
 80059b8:	40011400 	.word	0x40011400
 80059bc:	40011800 	.word	0x40011800
 80059c0:	40011c00 	.word	0x40011c00
 80059c4:	40010400 	.word	0x40010400

080059c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e001      	b.n	80059ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	807b      	strh	r3, [r7, #2]
 8005a02:	4613      	mov	r3, r2
 8005a04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a06:	787b      	ldrb	r3, [r7, #1]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0c:	887a      	ldrh	r2, [r7, #2]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a12:	e003      	b.n	8005a1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	041a      	lsls	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	611a      	str	r2, [r3, #16]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d006      	beq.n	8005a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a3e:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fd fa15 	bl	8002e76 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40010400 	.word	0x40010400

08005a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e26c      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8087 	beq.w	8005b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a78:	4b92      	ldr	r3, [pc, #584]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d00c      	beq.n	8005a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a84:	4b8f      	ldr	r3, [pc, #572]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 030c 	and.w	r3, r3, #12
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d112      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x5e>
 8005a90:	4b8c      	ldr	r3, [pc, #560]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a9e:	4b89      	ldr	r3, [pc, #548]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d06c      	beq.n	8005b84 <HAL_RCC_OscConfig+0x12c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d168      	bne.n	8005b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e246      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abe:	d106      	bne.n	8005ace <HAL_RCC_OscConfig+0x76>
 8005ac0:	4b80      	ldr	r3, [pc, #512]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7f      	ldr	r2, [pc, #508]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e02e      	b.n	8005b2c <HAL_RCC_OscConfig+0xd4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCC_OscConfig+0x98>
 8005ad6:	4b7b      	ldr	r3, [pc, #492]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a7a      	ldr	r2, [pc, #488]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b78      	ldr	r3, [pc, #480]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a77      	ldr	r2, [pc, #476]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e01d      	b.n	8005b2c <HAL_RCC_OscConfig+0xd4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0xbc>
 8005afa:	4b72      	ldr	r3, [pc, #456]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a71      	ldr	r2, [pc, #452]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6e      	ldr	r2, [pc, #440]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e00b      	b.n	8005b2c <HAL_RCC_OscConfig+0xd4>
 8005b14:	4b6b      	ldr	r3, [pc, #428]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a6a      	ldr	r2, [pc, #424]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b68      	ldr	r3, [pc, #416]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a67      	ldr	r2, [pc, #412]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d013      	beq.n	8005b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fe f996 	bl	8003e64 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fe f992 	bl	8003e64 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	; 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e1fa      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	4b5d      	ldr	r3, [pc, #372]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0xe4>
 8005b5a:	e014      	b.n	8005b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5c:	f7fe f982 	bl	8003e64 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fe f97e 	bl	8003e64 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e1e6      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	4b53      	ldr	r3, [pc, #332]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x10c>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d063      	beq.n	8005c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b92:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b9e:	4b49      	ldr	r3, [pc, #292]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d11c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x18c>
 8005baa:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d116      	bne.n	8005be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb6:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_RCC_OscConfig+0x176>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e1ba      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bce:	4b3d      	ldr	r3, [pc, #244]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4939      	ldr	r1, [pc, #228]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	e03a      	b.n	8005c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d020      	beq.n	8005c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bec:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <HAL_RCC_OscConfig+0x270>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fe f937 	bl	8003e64 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bfa:	f7fe f933 	bl	8003e64 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e19b      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4927      	ldr	r1, [pc, #156]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]
 8005c2c:	e015      	b.n	8005c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <HAL_RCC_OscConfig+0x270>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fe f916 	bl	8003e64 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3c:	f7fe f912 	bl	8003e64 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e17a      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03a      	beq.n	8005cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d019      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c6e:	4b17      	ldr	r3, [pc, #92]	; (8005ccc <HAL_RCC_OscConfig+0x274>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c74:	f7fe f8f6 	bl	8003e64 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7c:	f7fe f8f2 	bl	8003e64 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e15a      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <HAL_RCC_OscConfig+0x26c>)
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f000 fb0a 	bl	80062b4 <RCC_Delay>
 8005ca0:	e01c      	b.n	8005cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <HAL_RCC_OscConfig+0x274>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca8:	f7fe f8dc 	bl	8003e64 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cae:	e00f      	b.n	8005cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb0:	f7fe f8d8 	bl	8003e64 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d908      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e140      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	42420000 	.word	0x42420000
 8005ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd0:	4b9e      	ldr	r3, [pc, #632]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e9      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80a6 	beq.w	8005e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cea:	2300      	movs	r3, #0
 8005cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cee:	4b97      	ldr	r3, [pc, #604]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10d      	bne.n	8005d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cfa:	4b94      	ldr	r3, [pc, #592]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4a93      	ldr	r2, [pc, #588]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	61d3      	str	r3, [r2, #28]
 8005d06:	4b91      	ldr	r3, [pc, #580]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d12:	2301      	movs	r3, #1
 8005d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d16:	4b8e      	ldr	r3, [pc, #568]	; (8005f50 <HAL_RCC_OscConfig+0x4f8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d118      	bne.n	8005d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d22:	4b8b      	ldr	r3, [pc, #556]	; (8005f50 <HAL_RCC_OscConfig+0x4f8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a8a      	ldr	r2, [pc, #552]	; (8005f50 <HAL_RCC_OscConfig+0x4f8>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d2e:	f7fe f899 	bl	8003e64 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d36:	f7fe f895 	bl	8003e64 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b64      	cmp	r3, #100	; 0x64
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e0fd      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d48:	4b81      	ldr	r3, [pc, #516]	; (8005f50 <HAL_RCC_OscConfig+0x4f8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d106      	bne.n	8005d6a <HAL_RCC_OscConfig+0x312>
 8005d5c:	4b7b      	ldr	r3, [pc, #492]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	4a7a      	ldr	r2, [pc, #488]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	6213      	str	r3, [r2, #32]
 8005d68:	e02d      	b.n	8005dc6 <HAL_RCC_OscConfig+0x36e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x334>
 8005d72:	4b76      	ldr	r3, [pc, #472]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a75      	ldr	r2, [pc, #468]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	6213      	str	r3, [r2, #32]
 8005d7e:	4b73      	ldr	r3, [pc, #460]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4a72      	ldr	r2, [pc, #456]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	6213      	str	r3, [r2, #32]
 8005d8a:	e01c      	b.n	8005dc6 <HAL_RCC_OscConfig+0x36e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b05      	cmp	r3, #5
 8005d92:	d10c      	bne.n	8005dae <HAL_RCC_OscConfig+0x356>
 8005d94:	4b6d      	ldr	r3, [pc, #436]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	4a6c      	ldr	r2, [pc, #432]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	6213      	str	r3, [r2, #32]
 8005da0:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4a69      	ldr	r2, [pc, #420]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	6213      	str	r3, [r2, #32]
 8005dac:	e00b      	b.n	8005dc6 <HAL_RCC_OscConfig+0x36e>
 8005dae:	4b67      	ldr	r3, [pc, #412]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4a66      	ldr	r2, [pc, #408]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	6213      	str	r3, [r2, #32]
 8005dba:	4b64      	ldr	r3, [pc, #400]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4a63      	ldr	r2, [pc, #396]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005dc0:	f023 0304 	bic.w	r3, r3, #4
 8005dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d015      	beq.n	8005dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dce:	f7fe f849 	bl	8003e64 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd4:	e00a      	b.n	8005dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd6:	f7fe f845 	bl	8003e64 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e0ab      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dec:	4b57      	ldr	r3, [pc, #348]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0ee      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x37e>
 8005df8:	e014      	b.n	8005e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfa:	f7fe f833 	bl	8003e64 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fe f82f 	bl	8003e64 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e095      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e18:	4b4c      	ldr	r3, [pc, #304]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ee      	bne.n	8005e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2a:	4b48      	ldr	r3, [pc, #288]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4a47      	ldr	r2, [pc, #284]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8081 	beq.w	8005f42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e40:	4b42      	ldr	r3, [pc, #264]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d061      	beq.n	8005f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d146      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e54:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <HAL_RCC_OscConfig+0x4fc>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5a:	f7fe f803 	bl	8003e64 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fd ffff 	bl	8003e64 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e067      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e74:	4b35      	ldr	r3, [pc, #212]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d108      	bne.n	8005e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e8a:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	492d      	ldr	r1, [pc, #180]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e9c:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a19      	ldr	r1, [r3, #32]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	430b      	orrs	r3, r1
 8005eae:	4927      	ldr	r1, [pc, #156]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb4:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <HAL_RCC_OscConfig+0x4fc>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fd ffd3 	bl	8003e64 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fd ffcf 	bl	8003e64 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e037      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ed4:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x46a>
 8005ee0:	e02f      	b.n	8005f42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee2:	4b1c      	ldr	r3, [pc, #112]	; (8005f54 <HAL_RCC_OscConfig+0x4fc>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fd ffbc 	bl	8003e64 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fd ffb8 	bl	8003e64 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e020      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x498>
 8005f0e:	e018      	b.n	8005f42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e013      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_RCC_OscConfig+0x4f4>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	40007000 	.word	0x40007000
 8005f54:	42420060 	.word	0x42420060

08005f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0d0      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b6a      	ldr	r3, [pc, #424]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d910      	bls.n	8005f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b67      	ldr	r3, [pc, #412]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 0207 	bic.w	r2, r3, #7
 8005f82:	4965      	ldr	r1, [pc, #404]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	4b63      	ldr	r3, [pc, #396]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0b8      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d020      	beq.n	8005fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fb4:	4b59      	ldr	r3, [pc, #356]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a58      	ldr	r2, [pc, #352]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fcc:	4b53      	ldr	r3, [pc, #332]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a52      	ldr	r2, [pc, #328]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8005fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd8:	4b50      	ldr	r3, [pc, #320]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	494d      	ldr	r1, [pc, #308]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d040      	beq.n	8006078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d107      	bne.n	800600e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffe:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d115      	bne.n	8006036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e07f      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d107      	bne.n	8006026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006016:	4b41      	ldr	r3, [pc, #260]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e073      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006026:	4b3d      	ldr	r3, [pc, #244]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e06b      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006036:	4b39      	ldr	r3, [pc, #228]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f023 0203 	bic.w	r2, r3, #3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4936      	ldr	r1, [pc, #216]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006048:	f7fd ff0c 	bl	8003e64 <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604e:	e00a      	b.n	8006066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006050:	f7fd ff08 	bl	8003e64 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	; 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e053      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006066:	4b2d      	ldr	r3, [pc, #180]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 020c 	and.w	r2, r3, #12
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	429a      	cmp	r2, r3
 8006076:	d1eb      	bne.n	8006050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006078:	4b27      	ldr	r3, [pc, #156]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d210      	bcs.n	80060a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 0207 	bic.w	r2, r3, #7
 800608e:	4922      	ldr	r1, [pc, #136]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006096:	4b20      	ldr	r3, [pc, #128]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d001      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e032      	b.n	800610e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b4:	4b19      	ldr	r3, [pc, #100]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4916      	ldr	r1, [pc, #88]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	490e      	ldr	r1, [pc, #56]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060e6:	f000 f821 	bl	800612c <HAL_RCC_GetSysClockFreq>
 80060ea:	4601      	mov	r1, r0
 80060ec:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <HAL_RCC_ClockConfig+0x1c8>)
 80060f8:	5cd3      	ldrb	r3, [r2, r3]
 80060fa:	fa21 f303 	lsr.w	r3, r1, r3
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <HAL_RCC_ClockConfig+0x1cc>)
 8006100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_RCC_ClockConfig+0x1d0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7fc ff2e 	bl	8002f68 <HAL_InitTick>

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40022000 	.word	0x40022000
 800611c:	40021000 	.word	0x40021000
 8006120:	0800f26c 	.word	0x0800f26c
 8006124:	20000018 	.word	0x20000018
 8006128:	2000001c 	.word	0x2000001c

0800612c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800612c:	b490      	push	{r4, r7}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006134:	1d3c      	adds	r4, r7, #4
 8006136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800613c:	4b28      	ldr	r3, [pc, #160]	; (80061e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006156:	4b23      	ldr	r3, [pc, #140]	; (80061e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 030c 	and.w	r3, r3, #12
 8006162:	2b04      	cmp	r3, #4
 8006164:	d002      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x40>
 8006166:	2b08      	cmp	r3, #8
 8006168:	d003      	beq.n	8006172 <HAL_RCC_GetSysClockFreq+0x46>
 800616a:	e02d      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800616c:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800616e:	623b      	str	r3, [r7, #32]
      break;
 8006170:	e02d      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	0c9b      	lsrs	r3, r3, #18
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800617e:	4413      	add	r3, r2
 8006180:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006184:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	0c5b      	lsrs	r3, r3, #17
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800619e:	4413      	add	r3, r2
 80061a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4a0f      	ldr	r2, [pc, #60]	; (80061e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061aa:	fb02 f203 	mul.w	r2, r2, r3
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
 80061b6:	e004      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4a0c      	ldr	r2, [pc, #48]	; (80061ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	623b      	str	r3, [r7, #32]
      break;
 80061c6:	e002      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061ca:	623b      	str	r3, [r7, #32]
      break;
 80061cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ce:	6a3b      	ldr	r3, [r7, #32]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc90      	pop	{r4, r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	0800f208 	.word	0x0800f208
 80061e0:	0800f218 	.word	0x0800f218
 80061e4:	40021000 	.word	0x40021000
 80061e8:	007a1200 	.word	0x007a1200
 80061ec:	003d0900 	.word	0x003d0900

080061f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f4:	4b02      	ldr	r3, [pc, #8]	; (8006200 <HAL_RCC_GetHCLKFreq+0x10>)
 80061f6:	681b      	ldr	r3, [r3, #0]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr
 8006200:	20000018 	.word	0x20000018

08006204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006208:	f7ff fff2 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 800620c:	4601      	mov	r1, r0
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4a03      	ldr	r2, [pc, #12]	; (8006228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40021000 	.word	0x40021000
 8006228:	0800f27c 	.word	0x0800f27c

0800622c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006230:	f7ff ffde 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 8006234:	4601      	mov	r1, r0
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	0adb      	lsrs	r3, r3, #11
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	4a03      	ldr	r2, [pc, #12]	; (8006250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006248:	4618      	mov	r0, r3
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40021000 	.word	0x40021000
 8006250:	0800f27c 	.word	0x0800f27c

08006254 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	220f      	movs	r2, #15
 8006262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <HAL_RCC_GetClockConfig+0x58>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 0203 	and.w	r2, r3, #3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_RCC_GetClockConfig+0x58>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_RCC_GetClockConfig+0x58>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006288:	4b08      	ldr	r3, [pc, #32]	; (80062ac <HAL_RCC_GetClockConfig+0x58>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	08db      	lsrs	r3, r3, #3
 800628e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0207 	and.w	r2, r3, #7
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr
 80062ac:	40021000 	.word	0x40021000
 80062b0:	40022000 	.word	0x40022000

080062b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <RCC_Delay+0x34>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <RCC_Delay+0x38>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	0a5b      	lsrs	r3, r3, #9
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062d0:	bf00      	nop
  }
  while (Delay --);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1e5a      	subs	r2, r3, #1
 80062d6:	60fa      	str	r2, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f9      	bne.n	80062d0 <RCC_Delay+0x1c>
}
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000018 	.word	0x20000018
 80062ec:	10624dd3 	.word	0x10624dd3

080062f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d07d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006310:	4b4f      	ldr	r3, [pc, #316]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4b4c      	ldr	r3, [pc, #304]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4a4b      	ldr	r2, [pc, #300]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006326:	61d3      	str	r3, [r2, #28]
 8006328:	4b49      	ldr	r3, [pc, #292]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006338:	4b46      	ldr	r3, [pc, #280]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d118      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006344:	4b43      	ldr	r3, [pc, #268]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a42      	ldr	r2, [pc, #264]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006350:	f7fd fd88 	bl	8003e64 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006356:	e008      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fd fd84 	bl	8003e64 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e06d      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636a:	4b3a      	ldr	r3, [pc, #232]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006376:	4b36      	ldr	r3, [pc, #216]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02e      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d027      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006394:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063a4:	4b2c      	ldr	r3, [pc, #176]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80063aa:	4a29      	ldr	r2, [pc, #164]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d014      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fd fd53 	bl	8003e64 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fd fd4f 	bl	8003e64 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e036      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ee      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063e4:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4917      	ldr	r1, [pc, #92]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d105      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006414:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	490b      	ldr	r1, [pc, #44]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4904      	ldr	r1, [pc, #16]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	40007000 	.word	0x40007000
 8006458:	42420440 	.word	0x42420440

0800645c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e01d      	b.n	80064aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fd f9e2 	bl	800384c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f000 fbe8 	bl	8006c70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0201 	orr.w	r2, r2, #1
 80064c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b06      	cmp	r3, #6
 80064da:	d007      	beq.n	80064ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e01d      	b.n	8006546 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fd f8c6 	bl	80036b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f000 fb9a 	bl	8006c70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2201      	movs	r2, #1
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 feac 	bl	80072c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <HAL_TIM_PWM_Start+0x74>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <HAL_TIM_PWM_Start+0x2c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <HAL_TIM_PWM_Start+0x78>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d101      	bne.n	8006580 <HAL_TIM_PWM_Start+0x30>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <HAL_TIM_PWM_Start+0x32>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b06      	cmp	r3, #6
 80065a6:	d007      	beq.n	80065b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400

080065cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fe6e 	bl	80072c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a22      	ldr	r2, [pc, #136]	; (8006674 <HAL_TIM_PWM_Stop+0xa8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_TIM_PWM_Stop+0x2c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a21      	ldr	r2, [pc, #132]	; (8006678 <HAL_TIM_PWM_Stop+0xac>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d101      	bne.n	80065fc <HAL_TIM_PWM_Stop+0x30>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_TIM_PWM_Stop+0x32>
 80065fc:	2300      	movs	r3, #0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d017      	beq.n	8006632 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	f241 1311 	movw	r3, #4369	; 0x1111
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10f      	bne.n	8006632 <HAL_TIM_PWM_Stop+0x66>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a1a      	ldr	r2, [r3, #32]
 8006618:	f240 4344 	movw	r3, #1092	; 0x444
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d107      	bne.n	8006632 <HAL_TIM_PWM_Stop+0x66>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a1a      	ldr	r2, [r3, #32]
 8006638:	f241 1311 	movw	r3, #4369	; 0x1111
 800663c:	4013      	ands	r3, r2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <HAL_TIM_PWM_Stop+0x96>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	f240 4344 	movw	r3, #1092	; 0x444
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d107      	bne.n	8006662 <HAL_TIM_PWM_Stop+0x96>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400

0800667c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e07f      	b.n	8006790 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fd f851 	bl	800374c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f000 facd 	bl	8006c70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	4313      	orrs	r3, r2
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800671c:	f023 030c 	bic.w	r3, r3, #12
 8006720:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	4313      	orrs	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	031b      	lsls	r3, r3, #12
 800674c:	4313      	orrs	r3, r2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	4313      	orrs	r3, r2
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_TIM_Encoder_Start+0x16>
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d008      	beq.n	80067be <HAL_TIM_Encoder_Start+0x26>
 80067ac:	e00f      	b.n	80067ce <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2201      	movs	r2, #1
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fd82 	bl	80072c0 <TIM_CCxChannelCmd>
      break;
 80067bc:	e016      	b.n	80067ec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2201      	movs	r2, #1
 80067c4:	2104      	movs	r1, #4
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fd7a 	bl	80072c0 <TIM_CCxChannelCmd>
      break;
 80067cc:	e00e      	b.n	80067ec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2201      	movs	r2, #1
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fd72 	bl	80072c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2201      	movs	r2, #1
 80067e2:	2104      	movs	r1, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fd6b 	bl	80072c0 <TIM_CCxChannelCmd>
      break;
 80067ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b02      	cmp	r3, #2
 800681a:	d122      	bne.n	8006862 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b02      	cmp	r3, #2
 8006828:	d11b      	bne.n	8006862 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f06f 0202 	mvn.w	r2, #2
 8006832:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9f6 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 800684e:	e005      	b.n	800685c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9e9 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f9f8 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d122      	bne.n	80068b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b04      	cmp	r3, #4
 800687c:	d11b      	bne.n	80068b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f06f 0204 	mvn.w	r2, #4
 8006886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f9cc 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 80068a2:	e005      	b.n	80068b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f9bf 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9ce 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d122      	bne.n	800690a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d11b      	bne.n	800690a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0208 	mvn.w	r2, #8
 80068da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9a2 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 80068f6:	e005      	b.n	8006904 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f995 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f9a4 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b10      	cmp	r3, #16
 8006916:	d122      	bne.n	800695e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b10      	cmp	r3, #16
 8006924:	d11b      	bne.n	800695e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f06f 0210 	mvn.w	r2, #16
 800692e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2208      	movs	r2, #8
 8006934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f978 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 800694a:	e005      	b.n	8006958 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f96b 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f97a 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10e      	bne.n	800698a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d107      	bne.n	800698a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f06f 0201 	mvn.w	r2, #1
 8006982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fc fa83 	bl	8002e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d10e      	bne.n	80069b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d107      	bne.n	80069b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fd71 	bl	8007498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c0:	2b40      	cmp	r3, #64	; 0x40
 80069c2:	d10e      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d107      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f93e 	bl	8006c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d10e      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d107      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0220 	mvn.w	r2, #32
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fd3c 	bl	8007486 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e0b4      	b.n	8006b9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	f200 809f 	bhi.w	8006b88 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006b89 	.word	0x08006b89
 8006a58:	08006b89 	.word	0x08006b89
 8006a5c:	08006b89 	.word	0x08006b89
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006b89 	.word	0x08006b89
 8006a68:	08006b89 	.word	0x08006b89
 8006a6c:	08006b89 	.word	0x08006b89
 8006a70:	08006b07 	.word	0x08006b07
 8006a74:	08006b89 	.word	0x08006b89
 8006a78:	08006b89 	.word	0x08006b89
 8006a7c:	08006b89 	.word	0x08006b89
 8006a80:	08006b47 	.word	0x08006b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f96a 	bl	8006d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0208 	orr.w	r2, r2, #8
 8006a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0204 	bic.w	r2, r2, #4
 8006aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6999      	ldr	r1, [r3, #24]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	619a      	str	r2, [r3, #24]
      break;
 8006ac2:	e062      	b.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 f9ba 	bl	8006e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6999      	ldr	r1, [r3, #24]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	021a      	lsls	r2, r3, #8
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	619a      	str	r2, [r3, #24]
      break;
 8006b04:	e041      	b.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fa0d 	bl	8006f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0208 	orr.w	r2, r2, #8
 8006b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0204 	bic.w	r2, r2, #4
 8006b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69d9      	ldr	r1, [r3, #28]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	61da      	str	r2, [r3, #28]
      break;
 8006b44:	e021      	b.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fa61 	bl	8007014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69d9      	ldr	r1, [r3, #28]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	021a      	lsls	r2, r3, #8
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	61da      	str	r2, [r3, #28]
      break;
 8006b86:	e000      	b.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_TIM_SlaveConfigSynchro+0x18>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e031      	b.n	8006c20 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa74 	bl	80070bc <TIM_SlaveTimer_SetConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e018      	b.n	8006c20 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bfc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c0c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <TIM_Base_SetConfig+0xe0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <TIM_Base_SetConfig+0xe4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d00b      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a2f      	ldr	r2, [pc, #188]	; (8006d58 <TIM_Base_SetConfig+0xe8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a2e      	ldr	r2, [pc, #184]	; (8006d5c <TIM_Base_SetConfig+0xec>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <TIM_Base_SetConfig+0xf0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d108      	bne.n	8006cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a22      	ldr	r2, [pc, #136]	; (8006d50 <TIM_Base_SetConfig+0xe0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <TIM_Base_SetConfig+0x82>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a21      	ldr	r2, [pc, #132]	; (8006d54 <TIM_Base_SetConfig+0xe4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00f      	beq.n	8006cf2 <TIM_Base_SetConfig+0x82>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d00b      	beq.n	8006cf2 <TIM_Base_SetConfig+0x82>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <TIM_Base_SetConfig+0xe8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d007      	beq.n	8006cf2 <TIM_Base_SetConfig+0x82>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1d      	ldr	r2, [pc, #116]	; (8006d5c <TIM_Base_SetConfig+0xec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_Base_SetConfig+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1c      	ldr	r2, [pc, #112]	; (8006d60 <TIM_Base_SetConfig+0xf0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d108      	bne.n	8006d04 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <TIM_Base_SetConfig+0xe0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_Base_SetConfig+0xc8>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <TIM_Base_SetConfig+0xe4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d103      	bne.n	8006d40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	615a      	str	r2, [r3, #20]
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40013400 	.word	0x40013400
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00

08006d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0201 	bic.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 0302 	bic.w	r3, r3, #2
 8006dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <TIM_OC1_SetConfig+0xd8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC1_SetConfig+0x64>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <TIM_OC1_SetConfig+0xdc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d10c      	bne.n	8006de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0308 	bic.w	r3, r3, #8
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f023 0304 	bic.w	r3, r3, #4
 8006de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <TIM_OC1_SetConfig+0xd8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_OC1_SetConfig+0x8e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <TIM_OC1_SetConfig+0xdc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d111      	bne.n	8006e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	621a      	str	r2, [r3, #32]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40013400 	.word	0x40013400

08006e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0210 	bic.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0320 	bic.w	r3, r3, #32
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a21      	ldr	r2, [pc, #132]	; (8006f24 <TIM_OC2_SetConfig+0xe0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_OC2_SetConfig+0x68>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <TIM_OC2_SetConfig+0xe4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d10d      	bne.n	8006ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <TIM_OC2_SetConfig+0xe0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x94>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC2_SetConfig+0xe4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d113      	bne.n	8006f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40013400 	.word	0x40013400

08006f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	021b      	lsls	r3, r3, #8
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a21      	ldr	r2, [pc, #132]	; (800700c <TIM_OC3_SetConfig+0xe0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d003      	beq.n	8006f92 <TIM_OC3_SetConfig+0x66>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a20      	ldr	r2, [pc, #128]	; (8007010 <TIM_OC3_SetConfig+0xe4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10d      	bne.n	8006fae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <TIM_OC3_SetConfig+0xe0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <TIM_OC3_SetConfig+0x92>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a15      	ldr	r2, [pc, #84]	; (8007010 <TIM_OC3_SetConfig+0xe4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d113      	bne.n	8006fe6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	621a      	str	r2, [r3, #32]
}
 8007000:	bf00      	nop
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40013400 	.word	0x40013400

08007014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800705e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	031b      	lsls	r3, r3, #12
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <TIM_OC4_SetConfig+0xa0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC4_SetConfig+0x68>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a10      	ldr	r2, [pc, #64]	; (80070b8 <TIM_OC4_SetConfig+0xa4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d109      	bne.n	8007090 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	019b      	lsls	r3, r3, #6
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40013400 	.word	0x40013400

080070bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0307 	bic.w	r3, r3, #7
 80070e6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d05c      	beq.n	80071bc <TIM_SlaveTimer_SetConfig+0x100>
 8007102:	2b30      	cmp	r3, #48	; 0x30
 8007104:	d806      	bhi.n	8007114 <TIM_SlaveTimer_SetConfig+0x58>
 8007106:	2b10      	cmp	r3, #16
 8007108:	d058      	beq.n	80071bc <TIM_SlaveTimer_SetConfig+0x100>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d056      	beq.n	80071bc <TIM_SlaveTimer_SetConfig+0x100>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d054      	beq.n	80071bc <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007112:	e054      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007114:	2b50      	cmp	r3, #80	; 0x50
 8007116:	d03d      	beq.n	8007194 <TIM_SlaveTimer_SetConfig+0xd8>
 8007118:	2b50      	cmp	r3, #80	; 0x50
 800711a:	d802      	bhi.n	8007122 <TIM_SlaveTimer_SetConfig+0x66>
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d010      	beq.n	8007142 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007120:	e04d      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007122:	2b60      	cmp	r3, #96	; 0x60
 8007124:	d040      	beq.n	80071a8 <TIM_SlaveTimer_SetConfig+0xec>
 8007126:	2b70      	cmp	r3, #112	; 0x70
 8007128:	d000      	beq.n	800712c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800712a:	e048      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68d9      	ldr	r1, [r3, #12]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f000 f8a1 	bl	8007282 <TIM_ETR_SetConfig>
      break;
 8007140:	e03d      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b05      	cmp	r3, #5
 8007148:	d101      	bne.n	800714e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e038      	b.n	80071c0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a1a      	ldr	r2, [r3, #32]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0201 	bic.w	r2, r2, #1
 8007164:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007174:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
      break;
 8007192:	e014      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	6899      	ldr	r1, [r3, #8]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	461a      	mov	r2, r3
 80071a2:	f000 f811 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      break;
 80071a6:	e00a      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6899      	ldr	r1, [r3, #8]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f000 f835 	bl	8007224 <TIM_TI2_ConfigInputStage>
      break;
 80071ba:	e000      	b.n	80071be <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80071bc:	bf00      	nop
  }
  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 030a 	bic.w	r3, r3, #10
 8007204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f023 0210 	bic.w	r2, r3, #16
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800724e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	031b      	lsls	r3, r3, #12
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007282:	b480      	push	{r7}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	021a      	lsls	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	609a      	str	r2, [r3, #8]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2204      	movs	r2, #4
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f8c5 	bl	80074aa <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800732e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b06      	cmp	r3, #6
 8007340:	d007      	beq.n	8007352 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0201 	orr.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007370:	2302      	movs	r3, #2
 8007372:	e032      	b.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ac:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e03d      	b.n	800747c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr

08007486 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b087      	sub	sp, #28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2204      	movs	r2, #4
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	43db      	mvns	r3, r3
 80074cc:	401a      	ands	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	431a      	orrs	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr

080074f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e03f      	b.n	8007584 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fc fae7 	bl	8003aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2224      	movs	r2, #36	; 0x24
 8007522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007534:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fd06 	bl	8007f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800754a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800755a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800756a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af02      	add	r7, sp, #8
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	f040 8083 	bne.w	80076b4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_UART_Transmit+0x2e>
 80075b4:	88fb      	ldrh	r3, [r7, #6]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e07b      	b.n	80076b6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Transmit+0x40>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e074      	b.n	80076b6 <HAL_UART_Transmit+0x12a>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2221      	movs	r2, #33	; 0x21
 80075de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80075e2:	f7fc fc3f 	bl	8003e64 <HAL_GetTick>
 80075e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075f4:	e042      	b.n	800767c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760c:	d122      	bne.n	8007654 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fb17 	bl	8007c4c <UART_WaitOnFlagUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e046      	b.n	80076b6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800763a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3302      	adds	r3, #2
 8007648:	60bb      	str	r3, [r7, #8]
 800764a:	e017      	b.n	800767c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	3301      	adds	r3, #1
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	e013      	b.n	800767c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 faf4 	bl	8007c4c <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e023      	b.n	80076b6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	60ba      	str	r2, [r7, #8]
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1b7      	bne.n	80075f6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	2140      	movs	r1, #64	; 0x40
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fadb 	bl	8007c4c <UART_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e00a      	b.n	80076b6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	e000      	b.n	80076b6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d153      	bne.n	8007782 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_UART_Transmit_DMA+0x26>
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e04c      	b.n	8007784 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Transmit_DMA+0x38>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e045      	b.n	8007784 <HAL_UART_Transmit_DMA+0xc4>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2221      	movs	r2, #33	; 0x21
 800771c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	4a19      	ldr	r2, [pc, #100]	; (800778c <HAL_UART_Transmit_DMA+0xcc>)
 8007726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	4a18      	ldr	r2, [pc, #96]	; (8007790 <HAL_UART_Transmit_DMA+0xd0>)
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_UART_Transmit_DMA+0xd4>)
 8007736:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	2200      	movs	r2, #0
 800773e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8007740:	f107 0308 	add.w	r3, r7, #8
 8007744:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3304      	adds	r3, #4
 8007754:	461a      	mov	r2, r3
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	f7fd fa82 	bl	8004c60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007764:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695a      	ldr	r2, [r3, #20]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800777c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	e000      	b.n	8007784 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007782:	2302      	movs	r3, #2
  }
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	08007ac7 	.word	0x08007ac7
 8007790:	08007b19 	.word	0x08007b19
 8007794:	08007bb9 	.word	0x08007bb9

08007798 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d166      	bne.n	8007880 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_UART_Receive_DMA+0x26>
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e05f      	b.n	8007882 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UART_Receive_DMA+0x38>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e058      	b.n	8007882 <HAL_UART_Receive_DMA+0xea>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	88fa      	ldrh	r2, [r7, #6]
 80077e2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2222      	movs	r2, #34	; 0x22
 80077ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	4a25      	ldr	r2, [pc, #148]	; (800788c <HAL_UART_Receive_DMA+0xf4>)
 80077f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	4a24      	ldr	r2, [pc, #144]	; (8007890 <HAL_UART_Receive_DMA+0xf8>)
 8007800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	4a23      	ldr	r2, [pc, #140]	; (8007894 <HAL_UART_Receive_DMA+0xfc>)
 8007808:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	2200      	movs	r2, #0
 8007810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	f7fd fa19 	bl	8004c60 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800785a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695a      	ldr	r2, [r3, #20]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800787a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	08007b35 	.word	0x08007b35
 8007890:	08007b9d 	.word	0x08007b9d
 8007894:	08007bb9 	.word	0x08007bb9

08007898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10d      	bne.n	80078ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d008      	beq.n	80078ea <HAL_UART_IRQHandler+0x52>
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 faaf 	bl	8007e46 <UART_Receive_IT>
      return;
 80078e8:	e0cc      	b.n	8007a84 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80ab 	beq.w	8007a48 <HAL_UART_IRQHandler+0x1b0>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <HAL_UART_IRQHandler+0x70>
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a0 	beq.w	8007a48 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_UART_IRQHandler+0x90>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007920:	f043 0201 	orr.w	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_UART_IRQHandler+0xb0>
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007940:	f043 0202 	orr.w	r2, r3, #2
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_UART_IRQHandler+0xd0>
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007960:	f043 0204 	orr.w	r2, r3, #4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <HAL_UART_IRQHandler+0xf0>
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007980:	f043 0208 	orr.w	r2, r3, #8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d078      	beq.n	8007a82 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <HAL_UART_IRQHandler+0x112>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa4e 	bl	8007e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bf14      	ite	ne
 80079b8:	2301      	movne	r3, #1
 80079ba:	2300      	moveq	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <HAL_UART_IRQHandler+0x13a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d031      	beq.n	8007a36 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f999 	bl	8007d0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d023      	beq.n	8007a2e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d013      	beq.n	8007a26 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a02:	4a22      	ldr	r2, [pc, #136]	; (8007a8c <HAL_UART_IRQHandler+0x1f4>)
 8007a04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fd f988 	bl	8004d20 <HAL_DMA_Abort_IT>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d016      	beq.n	8007a44 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a24:	e00e      	b.n	8007a44 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f844 	bl	8007ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	e00a      	b.n	8007a44 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f840 	bl	8007ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	e006      	b.n	8007a44 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f83c 	bl	8007ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007a42:	e01e      	b.n	8007a82 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	bf00      	nop
    return;
 8007a46:	e01c      	b.n	8007a82 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <HAL_UART_IRQHandler+0x1cc>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f985 	bl	8007d6c <UART_Transmit_IT>
    return;
 8007a62:	e00f      	b.n	8007a84 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_UART_IRQHandler+0x1ec>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f9cc 	bl	8007e16 <UART_EndTransmit_IT>
    return;
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <HAL_UART_IRQHandler+0x1ec>
    return;
 8007a82:	bf00      	nop
  }
}
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08007d45 	.word	0x08007d45

08007a90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d113      	bne.n	8007b0a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007af6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b06:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b08:	e002      	b.n	8007b10 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f004 f8ce 	bl	800bcac <HAL_UART_TxCpltCallback>
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff ffb2 	bl	8007a90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11e      	bne.n	8007b8e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b64:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695a      	ldr	r2, [r3, #20]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0201 	bic.w	r2, r2, #1
 8007b74:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b84:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f004 f86a 	bl	800bc68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff ff79 	bl	8007aa2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b21      	cmp	r3, #33	; 0x21
 8007bea:	d108      	bne.n	8007bfe <UART_DMAError+0x46>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007bf8:	68b8      	ldr	r0, [r7, #8]
 8007bfa:	f000 f871 	bl	8007ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bf14      	ite	ne
 8007c0c:	2301      	movne	r3, #1
 8007c0e:	2300      	moveq	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b22      	cmp	r3, #34	; 0x22
 8007c1e:	d108      	bne.n	8007c32 <UART_DMAError+0x7a>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c2c:	68b8      	ldr	r0, [r7, #8]
 8007c2e:	f000 f86c 	bl	8007d0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	f043 0210 	orr.w	r2, r3, #16
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c3e:	68b8      	ldr	r0, [r7, #8]
 8007c40:	f7ff ff38 	bl	8007ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c5c:	e02c      	b.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c64:	d028      	beq.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c6c:	f7fc f8fa 	bl	8003e64 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d21d      	bcs.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e00f      	b.n	8007cd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d0c3      	beq.n	8007c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007cf6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr

08007d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d20:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695a      	ldr	r2, [r3, #20]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff fea8 	bl	8007ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b21      	cmp	r3, #33	; 0x21
 8007d7e:	d144      	bne.n	8007e0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d88:	d11a      	bne.n	8007dc0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	1c9a      	adds	r2, r3, #2
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	621a      	str	r2, [r3, #32]
 8007db2:	e00e      	b.n	8007dd2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	621a      	str	r2, [r3, #32]
 8007dbe:	e008      	b.n	8007dd2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	1c59      	adds	r1, r3, #1
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6211      	str	r1, [r2, #32]
 8007dca:	781a      	ldrb	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4619      	mov	r1, r3
 8007de0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10f      	bne.n	8007e06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007df4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e000      	b.n	8007e0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f003 ff38 	bl	800bcac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b22      	cmp	r3, #34	; 0x22
 8007e58:	d171      	bne.n	8007f3e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e62:	d123      	bne.n	8007eac <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10e      	bne.n	8007e90 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	1c9a      	adds	r2, r3, #2
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8007e8e:	e029      	b.n	8007ee4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	629a      	str	r2, [r3, #40]	; 0x28
 8007eaa:	e01b      	b.n	8007ee4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6858      	ldr	r0, [r3, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	1c59      	adds	r1, r3, #1
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6291      	str	r1, [r2, #40]	; 0x28
 8007ec4:	b2c2      	uxtb	r2, r0
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e00c      	b.n	8007ee4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	1c58      	adds	r0, r3, #1
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	6288      	str	r0, [r1, #40]	; 0x28
 8007edc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d120      	bne.n	8007f3a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0220 	bic.w	r2, r2, #32
 8007f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f003 fe99 	bl	800bc68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e002      	b.n	8007f40 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e000      	b.n	8007f40 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
  }
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007f82:	f023 030c 	bic.w	r3, r3, #12
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a52      	ldr	r2, [pc, #328]	; (80080f4 <UART_SetConfig+0x1ac>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d14e      	bne.n	800804e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007fb0:	f7fe f93c 	bl	800622c <HAL_RCC_GetPCLK2Freq>
 8007fb4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009a      	lsls	r2, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	4a4a      	ldr	r2, [pc, #296]	; (80080f8 <UART_SetConfig+0x1b0>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	0119      	lsls	r1, r3, #4
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009a      	lsls	r2, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fec:	4b42      	ldr	r3, [pc, #264]	; (80080f8 <UART_SetConfig+0x1b0>)
 8007fee:	fba3 0302 	umull	r0, r3, r3, r2
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	2064      	movs	r0, #100	; 0x64
 8007ff6:	fb00 f303 	mul.w	r3, r0, r3
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	3332      	adds	r3, #50	; 0x32
 8008000:	4a3d      	ldr	r2, [pc, #244]	; (80080f8 <UART_SetConfig+0x1b0>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800800c:	4419      	add	r1, r3
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009a      	lsls	r2, r3, #2
 8008018:	441a      	add	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	fbb2 f2f3 	udiv	r2, r2, r3
 8008024:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <UART_SetConfig+0x1b0>)
 8008026:	fba3 0302 	umull	r0, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	2064      	movs	r0, #100	; 0x64
 800802e:	fb00 f303 	mul.w	r3, r0, r3
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	3332      	adds	r3, #50	; 0x32
 8008038:	4a2f      	ldr	r2, [pc, #188]	; (80080f8 <UART_SetConfig+0x1b0>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	440a      	add	r2, r1
 800804a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800804c:	e04d      	b.n	80080ea <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800804e:	f7fe f8d9 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 8008052:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009a      	lsls	r2, r3, #2
 800805e:	441a      	add	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	4a23      	ldr	r2, [pc, #140]	; (80080f8 <UART_SetConfig+0x1b0>)
 800806c:	fba2 2303 	umull	r2, r3, r2, r3
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	0119      	lsls	r1, r3, #4
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009a      	lsls	r2, r3, #2
 800807e:	441a      	add	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	fbb2 f2f3 	udiv	r2, r2, r3
 800808a:	4b1b      	ldr	r3, [pc, #108]	; (80080f8 <UART_SetConfig+0x1b0>)
 800808c:	fba3 0302 	umull	r0, r3, r3, r2
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	2064      	movs	r0, #100	; 0x64
 8008094:	fb00 f303 	mul.w	r3, r0, r3
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	3332      	adds	r3, #50	; 0x32
 800809e:	4a16      	ldr	r2, [pc, #88]	; (80080f8 <UART_SetConfig+0x1b0>)
 80080a0:	fba2 2303 	umull	r2, r3, r2, r3
 80080a4:	095b      	lsrs	r3, r3, #5
 80080a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080aa:	4419      	add	r1, r3
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009a      	lsls	r2, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	fbb2 f2f3 	udiv	r2, r2, r3
 80080c2:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <UART_SetConfig+0x1b0>)
 80080c4:	fba3 0302 	umull	r0, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	2064      	movs	r0, #100	; 0x64
 80080cc:	fb00 f303 	mul.w	r3, r0, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	3332      	adds	r3, #50	; 0x32
 80080d6:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <UART_SetConfig+0x1b0>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	440a      	add	r2, r1
 80080e8:	609a      	str	r2, [r3, #8]
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40013800 	.word	0x40013800
 80080f8:	51eb851f 	.word	0x51eb851f

080080fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800810a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800810e:	2b84      	cmp	r3, #132	; 0x84
 8008110:	d005      	beq.n	800811e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008112:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	3303      	adds	r3, #3
 800811c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800811e:	68fb      	ldr	r3, [r7, #12]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008130:	f3ef 8305 	mrs	r3, IPSR
 8008134:	607b      	str	r3, [r7, #4]
  return(result);
 8008136:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008138:	2b00      	cmp	r3, #0
 800813a:	bf14      	ite	ne
 800813c:	2301      	movne	r3, #1
 800813e:	2300      	moveq	r3, #0
 8008140:	b2db      	uxtb	r3, r3
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008150:	f001 fd1e 	bl	8009b90 <vTaskStartScheduler>
  
  return osOK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	bd80      	pop	{r7, pc}

0800815a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800815e:	f7ff ffe4 	bl	800812a <inHandlerMode>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008168:	f001 fe16 	bl	8009d98 <xTaskGetTickCountFromISR>
 800816c:	4603      	mov	r3, r0
 800816e:	e002      	b.n	8008176 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008170:	f001 fe04 	bl	8009d7c <xTaskGetTickCount>
 8008174:	4603      	mov	r3, r0
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	bd80      	pop	{r7, pc}

0800817a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800817a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817c:	b087      	sub	sp, #28
 800817e:	af02      	add	r7, sp, #8
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685c      	ldr	r4, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008190:	b29e      	uxth	r6, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff ffaf 	bl	80080fc <makeFreeRtosPriority>
 800819e:	4602      	mov	r2, r0
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	9200      	str	r2, [sp, #0]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	4632      	mov	r2, r6
 80081ac:	4629      	mov	r1, r5
 80081ae:	4620      	mov	r0, r4
 80081b0:	f001 f97e 	bl	80094b0 <xTaskCreate>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d001      	beq.n	80081be <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80081be:	68fb      	ldr	r3, [r7, #12]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <osDelay+0x16>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	e000      	b.n	80081e0 <osDelay+0x18>
 80081de:	2301      	movs	r3, #1
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 fb09 	bl	80097f8 <vTaskDelay>
  
  return osOK;
 80081e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	460b      	mov	r3, r1
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	72fb      	strb	r3, [r7, #11]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <osTimerCreate+0x18>
 8008204:	2201      	movs	r2, #1
 8008206:	e000      	b.n	800820a <osTimerCreate+0x1a>
 8008208:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
  return xTimerCreate((const char *)"",
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2101      	movs	r1, #1
 8008214:	4803      	ldr	r0, [pc, #12]	; (8008224 <osTimerCreate+0x34>)
 8008216:	f002 fd03 	bl	800ac20 <xTimerCreate>
 800821a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	0800f21c 	.word	0x0800f21c

08008228 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <osTimerStart+0x20>
    ticks = 1;
 8008244:	2301      	movs	r3, #1
 8008246:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8008248:	f7ff ff6f 	bl	800812a <inHandlerMode>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01b      	beq.n	800828a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8008252:	f107 020c 	add.w	r2, r7, #12
 8008256:	2300      	movs	r3, #0
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4613      	mov	r3, r2
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	2109      	movs	r1, #9
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f002 fd2b 	bl	800acbc <xTimerGenericCommand>
 8008266:	4603      	mov	r3, r0
 8008268:	2b01      	cmp	r3, #1
 800826a:	d002      	beq.n	8008272 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 800826c:	23ff      	movs	r3, #255	; 0xff
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e018      	b.n	80082a4 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d015      	beq.n	80082a4 <osTimerStart+0x7c>
 8008278:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <osTimerStart+0x88>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	e00c      	b.n	80082a4 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800828a:	2300      	movs	r3, #0
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	2300      	movs	r3, #0
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	2104      	movs	r1, #4
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f002 fd11 	bl	800acbc <xTimerGenericCommand>
 800829a:	4603      	mov	r3, r0
 800829c:	2b01      	cmp	r3, #1
 800829e:	d001      	beq.n	80082a4 <osTimerStart+0x7c>
      result = osErrorOS;
 80082a0:	23ff      	movs	r3, #255	; 0xff
 80082a2:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80082a4:	697b      	ldr	r3, [r7, #20]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80082c6:	f7ff ff30 	bl	800812a <inHandlerMode>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01c      	beq.n	800830a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	f107 0208 	add.w	r2, r7, #8
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4613      	mov	r3, r2
 80082de:	2201      	movs	r2, #1
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f002 fb3f 	bl	800a964 <xTaskGenericNotifyFromISR>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d002      	beq.n	80082f2 <osSignalSet+0x3e>
      return 0x80000000;
 80082ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082f0:	e019      	b.n	8008326 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d015      	beq.n	8008324 <osSignalSet+0x70>
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <osSignalSet+0x7c>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	e00c      	b.n	8008324 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	2201      	movs	r2, #1
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f002 fa86 	bl	800a824 <xTaskGenericNotify>
 8008318:	4603      	mov	r3, r0
 800831a:	2b01      	cmp	r3, #1
 800831c:	d002      	beq.n	8008324 <osSignalSet+0x70>
    return 0x80000000;
 800831e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008322:	e000      	b.n	8008326 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008324:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b089      	sub	sp, #36	; 0x24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834e:	d103      	bne.n	8008358 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8008350:	f04f 33ff 	mov.w	r3, #4294967295
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	e009      	b.n	800836c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d006      	beq.n	800836c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <osSignalWait+0x38>
      ticks = 1;
 8008368:	2301      	movs	r3, #1
 800836a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800836c:	f7ff fedd 	bl	800812a <inHandlerMode>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008376:	2382      	movs	r3, #130	; 0x82
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	e01b      	b.n	80083b4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	f107 0310 	add.w	r3, r7, #16
 8008382:	1d1a      	adds	r2, r3, #4
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2000      	movs	r0, #0
 8008388:	f002 f9f2 	bl	800a770 <xTaskNotifyWait>
 800838c:	4603      	mov	r3, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d008      	beq.n	80083a4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <osSignalWait+0x6a>
 8008398:	2300      	movs	r3, #0
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	e00a      	b.n	80083b4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	613b      	str	r3, [r7, #16]
 80083a2:	e007      	b.n	80083b4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da02      	bge.n	80083b0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80083aa:	2386      	movs	r3, #134	; 0x86
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	e001      	b.n	80083b4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80083b0:	2308      	movs	r3, #8
 80083b2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	461c      	mov	r4, r3
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	3724      	adds	r7, #36	; 0x24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd90      	pop	{r4, r7, pc}

080083cc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80083d4:	2001      	movs	r0, #1
 80083d6:	f000 fa57 	bl	8008888 <xQueueCreateMutex>
 80083da:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <osMutexWait+0x18>
    return osErrorParameter;
 80083f8:	2380      	movs	r3, #128	; 0x80
 80083fa:	e03a      	b.n	8008472 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d103      	bne.n	8008410 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008408:	f04f 33ff 	mov.w	r3, #4294967295
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e009      	b.n	8008424 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d006      	beq.n	8008424 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <osMutexWait+0x40>
      ticks = 1;
 8008420:	2301      	movs	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008424:	f7ff fe81 	bl	800812a <inHandlerMode>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d017      	beq.n	800845e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	461a      	mov	r2, r3
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fe3a 	bl	80090b0 <xQueueReceiveFromISR>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d001      	beq.n	8008446 <osMutexWait+0x62>
      return osErrorOS;
 8008442:	23ff      	movs	r3, #255	; 0xff
 8008444:	e015      	b.n	8008472 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d011      	beq.n	8008470 <osMutexWait+0x8c>
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <osMutexWait+0x98>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	e008      	b.n	8008470 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fd1d 	bl	8008ea0 <xQueueSemaphoreTake>
 8008466:	4603      	mov	r3, r0
 8008468:	2b01      	cmp	r3, #1
 800846a:	d001      	beq.n	8008470 <osMutexWait+0x8c>
    return osErrorOS;
 800846c:	23ff      	movs	r3, #255	; 0xff
 800846e:	e000      	b.n	8008472 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008490:	f7ff fe4b 	bl	800812a <inHandlerMode>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d016      	beq.n	80084c8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800849a:	f107 0308 	add.w	r3, r7, #8
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fb97 	bl	8008bd4 <xQueueGiveFromISR>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d001      	beq.n	80084b0 <osMutexRelease+0x30>
      return osErrorOS;
 80084ac:	23ff      	movs	r3, #255	; 0xff
 80084ae:	e017      	b.n	80084e0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d013      	beq.n	80084de <osMutexRelease+0x5e>
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <osMutexRelease+0x68>)
 80084b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	e00a      	b.n	80084de <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80084c8:	2300      	movs	r3, #0
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9f2 	bl	80088b8 <xQueueGenericSend>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d001      	beq.n	80084de <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80084da:	23ff      	movs	r3, #255	; 0xff
 80084dc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f9b3 	bl	8009860 <vTaskSuspend>
  
  return osOK;
 80084fa:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800850c:	f7ff fe0d 	bl	800812a <inHandlerMode>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 faca 	bl	8009ab0 <xTaskResumeFromISR>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10b      	bne.n	800853a <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <osThreadResume+0x40>)
 8008524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	e002      	b.n	800853a <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fa5f 	bl	80099f8 <vTaskResume>
  }
  return osOK;
 800853a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <osDelayUntil+0x18>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	e000      	b.n	8008562 <osDelayUntil+0x1a>
 8008560:	2301      	movs	r3, #1
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f8cd 	bl	8009704 <vTaskDelayUntil>
  
  return osOK;
 800856a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 0208 	add.w	r2, r3, #8
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f04f 32ff 	mov.w	r2, #4294967295
 800858c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f103 0208 	add.w	r2, r3, #8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f103 0208 	add.w	r2, r3, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr

080085b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr

080085ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ca:	b480      	push	{r7}
 80085cc:	b085      	sub	sp, #20
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008626:	d103      	bne.n	8008630 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	e00c      	b.n	800864a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3308      	adds	r3, #8
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	e002      	b.n	800863e <vListInsert+0x2e>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	d2f6      	bcs.n	8008638 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	601a      	str	r2, [r3, #0]
}
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6892      	ldr	r2, [r2, #8]
 8008696:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6852      	ldr	r2, [r2, #4]
 80086a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d103      	bne.n	80086b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	1e5a      	subs	r2, r3, #1
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr
	...

080086d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d109      	bne.n	80086fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	60bb      	str	r3, [r7, #8]
 80086fa:	e7fe      	b.n	80086fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80086fc:	f002 fe64 	bl	800b3c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	68f9      	ldr	r1, [r7, #12]
 800870a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800870c:	fb01 f303 	mul.w	r3, r1, r3
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872c:	3b01      	subs	r3, #1
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	441a      	add	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	22ff      	movs	r2, #255	; 0xff
 8008740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	22ff      	movs	r2, #255	; 0xff
 8008748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d114      	bne.n	800877c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01a      	beq.n	8008790 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3310      	adds	r3, #16
 800875e:	4618      	mov	r0, r3
 8008760:	f001 fc90 	bl	800a084 <xTaskRemoveFromEventList>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d012      	beq.n	8008790 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <xQueueGenericReset+0xcc>)
 800876c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	e009      	b.n	8008790 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3310      	adds	r3, #16
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff fef7 	bl	8008574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3324      	adds	r3, #36	; 0x24
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fef2 	bl	8008574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008790:	f002 fe48 	bl	800b424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008794:	2301      	movs	r3, #1
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <xQueueGenericCreate+0x28>
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	613b      	str	r3, [r7, #16]
 80087ca:	e7fe      	b.n	80087ca <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	e004      	b.n	80087e2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	fb02 f303 	mul.w	r3, r2, r3
 80087e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	3348      	adds	r3, #72	; 0x48
 80087e6:	4618      	mov	r0, r3
 80087e8:	f002 fee4 	bl	800b5b4 <pvPortMalloc>
 80087ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	3348      	adds	r3, #72	; 0x48
 80087f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087fa:	79fa      	ldrb	r2, [r7, #7]
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4613      	mov	r3, r2
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f805 	bl	8008816 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800880c:	69bb      	ldr	r3, [r7, #24]
	}
 800880e:	4618      	mov	r0, r3
 8008810:	3720      	adds	r7, #32
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
 8008822:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e002      	b.n	8008838 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008844:	2101      	movs	r1, #1
 8008846:	69b8      	ldr	r0, [r7, #24]
 8008848:	f7ff ff44 	bl	80086d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00e      	beq.n	8008880 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f81c 	bl	80088b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008892:	2301      	movs	r3, #1
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	2300      	movs	r3, #0
 8008898:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	461a      	mov	r2, r3
 800889e:	6939      	ldr	r1, [r7, #16]
 80088a0:	6978      	ldr	r0, [r7, #20]
 80088a2:	f7ff ff7f 	bl	80087a4 <xQueueGenericCreate>
 80088a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff ffd3 	bl	8008854 <prvInitialiseMutex>

		return pxNewQueue;
 80088ae:	68fb      	ldr	r3, [r7, #12]
	}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08e      	sub	sp, #56	; 0x38
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <xQueueGenericSend+0x30>
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e6:	e7fe      	b.n	80088e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x3e>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSend+0x42>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueGenericSend+0x44>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <xQueueGenericSend+0x5c>
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
 8008912:	e7fe      	b.n	8008912 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d103      	bne.n	8008922 <xQueueGenericSend+0x6a>
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <xQueueGenericSend+0x6e>
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <xQueueGenericSend+0x70>
 8008926:	2300      	movs	r3, #0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d109      	bne.n	8008940 <xQueueGenericSend+0x88>
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	623b      	str	r3, [r7, #32]
 800893e:	e7fe      	b.n	800893e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008940:	f001 fd3c 	bl	800a3bc <xTaskGetSchedulerState>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <xQueueGenericSend+0x98>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <xQueueGenericSend+0x9c>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <xQueueGenericSend+0x9e>
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <xQueueGenericSend+0xb6>
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	e7fe      	b.n	800896c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800896e:	f002 fd2b 	bl	800b3c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	429a      	cmp	r2, r3
 800897c:	d302      	bcc.n	8008984 <xQueueGenericSend+0xcc>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d129      	bne.n	80089d8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800898a:	f000 fc25 	bl	80091d8 <prvCopyDataToQueue>
 800898e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d010      	beq.n	80089ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	3324      	adds	r3, #36	; 0x24
 800899c:	4618      	mov	r0, r3
 800899e:	f001 fb71 	bl	800a084 <xTaskRemoveFromEventList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d013      	beq.n	80089d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089a8:	4b3f      	ldr	r3, [pc, #252]	; (8008aa8 <xQueueGenericSend+0x1f0>)
 80089aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	e00a      	b.n	80089d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089c0:	4b39      	ldr	r3, [pc, #228]	; (8008aa8 <xQueueGenericSend+0x1f0>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089d0:	f002 fd28 	bl	800b424 <vPortExitCritical>
				return pdPASS;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e063      	b.n	8008aa0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d103      	bne.n	80089e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089de:	f002 fd21 	bl	800b424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e05c      	b.n	8008aa0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d106      	bne.n	80089fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 fba9 	bl	800a148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089f6:	2301      	movs	r3, #1
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089fa:	f002 fd13 	bl	800b424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089fe:	f001 f913 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a02:	f002 fce1 	bl	800b3c8 <vPortEnterCritical>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d103      	bne.n	8008a1c <xQueueGenericSend+0x164>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a22:	b25b      	sxtb	r3, r3
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d103      	bne.n	8008a32 <xQueueGenericSend+0x17a>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a32:	f002 fcf7 	bl	800b424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a36:	1d3a      	adds	r2, r7, #4
 8008a38:	f107 0314 	add.w	r3, r7, #20
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fb98 	bl	800a174 <xTaskCheckForTimeOut>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d124      	bne.n	8008a94 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a4c:	f000 fcbc 	bl	80093c8 <prvIsQueueFull>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d018      	beq.n	8008a88 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	3310      	adds	r3, #16
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 fac2 	bl	8009fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a66:	f000 fc47 	bl	80092f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a6a:	f001 f8eb 	bl	8009c44 <xTaskResumeAll>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f af7c 	bne.w	800896e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008a76:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <xQueueGenericSend+0x1f0>)
 8008a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	e772      	b.n	800896e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8a:	f000 fc35 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a8e:	f001 f8d9 	bl	8009c44 <xTaskResumeAll>
 8008a92:	e76c      	b.n	800896e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a96:	f000 fc2f 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a9a:	f001 f8d3 	bl	8009c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a9e:	2300      	movs	r3, #0
		}
	}
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3738      	adds	r7, #56	; 0x38
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08e      	sub	sp, #56	; 0x38
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d109      	bne.n	8008ad8 <xQueueGenericSendFromISR+0x2c>
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <xQueueGenericSendFromISR+0x3a>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <xQueueGenericSendFromISR+0x3e>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueGenericSendFromISR+0x40>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d109      	bne.n	8008b04 <xQueueGenericSendFromISR+0x58>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	623b      	str	r3, [r7, #32]
 8008b02:	e7fe      	b.n	8008b02 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d103      	bne.n	8008b12 <xQueueGenericSendFromISR+0x66>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <xQueueGenericSendFromISR+0x6a>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <xQueueGenericSendFromISR+0x6c>
 8008b16:	2300      	movs	r3, #0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <xQueueGenericSendFromISR+0x84>
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	e7fe      	b.n	8008b2e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b30:	f002 fd04 	bl	800b53c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b34:	f3ef 8211 	mrs	r2, BASEPRI
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	61ba      	str	r2, [r7, #24]
 8008b4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d302      	bcc.n	8008b62 <xQueueGenericSendFromISR+0xb6>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d12c      	bne.n	8008bbc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b72:	f000 fb31 	bl	80091d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d112      	bne.n	8008ba6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d016      	beq.n	8008bb6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	3324      	adds	r3, #36	; 0x24
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fa79 	bl	800a084 <xTaskRemoveFromEventList>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00e      	beq.n	8008bb6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00b      	beq.n	8008bb6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e007      	b.n	8008bb6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008baa:	3301      	adds	r3, #1
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	b25a      	sxtb	r2, r3
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008bba:	e001      	b.n	8008bc0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3738      	adds	r7, #56	; 0x38
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08e      	sub	sp, #56	; 0x38
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <xQueueGiveFromISR+0x28>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	623b      	str	r3, [r7, #32]
 8008bfa:	e7fe      	b.n	8008bfa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <xQueueGiveFromISR+0x44>
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e7fe      	b.n	8008c16 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <xQueueGiveFromISR+0x54>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <xQueueGiveFromISR+0x58>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <xQueueGiveFromISR+0x5a>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <xQueueGiveFromISR+0x72>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	e7fe      	b.n	8008c44 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c46:	f002 fc79 	bl	800b53c <vPortValidateInterruptPriority>
	__asm volatile
 8008c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	617a      	str	r2, [r7, #20]
 8008c60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d22b      	bcs.n	8008cce <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d112      	bne.n	8008cb8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	3324      	adds	r3, #36	; 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 f9f0 	bl	800a084 <xTaskRemoveFromEventList>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00e      	beq.n	8008cc8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e007      	b.n	8008cc8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	b25a      	sxtb	r2, r3
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	637b      	str	r3, [r7, #52]	; 0x34
 8008ccc:	e001      	b.n	8008cd2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3738      	adds	r7, #56	; 0x38
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08c      	sub	sp, #48	; 0x30
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <xQueueReceive+0x2e>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	623b      	str	r3, [r7, #32]
 8008d14:	e7fe      	b.n	8008d14 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <xQueueReceive+0x3c>
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <xQueueReceive+0x40>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <xQueueReceive+0x42>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d109      	bne.n	8008d42 <xQueueReceive+0x5a>
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	61fb      	str	r3, [r7, #28]
 8008d40:	e7fe      	b.n	8008d40 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d42:	f001 fb3b 	bl	800a3bc <xTaskGetSchedulerState>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <xQueueReceive+0x6a>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <xQueueReceive+0x6e>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <xQueueReceive+0x70>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <xQueueReceive+0x88>
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	61bb      	str	r3, [r7, #24]
 8008d6e:	e7fe      	b.n	8008d6e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d70:	f002 fb2a 	bl	800b3c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01f      	beq.n	8008dc0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d84:	f000 fa92 	bl	80092ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	1e5a      	subs	r2, r3, #1
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00f      	beq.n	8008db8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	3310      	adds	r3, #16
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 f971 	bl	800a084 <xTaskRemoveFromEventList>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008da8:	4b3c      	ldr	r3, [pc, #240]	; (8008e9c <xQueueReceive+0x1b4>)
 8008daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008db8:	f002 fb34 	bl	800b424 <vPortExitCritical>
				return pdPASS;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e069      	b.n	8008e94 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dc6:	f002 fb2d 	bl	800b424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e062      	b.n	8008e94 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd4:	f107 0310 	add.w	r3, r7, #16
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f9b5 	bl	800a148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008de2:	f002 fb1f 	bl	800b424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008de6:	f000 ff1f 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dea:	f002 faed 	bl	800b3c8 <vPortEnterCritical>
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d103      	bne.n	8008e04 <xQueueReceive+0x11c>
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e10:	d103      	bne.n	8008e1a <xQueueReceive+0x132>
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e1a:	f002 fb03 	bl	800b424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e1e:	1d3a      	adds	r2, r7, #4
 8008e20:	f107 0310 	add.w	r3, r7, #16
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f9a4 	bl	800a174 <xTaskCheckForTimeOut>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d123      	bne.n	8008e7a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e34:	f000 fab2 	bl	800939c <prvIsQueueEmpty>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d017      	beq.n	8008e6e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	3324      	adds	r3, #36	; 0x24
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 f8ce 	bl	8009fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4e:	f000 fa53 	bl	80092f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e52:	f000 fef7 	bl	8009c44 <xTaskResumeAll>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d189      	bne.n	8008d70 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <xQueueReceive+0x1b4>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	e780      	b.n	8008d70 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	f000 fa42 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e74:	f000 fee6 	bl	8009c44 <xTaskResumeAll>
 8008e78:	e77a      	b.n	8008d70 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7c:	f000 fa3c 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e80:	f000 fee0 	bl	8009c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 fa89 	bl	800939c <prvIsQueueEmpty>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f43f af6f 	beq.w	8008d70 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3730      	adds	r7, #48	; 0x30
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08e      	sub	sp, #56	; 0x38
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <xQueueSemaphoreTake+0x30>
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	623b      	str	r3, [r7, #32]
 8008ece:	e7fe      	b.n	8008ece <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <xQueueSemaphoreTake+0x4c>
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	e7fe      	b.n	8008eea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eec:	f001 fa66 	bl	800a3bc <xTaskGetSchedulerState>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <xQueueSemaphoreTake+0x5c>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <xQueueSemaphoreTake+0x60>
 8008efc:	2301      	movs	r3, #1
 8008efe:	e000      	b.n	8008f02 <xQueueSemaphoreTake+0x62>
 8008f00:	2300      	movs	r3, #0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <xQueueSemaphoreTake+0x7a>
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	61bb      	str	r3, [r7, #24]
 8008f18:	e7fe      	b.n	8008f18 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f1a:	f002 fa55 	bl	800b3c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d024      	beq.n	8008f74 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	1e5a      	subs	r2, r3, #1
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008f3a:	f001 fc05 	bl	800a748 <pvTaskIncrementMutexHeldCount>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	3310      	adds	r3, #16
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 f897 	bl	800a084 <xTaskRemoveFromEventList>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f5c:	4b53      	ldr	r3, [pc, #332]	; (80090ac <xQueueSemaphoreTake+0x20c>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f6c:	f002 fa5a 	bl	800b424 <vPortExitCritical>
				return pdPASS;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e096      	b.n	80090a2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d110      	bne.n	8008f9c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <xQueueSemaphoreTake+0xf4>
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	e7fe      	b.n	8008f92 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f94:	f002 fa46 	bl	800b424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e082      	b.n	80090a2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fa2:	f107 030c 	add.w	r3, r7, #12
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 f8ce 	bl	800a148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fb0:	f002 fa38 	bl	800b424 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fb4:	f000 fe38 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fb8:	f002 fa06 	bl	800b3c8 <vPortEnterCritical>
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fc2:	b25b      	sxtb	r3, r3
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d103      	bne.n	8008fd2 <xQueueSemaphoreTake+0x132>
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fd8:	b25b      	sxtb	r3, r3
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d103      	bne.n	8008fe8 <xQueueSemaphoreTake+0x148>
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fe8:	f002 fa1c 	bl	800b424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fec:	463a      	mov	r2, r7
 8008fee:	f107 030c 	add.w	r3, r7, #12
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 f8bd 	bl	800a174 <xTaskCheckForTimeOut>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d132      	bne.n	8009066 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009002:	f000 f9cb 	bl	800939c <prvIsQueueEmpty>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d026      	beq.n	800905a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d109      	bne.n	8009028 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009014:	f002 f9d8 	bl	800b3c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f001 f9eb 	bl	800a3f8 <xTaskPriorityInherit>
 8009022:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009024:	f002 f9fe 	bl	800b424 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f000 ffd9 	bl	8009fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009038:	f000 f95e 	bl	80092f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800903c:	f000 fe02 	bl	8009c44 <xTaskResumeAll>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	f47f af69 	bne.w	8008f1a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009048:	4b18      	ldr	r3, [pc, #96]	; (80090ac <xQueueSemaphoreTake+0x20c>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	e75f      	b.n	8008f1a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800905a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905c:	f000 f94c 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009060:	f000 fdf0 	bl	8009c44 <xTaskResumeAll>
 8009064:	e759      	b.n	8008f1a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009068:	f000 f946 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800906c:	f000 fdea 	bl	8009c44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009072:	f000 f993 	bl	800939c <prvIsQueueEmpty>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	f43f af4e 	beq.w	8008f1a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00d      	beq.n	80090a0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009084:	f002 f9a0 	bl	800b3c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800908a:	f000 f88e 	bl	80091aa <prvGetDisinheritPriorityAfterTimeout>
 800908e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fab8 	bl	800a60c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800909c:	f002 f9c2 	bl	800b424 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3738      	adds	r7, #56	; 0x38
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	e000ed04 	.word	0xe000ed04

080090b0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08e      	sub	sp, #56	; 0x38
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d109      	bne.n	80090da <xQueueReceiveFromISR+0x2a>
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	623b      	str	r3, [r7, #32]
 80090d8:	e7fe      	b.n	80090d8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d103      	bne.n	80090e8 <xQueueReceiveFromISR+0x38>
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <xQueueReceiveFromISR+0x3c>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <xQueueReceiveFromISR+0x3e>
 80090ec:	2300      	movs	r3, #0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d109      	bne.n	8009106 <xQueueReceiveFromISR+0x56>
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	e7fe      	b.n	8009104 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009106:	f002 fa19 	bl	800b53c <vPortValidateInterruptPriority>
	__asm volatile
 800910a:	f3ef 8211 	mrs	r2, BASEPRI
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	61ba      	str	r2, [r7, #24]
 8009120:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009122:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d02f      	beq.n	8009192 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009140:	f000 f8b4 	bl	80092ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	1e5a      	subs	r2, r3, #1
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800914c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d112      	bne.n	800917c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d016      	beq.n	800918c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	3310      	adds	r3, #16
 8009162:	4618      	mov	r0, r3
 8009164:	f000 ff8e 	bl	800a084 <xTaskRemoveFromEventList>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e007      	b.n	800918c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800917c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009180:	3301      	adds	r3, #1
 8009182:	b2db      	uxtb	r3, r3
 8009184:	b25a      	sxtb	r2, r3
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800918c:	2301      	movs	r3, #1
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
 8009190:	e001      	b.n	8009196 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009192:	2300      	movs	r3, #0
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	613b      	str	r3, [r7, #16]
	__asm volatile
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3738      	adds	r7, #56	; 0x38
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d006      	beq.n	80091c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f1c3 0307 	rsb	r3, r3, #7
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	e001      	b.n	80091cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091cc:	68fb      	ldr	r3, [r7, #12]
	}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr

080091d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10d      	bne.n	8009212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d14d      	bne.n	800929a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4618      	mov	r0, r3
 8009204:	f001 f97e 	bl	800a504 <xTaskPriorityDisinherit>
 8009208:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	e043      	b.n	800929a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d119      	bne.n	800924c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6898      	ldr	r0, [r3, #8]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	f004 f938 	bl	800d498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009230:	441a      	add	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d32b      	bcc.n	800929a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	609a      	str	r2, [r3, #8]
 800924a:	e026      	b.n	800929a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68d8      	ldr	r0, [r3, #12]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	461a      	mov	r2, r3
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	f004 f91e 	bl	800d498 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	425b      	negs	r3, r3
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d207      	bcs.n	8009288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	425b      	negs	r3, r3
 8009282:	441a      	add	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d105      	bne.n	800929a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3b01      	subs	r3, #1
 8009298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092a2:	697b      	ldr	r3, [r7, #20]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d018      	beq.n	80092f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	441a      	add	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d303      	bcc.n	80092e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68d9      	ldr	r1, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	461a      	mov	r2, r3
 80092ea:	6838      	ldr	r0, [r7, #0]
 80092ec:	f004 f8d4 	bl	800d498 <memcpy>
	}
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009300:	f002 f862 	bl	800b3c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800930a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800930c:	e011      	b.n	8009332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	2b00      	cmp	r3, #0
 8009314:	d012      	beq.n	800933c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3324      	adds	r3, #36	; 0x24
 800931a:	4618      	mov	r0, r3
 800931c:	f000 feb2 	bl	800a084 <xTaskRemoveFromEventList>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009326:	f000 ff85 	bl	800a234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	3b01      	subs	r3, #1
 800932e:	b2db      	uxtb	r3, r3
 8009330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009336:	2b00      	cmp	r3, #0
 8009338:	dce9      	bgt.n	800930e <prvUnlockQueue+0x16>
 800933a:	e000      	b.n	800933e <prvUnlockQueue+0x46>
					break;
 800933c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009346:	f002 f86d 	bl	800b424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800934a:	f002 f83d 	bl	800b3c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009356:	e011      	b.n	800937c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d012      	beq.n	8009386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3310      	adds	r3, #16
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fe8d 	bl	800a084 <xTaskRemoveFromEventList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009370:	f000 ff60 	bl	800a234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	3b01      	subs	r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800937c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dce9      	bgt.n	8009358 <prvUnlockQueue+0x60>
 8009384:	e000      	b.n	8009388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009390:	f002 f848 	bl	800b424 <vPortExitCritical>
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093a4:	f002 f810 	bl	800b3c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e001      	b.n	80093ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ba:	f002 f833 	bl	800b424 <vPortExitCritical>

	return xReturn;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093d0:	f001 fffa 	bl	800b3c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d102      	bne.n	80093e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e001      	b.n	80093ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ea:	f002 f81b 	bl	800b424 <vPortExitCritical>

	return xReturn;
 80093ee:	68fb      	ldr	r3, [r7, #12]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e014      	b.n	8009432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009408:	4a0e      	ldr	r2, [pc, #56]	; (8009444 <vQueueAddToRegistry+0x4c>)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009414:	490b      	ldr	r1, [pc, #44]	; (8009444 <vQueueAddToRegistry+0x4c>)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vQueueAddToRegistry+0x4c>)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800942a:	e005      	b.n	8009438 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b07      	cmp	r3, #7
 8009436:	d9e7      	bls.n	8009408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20009fb0 	.word	0x20009fb0

08009448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009458:	f001 ffb6 	bl	800b3c8 <vPortEnterCritical>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009462:	b25b      	sxtb	r3, r3
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d103      	bne.n	8009472 <vQueueWaitForMessageRestricted+0x2a>
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009478:	b25b      	sxtb	r3, r3
 800947a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947e:	d103      	bne.n	8009488 <vQueueWaitForMessageRestricted+0x40>
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009488:	f001 ffcc 	bl	800b424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	3324      	adds	r3, #36	; 0x24
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fdc7 	bl	800a030 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094a2:	6978      	ldr	r0, [r7, #20]
 80094a4:	f7ff ff28 	bl	80092f8 <prvUnlockQueue>
	}
 80094a8:	bf00      	nop
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08c      	sub	sp, #48	; 0x30
 80094b4:	af04      	add	r7, sp, #16
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f002 f875 	bl	800b5b4 <pvPortMalloc>
 80094ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00e      	beq.n	80094f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80094d2:	2054      	movs	r0, #84	; 0x54
 80094d4:	f002 f86e 	bl	800b5b4 <pvPortMalloc>
 80094d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	631a      	str	r2, [r3, #48]	; 0x30
 80094e6:	e005      	b.n	80094f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094e8:	6978      	ldr	r0, [r7, #20]
 80094ea:	f002 f925 	bl	800b738 <vPortFree>
 80094ee:	e001      	b.n	80094f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d013      	beq.n	8009522 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094fa:	88fa      	ldrh	r2, [r7, #6]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f80e 	bl	8009532 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009516:	69f8      	ldr	r0, [r7, #28]
 8009518:	f000 f88a 	bl	8009630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800951c:	2301      	movs	r3, #1
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e002      	b.n	8009528 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295
 8009526:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009528:	69bb      	ldr	r3, [r7, #24]
	}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b088      	sub	sp, #32
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
 800953e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800954a:	3b01      	subs	r3, #1
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f023 0307 	bic.w	r3, r3, #7
 8009558:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	2b00      	cmp	r3, #0
 8009562:	d009      	beq.n	8009578 <prvInitialiseNewTask+0x46>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	e7fe      	b.n	8009576 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	e012      	b.n	80095a4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	7819      	ldrb	r1, [r3, #0]
 8009586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	3334      	adds	r3, #52	; 0x34
 800958e:	460a      	mov	r2, r1
 8009590:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d006      	beq.n	80095ac <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3301      	adds	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d9e9      	bls.n	800957e <prvInitialiseNewTask+0x4c>
 80095aa:	e000      	b.n	80095ae <prvInitialiseNewTask+0x7c>
		{
			break;
 80095ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	2b06      	cmp	r3, #6
 80095ba:	d901      	bls.n	80095c0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095bc:	2306      	movs	r3, #6
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	2200      	movs	r2, #0
 80095d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe ffeb 	bl	80085b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	3318      	adds	r3, #24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe ffe6 	bl	80085b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	f1c3 0207 	rsb	r2, r3, #7
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2200      	movs	r2, #0
 8009600:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	68f9      	ldr	r1, [r7, #12]
 800960e:	69b8      	ldr	r0, [r7, #24]
 8009610:	f001 fdee 	bl	800b1f0 <pxPortInitialiseStack>
 8009614:	4602      	mov	r2, r0
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009626:	bf00      	nop
 8009628:	3720      	adds	r7, #32
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009638:	f001 fec6 	bl	800b3c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800963c:	4b2a      	ldr	r3, [pc, #168]	; (80096e8 <prvAddNewTaskToReadyList+0xb8>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3301      	adds	r3, #1
 8009642:	4a29      	ldr	r2, [pc, #164]	; (80096e8 <prvAddNewTaskToReadyList+0xb8>)
 8009644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009646:	4b29      	ldr	r3, [pc, #164]	; (80096ec <prvAddNewTaskToReadyList+0xbc>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800964e:	4a27      	ldr	r2, [pc, #156]	; (80096ec <prvAddNewTaskToReadyList+0xbc>)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <prvAddNewTaskToReadyList+0xb8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d110      	bne.n	800967e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800965c:	f000 fe0e 	bl	800a27c <prvInitialiseTaskLists>
 8009660:	e00d      	b.n	800967e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009662:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <prvAddNewTaskToReadyList+0xc0>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800966a:	4b20      	ldr	r3, [pc, #128]	; (80096ec <prvAddNewTaskToReadyList+0xbc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	429a      	cmp	r2, r3
 8009676:	d802      	bhi.n	800967e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009678:	4a1c      	ldr	r2, [pc, #112]	; (80096ec <prvAddNewTaskToReadyList+0xbc>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800967e:	4b1d      	ldr	r3, [pc, #116]	; (80096f4 <prvAddNewTaskToReadyList+0xc4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	4a1b      	ldr	r2, [pc, #108]	; (80096f4 <prvAddNewTaskToReadyList+0xc4>)
 8009686:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	2201      	movs	r2, #1
 800968e:	409a      	lsls	r2, r3
 8009690:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <prvAddNewTaskToReadyList+0xc8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4313      	orrs	r3, r2
 8009696:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <prvAddNewTaskToReadyList+0xc8>)
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4a15      	ldr	r2, [pc, #84]	; (80096fc <prvAddNewTaskToReadyList+0xcc>)
 80096a8:	441a      	add	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f7fe ff8a 	bl	80085ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096b6:	f001 feb5 	bl	800b424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096ba:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <prvAddNewTaskToReadyList+0xc0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00e      	beq.n	80096e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096c2:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <prvAddNewTaskToReadyList+0xbc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d207      	bcs.n	80096e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096d0:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <prvAddNewTaskToReadyList+0xd0>)
 80096d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20001050 	.word	0x20001050
 80096ec:	20000f50 	.word	0x20000f50
 80096f0:	2000105c 	.word	0x2000105c
 80096f4:	2000106c 	.word	0x2000106c
 80096f8:	20001058 	.word	0x20001058
 80096fc:	20000f54 	.word	0x20000f54
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	; 0x28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800970e:	2300      	movs	r3, #0
 8009710:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <vTaskDelayUntil+0x28>
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	e7fe      	b.n	800972a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <vTaskDelayUntil+0x42>
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	613b      	str	r3, [r7, #16]
 8009744:	e7fe      	b.n	8009744 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8009746:	4b29      	ldr	r3, [pc, #164]	; (80097ec <vTaskDelayUntil+0xe8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <vTaskDelayUntil+0x5e>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	e7fe      	b.n	8009760 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8009762:	f000 fa61 	bl	8009c28 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009766:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <vTaskDelayUntil+0xec>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	4413      	add	r3, r2
 8009774:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6a3a      	ldr	r2, [r7, #32]
 800977c:	429a      	cmp	r2, r3
 800977e:	d20b      	bcs.n	8009798 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	429a      	cmp	r2, r3
 8009788:	d211      	bcs.n	80097ae <vTaskDelayUntil+0xaa>
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	429a      	cmp	r2, r3
 8009790:	d90d      	bls.n	80097ae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8009792:	2301      	movs	r3, #1
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
 8009796:	e00a      	b.n	80097ae <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69fa      	ldr	r2, [r7, #28]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d303      	bcc.n	80097aa <vTaskDelayUntil+0xa6>
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d901      	bls.n	80097ae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80097aa:	2301      	movs	r3, #1
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d006      	beq.n	80097c8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80097ba:	69fa      	ldr	r2, [r7, #28]
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f001 f994 	bl	800aaf0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80097c8:	f000 fa3c 	bl	8009c44 <xTaskResumeAll>
 80097cc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d107      	bne.n	80097e4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80097d4:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <vTaskDelayUntil+0xf0>)
 80097d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097e4:	bf00      	nop
 80097e6:	3728      	adds	r7, #40	; 0x28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20001078 	.word	0x20001078
 80097f0:	20001054 	.word	0x20001054
 80097f4:	e000ed04 	.word	0xe000ed04

080097f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d016      	beq.n	8009838 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800980a:	4b13      	ldr	r3, [pc, #76]	; (8009858 <vTaskDelay+0x60>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d009      	beq.n	8009826 <vTaskDelay+0x2e>
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60bb      	str	r3, [r7, #8]
 8009824:	e7fe      	b.n	8009824 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009826:	f000 f9ff 	bl	8009c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800982a:	2100      	movs	r1, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 f95f 	bl	800aaf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009832:	f000 fa07 	bl	8009c44 <xTaskResumeAll>
 8009836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d107      	bne.n	800984e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800983e:	4b07      	ldr	r3, [pc, #28]	; (800985c <vTaskDelay+0x64>)
 8009840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001078 	.word	0x20001078
 800985c:	e000ed04 	.word	0xe000ed04

08009860 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009868:	f001 fdae 	bl	800b3c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d102      	bne.n	8009878 <vTaskSuspend+0x18>
 8009872:	4b3c      	ldr	r3, [pc, #240]	; (8009964 <vTaskSuspend+0x104>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	e000      	b.n	800987a <vTaskSuspend+0x1a>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3304      	adds	r3, #4
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fefd 	bl	8008680 <uxListRemove>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d115      	bne.n	80098b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009890:	4935      	ldr	r1, [pc, #212]	; (8009968 <vTaskSuspend+0x108>)
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <vTaskSuspend+0x58>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	2201      	movs	r2, #1
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	43da      	mvns	r2, r3
 80098ae:	4b2f      	ldr	r3, [pc, #188]	; (800996c <vTaskSuspend+0x10c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4013      	ands	r3, r2
 80098b4:	4a2d      	ldr	r2, [pc, #180]	; (800996c <vTaskSuspend+0x10c>)
 80098b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3318      	adds	r3, #24
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fedb 	bl	8008680 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4619      	mov	r1, r3
 80098d0:	4827      	ldr	r0, [pc, #156]	; (8009970 <vTaskSuspend+0x110>)
 80098d2:	f7fe fe7a 	bl	80085ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d103      	bne.n	80098ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80098ea:	f001 fd9b 	bl	800b424 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80098ee:	4b21      	ldr	r3, [pc, #132]	; (8009974 <vTaskSuspend+0x114>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80098f6:	f001 fd67 	bl	800b3c8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80098fa:	f000 fd3b 	bl	800a374 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80098fe:	f001 fd91 	bl	800b424 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <vTaskSuspend+0x104>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	429a      	cmp	r2, r3
 800990a:	d126      	bne.n	800995a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800990c:	4b19      	ldr	r3, [pc, #100]	; (8009974 <vTaskSuspend+0x114>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d016      	beq.n	8009942 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009914:	4b18      	ldr	r3, [pc, #96]	; (8009978 <vTaskSuspend+0x118>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d009      	beq.n	8009930 <vTaskSuspend+0xd0>
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60bb      	str	r3, [r7, #8]
 800992e:	e7fe      	b.n	800992e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8009930:	4b12      	ldr	r3, [pc, #72]	; (800997c <vTaskSuspend+0x11c>)
 8009932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009940:	e00b      	b.n	800995a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009942:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <vTaskSuspend+0x110>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <vTaskSuspend+0x120>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d103      	bne.n	8009956 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800994e:	4b05      	ldr	r3, [pc, #20]	; (8009964 <vTaskSuspend+0x104>)
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
	}
 8009954:	e001      	b.n	800995a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8009956:	f000 faed 	bl	8009f34 <vTaskSwitchContext>
	}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000f50 	.word	0x20000f50
 8009968:	20000f54 	.word	0x20000f54
 800996c:	20001058 	.word	0x20001058
 8009970:	2000103c 	.word	0x2000103c
 8009974:	2000105c 	.word	0x2000105c
 8009978:	20001078 	.word	0x20001078
 800997c:	e000ed04 	.word	0xe000ed04
 8009980:	20001050 	.word	0x20001050

08009984 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <prvTaskIsTaskSuspended+0x2a>
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e7fe      	b.n	80099ac <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	4a0f      	ldr	r2, [pc, #60]	; (80099f0 <prvTaskIsTaskSuspended+0x6c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d101      	bne.n	80099bc <prvTaskIsTaskSuspended+0x38>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <prvTaskIsTaskSuspended+0x3a>
 80099bc:	2300      	movs	r3, #0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	4a0b      	ldr	r2, [pc, #44]	; (80099f4 <prvTaskIsTaskSuspended+0x70>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00a      	beq.n	80099e2 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <prvTaskIsTaskSuspended+0x54>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <prvTaskIsTaskSuspended+0x56>
 80099d8:	2300      	movs	r3, #0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80099de:	2301      	movs	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099e2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80099e4:	4618      	mov	r0, r3
 80099e6:	371c      	adds	r7, #28
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	2000103c 	.word	0x2000103c
 80099f4:	20001010 	.word	0x20001010

080099f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d109      	bne.n	8009a1e <vTaskResume+0x26>
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60bb      	str	r3, [r7, #8]
 8009a1c:	e7fe      	b.n	8009a1c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d039      	beq.n	8009a98 <vTaskResume+0xa0>
 8009a24:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <vTaskResume+0xa8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d034      	beq.n	8009a98 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8009a2e:	f001 fccb 	bl	800b3c8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7ff ffa6 	bl	8009984 <prvTaskIsTaskSuspended>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02a      	beq.n	8009a94 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe fe1c 	bl	8008680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	409a      	lsls	r2, r3
 8009a50:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <vTaskResume+0xac>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <vTaskResume+0xac>)
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4a10      	ldr	r2, [pc, #64]	; (8009aa8 <vTaskResume+0xb0>)
 8009a68:	441a      	add	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fe fdaa 	bl	80085ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <vTaskResume+0xa8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d307      	bcc.n	8009a94 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009a84:	4b09      	ldr	r3, [pc, #36]	; (8009aac <vTaskResume+0xb4>)
 8009a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009a94:	f001 fcc6 	bl	800b424 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000f50 	.word	0x20000f50
 8009aa4:	20001058 	.word	0x20001058
 8009aa8:	20000f54 	.word	0x20000f54
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d109      	bne.n	8009ada <xTaskResumeFromISR+0x2a>
 8009ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	61bb      	str	r3, [r7, #24]
 8009ad8:	e7fe      	b.n	8009ad8 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ada:	f001 fd2f 	bl	800b53c <vPortValidateInterruptPriority>
	__asm volatile
 8009ade:	f3ef 8211 	mrs	r2, BASEPRI
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	617a      	str	r2, [r7, #20]
 8009af4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009af6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009af8:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009afa:	6a38      	ldr	r0, [r7, #32]
 8009afc:	f7ff ff42 	bl	8009984 <prvTaskIsTaskSuspended>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d02f      	beq.n	8009b66 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <xTaskResumeFromISR+0xcc>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d125      	bne.n	8009b5a <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b12:	4b1b      	ldr	r3, [pc, #108]	; (8009b80 <xTaskResumeFromISR+0xd0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d301      	bcc.n	8009b20 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fdab 	bl	8008680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	2201      	movs	r2, #1
 8009b30:	409a      	lsls	r2, r3
 8009b32:	4b14      	ldr	r3, [pc, #80]	; (8009b84 <xTaskResumeFromISR+0xd4>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	4a12      	ldr	r2, [pc, #72]	; (8009b84 <xTaskResumeFromISR+0xd4>)
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a0f      	ldr	r2, [pc, #60]	; (8009b88 <xTaskResumeFromISR+0xd8>)
 8009b4a:	441a      	add	r2, r3
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe fd39 	bl	80085ca <vListInsertEnd>
 8009b58:	e005      	b.n	8009b66 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	3318      	adds	r3, #24
 8009b5e:	4619      	mov	r1, r3
 8009b60:	480a      	ldr	r0, [pc, #40]	; (8009b8c <xTaskResumeFromISR+0xdc>)
 8009b62:	f7fe fd32 	bl	80085ca <vListInsertEnd>
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3728      	adds	r7, #40	; 0x28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001078 	.word	0x20001078
 8009b80:	20000f50 	.word	0x20000f50
 8009b84:	20001058 	.word	0x20001058
 8009b88:	20000f54 	.word	0x20000f54
 8009b8c:	20001010 	.word	0x20001010

08009b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009b96:	4b1e      	ldr	r3, [pc, #120]	; (8009c10 <vTaskStartScheduler+0x80>)
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2280      	movs	r2, #128	; 0x80
 8009ba2:	491c      	ldr	r1, [pc, #112]	; (8009c14 <vTaskStartScheduler+0x84>)
 8009ba4:	481c      	ldr	r0, [pc, #112]	; (8009c18 <vTaskStartScheduler+0x88>)
 8009ba6:	f7ff fc83 	bl	80094b0 <xTaskCreate>
 8009baa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d102      	bne.n	8009bb8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009bb2:	f001 f803 	bl	800abbc <xTimerCreateTimerTask>
 8009bb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d115      	bne.n	8009bea <vTaskStartScheduler+0x5a>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bd0:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <vTaskStartScheduler+0x8c>)
 8009bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bd8:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <vTaskStartScheduler+0x90>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009bde:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <vTaskStartScheduler+0x94>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009be4:	f001 fb80 	bl	800b2e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009be8:	e00d      	b.n	8009c06 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf0:	d109      	bne.n	8009c06 <vTaskStartScheduler+0x76>
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	607b      	str	r3, [r7, #4]
 8009c04:	e7fe      	b.n	8009c04 <vTaskStartScheduler+0x74>
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20001074 	.word	0x20001074
 8009c14:	0800f220 	.word	0x0800f220
 8009c18:	0800a24d 	.word	0x0800a24d
 8009c1c:	20001070 	.word	0x20001070
 8009c20:	2000105c 	.word	0x2000105c
 8009c24:	20001054 	.word	0x20001054

08009c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c2c:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <vTaskSuspendAll+0x18>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a03      	ldr	r2, [pc, #12]	; (8009c40 <vTaskSuspendAll+0x18>)
 8009c34:	6013      	str	r3, [r2, #0]
}
 8009c36:	bf00      	nop
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20001078 	.word	0x20001078

08009c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c52:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <xTaskResumeAll+0x114>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d109      	bne.n	8009c6e <xTaskResumeAll+0x2a>
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	e7fe      	b.n	8009c6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c6e:	f001 fbab 	bl	800b3c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c72:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <xTaskResumeAll+0x114>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	4a37      	ldr	r2, [pc, #220]	; (8009d58 <xTaskResumeAll+0x114>)
 8009c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7c:	4b36      	ldr	r3, [pc, #216]	; (8009d58 <xTaskResumeAll+0x114>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d161      	bne.n	8009d48 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c84:	4b35      	ldr	r3, [pc, #212]	; (8009d5c <xTaskResumeAll+0x118>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d05d      	beq.n	8009d48 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c8c:	e02e      	b.n	8009cec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c8e:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <xTaskResumeAll+0x11c>)
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3318      	adds	r3, #24
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fcf0 	bl	8008680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe fceb 	bl	8008680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cae:	2201      	movs	r2, #1
 8009cb0:	409a      	lsls	r2, r3
 8009cb2:	4b2c      	ldr	r3, [pc, #176]	; (8009d64 <xTaskResumeAll+0x120>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	4a2a      	ldr	r2, [pc, #168]	; (8009d64 <xTaskResumeAll+0x120>)
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4a27      	ldr	r2, [pc, #156]	; (8009d68 <xTaskResumeAll+0x124>)
 8009cca:	441a      	add	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fe fc79 	bl	80085ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cdc:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <xTaskResumeAll+0x128>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d302      	bcc.n	8009cec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009ce6:	4b22      	ldr	r3, [pc, #136]	; (8009d70 <xTaskResumeAll+0x12c>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cec:	4b1c      	ldr	r3, [pc, #112]	; (8009d60 <xTaskResumeAll+0x11c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1cc      	bne.n	8009c8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cfa:	f000 fb3b 	bl	800a374 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <xTaskResumeAll+0x130>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d010      	beq.n	8009d2c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d0a:	f000 f857 	bl	8009dbc <xTaskIncrementTick>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009d14:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <xTaskResumeAll+0x12c>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f1      	bne.n	8009d0a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009d26:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <xTaskResumeAll+0x130>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xTaskResumeAll+0x12c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d009      	beq.n	8009d48 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d34:	2301      	movs	r3, #1
 8009d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <xTaskResumeAll+0x134>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d48:	f001 fb6c 	bl	800b424 <vPortExitCritical>

	return xAlreadyYielded;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20001078 	.word	0x20001078
 8009d5c:	20001050 	.word	0x20001050
 8009d60:	20001010 	.word	0x20001010
 8009d64:	20001058 	.word	0x20001058
 8009d68:	20000f54 	.word	0x20000f54
 8009d6c:	20000f50 	.word	0x20000f50
 8009d70:	20001064 	.word	0x20001064
 8009d74:	20001060 	.word	0x20001060
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d82:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <xTaskGetTickCount+0x18>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d88:	687b      	ldr	r3, [r7, #4]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr
 8009d94:	20001054 	.word	0x20001054

08009d98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d9e:	f001 fbcd 	bl	800b53c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009da2:	2300      	movs	r3, #0
 8009da4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009da6:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <xTaskGetTickCountFromISR+0x20>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dac:	683b      	ldr	r3, [r7, #0]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20001054 	.word	0x20001054

08009dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc6:	4b50      	ldr	r3, [pc, #320]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 808c 	bne.w	8009ee8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd0:	4b4e      	ldr	r3, [pc, #312]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dd8:	4a4c      	ldr	r2, [pc, #304]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d11f      	bne.n	8009e24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de4:	4b4a      	ldr	r3, [pc, #296]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <xTaskIncrementTick+0x46>
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	e7fe      	b.n	8009e00 <xTaskIncrementTick+0x44>
 8009e02:	4b43      	ldr	r3, [pc, #268]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	4b42      	ldr	r3, [pc, #264]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a40      	ldr	r2, [pc, #256]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	4a40      	ldr	r2, [pc, #256]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	4b40      	ldr	r3, [pc, #256]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	4a3e      	ldr	r2, [pc, #248]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	f000 faa8 	bl	800a374 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e24:	4b3d      	ldr	r3, [pc, #244]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d34d      	bcc.n	8009eca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e2e:	4b38      	ldr	r3, [pc, #224]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <xTaskIncrementTick+0x80>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <xTaskIncrementTick+0x82>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e42:	4b36      	ldr	r3, [pc, #216]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	601a      	str	r2, [r3, #0]
					break;
 8009e4a:	e03e      	b.n	8009eca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e4c:	4b30      	ldr	r3, [pc, #192]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d203      	bcs.n	8009e6c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e64:	4a2d      	ldr	r2, [pc, #180]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6013      	str	r3, [r2, #0]
						break;
 8009e6a:	e02e      	b.n	8009eca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe fc05 	bl	8008680 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	3318      	adds	r3, #24
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fbfc 	bl	8008680 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	409a      	lsls	r2, r3
 8009e90:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	4a22      	ldr	r2, [pc, #136]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4a1f      	ldr	r2, [pc, #124]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009ea8:	441a      	add	r2, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fe fb8a 	bl	80085ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d3b4      	bcc.n	8009e2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec8:	e7b1      	b.n	8009e2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eca:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	4914      	ldr	r1, [pc, #80]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d907      	bls.n	8009ef2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e004      	b.n	8009ef2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ee8:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3301      	adds	r3, #1
 8009eee:	4a0f      	ldr	r2, [pc, #60]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <xTaskIncrementTick+0x174>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009efa:	2301      	movs	r3, #1
 8009efc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009efe:	697b      	ldr	r3, [r7, #20]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20001078 	.word	0x20001078
 8009f0c:	20001054 	.word	0x20001054
 8009f10:	20001008 	.word	0x20001008
 8009f14:	2000100c 	.word	0x2000100c
 8009f18:	20001068 	.word	0x20001068
 8009f1c:	20001070 	.word	0x20001070
 8009f20:	20001058 	.word	0x20001058
 8009f24:	20000f54 	.word	0x20000f54
 8009f28:	20000f50 	.word	0x20000f50
 8009f2c:	20001060 	.word	0x20001060
 8009f30:	20001064 	.word	0x20001064

08009f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f3a:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <vTaskSwitchContext+0xa0>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f42:	4b25      	ldr	r3, [pc, #148]	; (8009fd8 <vTaskSwitchContext+0xa4>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f48:	e03e      	b.n	8009fc8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009f4a:	4b23      	ldr	r3, [pc, #140]	; (8009fd8 <vTaskSwitchContext+0xa4>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f50:	4b22      	ldr	r3, [pc, #136]	; (8009fdc <vTaskSwitchContext+0xa8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	fab3 f383 	clz	r3, r3
 8009f5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	f1c3 031f 	rsb	r3, r3, #31
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	491e      	ldr	r1, [pc, #120]	; (8009fe0 <vTaskSwitchContext+0xac>)
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <vTaskSwitchContext+0x5a>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	e7fe      	b.n	8009f8c <vTaskSwitchContext+0x58>
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4a11      	ldr	r2, [pc, #68]	; (8009fe0 <vTaskSwitchContext+0xac>)
 8009f9a:	4413      	add	r3, r2
 8009f9c:	613b      	str	r3, [r7, #16]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d104      	bne.n	8009fbe <vTaskSwitchContext+0x8a>
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	605a      	str	r2, [r3, #4]
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	4a07      	ldr	r2, [pc, #28]	; (8009fe4 <vTaskSwitchContext+0xb0>)
 8009fc6:	6013      	str	r3, [r2, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	371c      	adds	r7, #28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20001078 	.word	0x20001078
 8009fd8:	20001064 	.word	0x20001064
 8009fdc:	20001058 	.word	0x20001058
 8009fe0:	20000f54 	.word	0x20000f54
 8009fe4:	20000f50 	.word	0x20000f50

08009fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d109      	bne.n	800a00c <vTaskPlaceOnEventList+0x24>
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e7fe      	b.n	800a00a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a00c:	4b07      	ldr	r3, [pc, #28]	; (800a02c <vTaskPlaceOnEventList+0x44>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3318      	adds	r3, #24
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fe fafb 	bl	8008610 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a01a:	2101      	movs	r1, #1
 800a01c:	6838      	ldr	r0, [r7, #0]
 800a01e:	f000 fd67 	bl	800aaf0 <prvAddCurrentTaskToDelayedList>
}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000f50 	.word	0x20000f50

0800a030 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <vTaskPlaceOnEventListRestricted+0x26>
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	e7fe      	b.n	800a054 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a056:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <vTaskPlaceOnEventListRestricted+0x50>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3318      	adds	r3, #24
 800a05c:	4619      	mov	r1, r3
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7fe fab3 	bl	80085ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f000 fd3c 	bl	800aaf0 <prvAddCurrentTaskToDelayedList>
	}
 800a078:	bf00      	nop
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20000f50 	.word	0x20000f50

0800a084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <xTaskRemoveFromEventList+0x2a>
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	e7fe      	b.n	800a0ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	3318      	adds	r3, #24
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fae4 	bl	8008680 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <xTaskRemoveFromEventList+0xac>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d11c      	bne.n	800a0fa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fadb 	bl	8008680 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	409a      	lsls	r2, r3
 800a0d2:	4b18      	ldr	r3, [pc, #96]	; (800a134 <xTaskRemoveFromEventList+0xb0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	4a16      	ldr	r2, [pc, #88]	; (800a134 <xTaskRemoveFromEventList+0xb0>)
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4a13      	ldr	r2, [pc, #76]	; (800a138 <xTaskRemoveFromEventList+0xb4>)
 800a0ea:	441a      	add	r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fe fa69 	bl	80085ca <vListInsertEnd>
 800a0f8:	e005      	b.n	800a106 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3318      	adds	r3, #24
 800a0fe:	4619      	mov	r1, r3
 800a100:	480e      	ldr	r0, [pc, #56]	; (800a13c <xTaskRemoveFromEventList+0xb8>)
 800a102:	f7fe fa62 	bl	80085ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10a:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <xTaskRemoveFromEventList+0xbc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	429a      	cmp	r2, r3
 800a112:	d905      	bls.n	800a120 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a114:	2301      	movs	r3, #1
 800a116:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <xTaskRemoveFromEventList+0xc0>)
 800a11a:	2201      	movs	r2, #1
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	e001      	b.n	800a124 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a124:	697b      	ldr	r3, [r7, #20]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20001078 	.word	0x20001078
 800a134:	20001058 	.word	0x20001058
 800a138:	20000f54 	.word	0x20000f54
 800a13c:	20001010 	.word	0x20001010
 800a140:	20000f50 	.word	0x20000f50
 800a144:	20001064 	.word	0x20001064

0800a148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <vTaskInternalSetTimeOutState+0x24>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a158:	4b05      	ldr	r3, [pc, #20]	; (800a170 <vTaskInternalSetTimeOutState+0x28>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20001068 	.word	0x20001068
 800a170:	20001054 	.word	0x20001054

0800a174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d109      	bne.n	800a198 <xTaskCheckForTimeOut+0x24>
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	613b      	str	r3, [r7, #16]
 800a196:	e7fe      	b.n	800a196 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <xTaskCheckForTimeOut+0x3e>
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e7fe      	b.n	800a1b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a1b2:	f001 f909 	bl	800b3c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1b6:	4b1d      	ldr	r3, [pc, #116]	; (800a22c <xTaskCheckForTimeOut+0xb8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ce:	d102      	bne.n	800a1d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61fb      	str	r3, [r7, #28]
 800a1d4:	e023      	b.n	800a21e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	4b15      	ldr	r3, [pc, #84]	; (800a230 <xTaskCheckForTimeOut+0xbc>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d007      	beq.n	800a1f2 <xTaskCheckForTimeOut+0x7e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d302      	bcc.n	800a1f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e015      	b.n	800a21e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d20b      	bcs.n	800a214 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	1ad2      	subs	r2, r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ff9d 	bl	800a148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	61fb      	str	r3, [r7, #28]
 800a212:	e004      	b.n	800a21e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a21a:	2301      	movs	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a21e:	f001 f901 	bl	800b424 <vPortExitCritical>

	return xReturn;
 800a222:	69fb      	ldr	r3, [r7, #28]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20001054 	.word	0x20001054
 800a230:	20001068 	.word	0x20001068

0800a234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a234:	b480      	push	{r7}
 800a236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <vTaskMissedYield+0x14>)
 800a23a:	2201      	movs	r2, #1
 800a23c:	601a      	str	r2, [r3, #0]
}
 800a23e:	bf00      	nop
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	20001064 	.word	0x20001064

0800a24c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a254:	f000 f852 	bl	800a2fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <prvIdleTask+0x28>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d9f9      	bls.n	800a254 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <prvIdleTask+0x2c>)
 800a262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a270:	e7f0      	b.n	800a254 <prvIdleTask+0x8>
 800a272:	bf00      	nop
 800a274:	20000f54 	.word	0x20000f54
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a282:	2300      	movs	r3, #0
 800a284:	607b      	str	r3, [r7, #4]
 800a286:	e00c      	b.n	800a2a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4a12      	ldr	r2, [pc, #72]	; (800a2dc <prvInitialiseTaskLists+0x60>)
 800a294:	4413      	add	r3, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe f96c 	bl	8008574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b06      	cmp	r3, #6
 800a2a6:	d9ef      	bls.n	800a288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2a8:	480d      	ldr	r0, [pc, #52]	; (800a2e0 <prvInitialiseTaskLists+0x64>)
 800a2aa:	f7fe f963 	bl	8008574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ae:	480d      	ldr	r0, [pc, #52]	; (800a2e4 <prvInitialiseTaskLists+0x68>)
 800a2b0:	f7fe f960 	bl	8008574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2b4:	480c      	ldr	r0, [pc, #48]	; (800a2e8 <prvInitialiseTaskLists+0x6c>)
 800a2b6:	f7fe f95d 	bl	8008574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ba:	480c      	ldr	r0, [pc, #48]	; (800a2ec <prvInitialiseTaskLists+0x70>)
 800a2bc:	f7fe f95a 	bl	8008574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2c0:	480b      	ldr	r0, [pc, #44]	; (800a2f0 <prvInitialiseTaskLists+0x74>)
 800a2c2:	f7fe f957 	bl	8008574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <prvInitialiseTaskLists+0x78>)
 800a2c8:	4a05      	ldr	r2, [pc, #20]	; (800a2e0 <prvInitialiseTaskLists+0x64>)
 800a2ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <prvInitialiseTaskLists+0x7c>)
 800a2ce:	4a05      	ldr	r2, [pc, #20]	; (800a2e4 <prvInitialiseTaskLists+0x68>)
 800a2d0:	601a      	str	r2, [r3, #0]
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000f54 	.word	0x20000f54
 800a2e0:	20000fe0 	.word	0x20000fe0
 800a2e4:	20000ff4 	.word	0x20000ff4
 800a2e8:	20001010 	.word	0x20001010
 800a2ec:	20001024 	.word	0x20001024
 800a2f0:	2000103c 	.word	0x2000103c
 800a2f4:	20001008 	.word	0x20001008
 800a2f8:	2000100c 	.word	0x2000100c

0800a2fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a302:	e019      	b.n	800a338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a304:	f001 f860 	bl	800b3c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <prvCheckTasksWaitingTermination+0x4c>)
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3304      	adds	r3, #4
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe f9b3 	bl	8008680 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a31a:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <prvCheckTasksWaitingTermination+0x50>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3b01      	subs	r3, #1
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <prvCheckTasksWaitingTermination+0x50>)
 800a322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a324:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <prvCheckTasksWaitingTermination+0x54>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3b01      	subs	r3, #1
 800a32a:	4a09      	ldr	r2, [pc, #36]	; (800a350 <prvCheckTasksWaitingTermination+0x54>)
 800a32c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a32e:	f001 f879 	bl	800b424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f80e 	bl	800a354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <prvCheckTasksWaitingTermination+0x54>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e1      	bne.n	800a304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a340:	bf00      	nop
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20001024 	.word	0x20001024
 800a34c:	20001050 	.word	0x20001050
 800a350:	20001038 	.word	0x20001038

0800a354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	4618      	mov	r0, r3
 800a362:	f001 f9e9 	bl	800b738 <vPortFree>
			vPortFree( pxTCB );
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 f9e6 	bl	800b738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <prvResetNextTaskUnblockTime+0x40>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <prvResetNextTaskUnblockTime+0x14>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <prvResetNextTaskUnblockTime+0x16>
 800a388:	2300      	movs	r3, #0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d004      	beq.n	800a398 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a38e:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <prvResetNextTaskUnblockTime+0x44>)
 800a390:	f04f 32ff 	mov.w	r2, #4294967295
 800a394:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a396:	e008      	b.n	800a3aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <prvResetNextTaskUnblockTime+0x40>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	4a04      	ldr	r2, [pc, #16]	; (800a3b8 <prvResetNextTaskUnblockTime+0x44>)
 800a3a8:	6013      	str	r3, [r2, #0]
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr
 800a3b4:	20001008 	.word	0x20001008
 800a3b8:	20001070 	.word	0x20001070

0800a3bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <xTaskGetSchedulerState+0x34>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	e008      	b.n	800a3e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3d0:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <xTaskGetSchedulerState+0x38>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	e001      	b.n	800a3e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3e2:	687b      	ldr	r3, [r7, #4]
	}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	2000105c 	.word	0x2000105c
 800a3f4:	20001078 	.word	0x20001078

0800a3f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d06e      	beq.n	800a4ec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a412:	4b39      	ldr	r3, [pc, #228]	; (800a4f8 <xTaskPriorityInherit+0x100>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	429a      	cmp	r2, r3
 800a41a:	d25e      	bcs.n	800a4da <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	db06      	blt.n	800a432 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a424:	4b34      	ldr	r3, [pc, #208]	; (800a4f8 <xTaskPriorityInherit+0x100>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42a:	f1c3 0207 	rsb	r2, r3, #7
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6959      	ldr	r1, [r3, #20]
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43a:	4613      	mov	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4a2e      	ldr	r2, [pc, #184]	; (800a4fc <xTaskPriorityInherit+0x104>)
 800a444:	4413      	add	r3, r2
 800a446:	4299      	cmp	r1, r3
 800a448:	d101      	bne.n	800a44e <xTaskPriorityInherit+0x56>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <xTaskPriorityInherit+0x58>
 800a44e:	2300      	movs	r3, #0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d03a      	beq.n	800a4ca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	3304      	adds	r3, #4
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe f911 	bl	8008680 <uxListRemove>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d115      	bne.n	800a490 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a468:	4924      	ldr	r1, [pc, #144]	; (800a4fc <xTaskPriorityInherit+0x104>)
 800a46a:	4613      	mov	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	440b      	add	r3, r1
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <xTaskPriorityInherit+0x98>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	2201      	movs	r2, #1
 800a480:	fa02 f303 	lsl.w	r3, r2, r3
 800a484:	43da      	mvns	r2, r3
 800a486:	4b1e      	ldr	r3, [pc, #120]	; (800a500 <xTaskPriorityInherit+0x108>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4013      	ands	r3, r2
 800a48c:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <xTaskPriorityInherit+0x108>)
 800a48e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a490:	4b19      	ldr	r3, [pc, #100]	; (800a4f8 <xTaskPriorityInherit+0x100>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	2201      	movs	r2, #1
 800a4a0:	409a      	lsls	r2, r3
 800a4a2:	4b17      	ldr	r3, [pc, #92]	; (800a500 <xTaskPriorityInherit+0x108>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	4a15      	ldr	r2, [pc, #84]	; (800a500 <xTaskPriorityInherit+0x108>)
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4a10      	ldr	r2, [pc, #64]	; (800a4fc <xTaskPriorityInherit+0x104>)
 800a4ba:	441a      	add	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f7fe f881 	bl	80085ca <vListInsertEnd>
 800a4c8:	e004      	b.n	800a4d4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <xTaskPriorityInherit+0x100>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e008      	b.n	800a4ec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <xTaskPriorityInherit+0x100>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d201      	bcs.n	800a4ec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
	}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000f50 	.word	0x20000f50
 800a4fc:	20000f54 	.word	0x20000f54
 800a500:	20001058 	.word	0x20001058

0800a504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d06c      	beq.n	800a5f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a51a:	4b39      	ldr	r3, [pc, #228]	; (800a600 <xTaskPriorityDisinherit+0xfc>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	429a      	cmp	r2, r3
 800a522:	d009      	beq.n	800a538 <xTaskPriorityDisinherit+0x34>
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e7fe      	b.n	800a536 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d109      	bne.n	800a554 <xTaskPriorityDisinherit+0x50>
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60bb      	str	r3, [r7, #8]
 800a552:	e7fe      	b.n	800a552 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a558:	1e5a      	subs	r2, r3, #1
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a566:	429a      	cmp	r2, r3
 800a568:	d044      	beq.n	800a5f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d140      	bne.n	800a5f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3304      	adds	r3, #4
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe f882 	bl	8008680 <uxListRemove>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d115      	bne.n	800a5ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a586:	491f      	ldr	r1, [pc, #124]	; (800a604 <xTaskPriorityDisinherit+0x100>)
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10a      	bne.n	800a5ae <xTaskPriorityDisinherit+0xaa>
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59c:	2201      	movs	r2, #1
 800a59e:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a2:	43da      	mvns	r2, r3
 800a5a4:	4b18      	ldr	r3, [pc, #96]	; (800a608 <xTaskPriorityDisinherit+0x104>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	4a17      	ldr	r2, [pc, #92]	; (800a608 <xTaskPriorityDisinherit+0x104>)
 800a5ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	f1c3 0207 	rsb	r2, r3, #7
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	409a      	lsls	r2, r3
 800a5ca:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <xTaskPriorityDisinherit+0x104>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	4a0d      	ldr	r2, [pc, #52]	; (800a608 <xTaskPriorityDisinherit+0x104>)
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4a08      	ldr	r2, [pc, #32]	; (800a604 <xTaskPriorityDisinherit+0x100>)
 800a5e2:	441a      	add	r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	f7fd ffed 	bl	80085ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5f4:	697b      	ldr	r3, [r7, #20]
	}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000f50 	.word	0x20000f50
 800a604:	20000f54 	.word	0x20000f54
 800a608:	20001058 	.word	0x20001058

0800a60c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a61a:	2301      	movs	r3, #1
 800a61c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 8086 	beq.w	800a732 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d109      	bne.n	800a642 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	e7fe      	b.n	800a640 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d902      	bls.n	800a652 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	61fb      	str	r3, [r7, #28]
 800a650:	e002      	b.n	800a658 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a656:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d067      	beq.n	800a732 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d162      	bne.n	800a732 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a66c:	4b33      	ldr	r3, [pc, #204]	; (800a73c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	429a      	cmp	r2, r3
 800a674:	d109      	bne.n	800a68a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60bb      	str	r3, [r7, #8]
 800a688:	e7fe      	b.n	800a688 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	69fa      	ldr	r2, [r7, #28]
 800a694:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	db04      	blt.n	800a6a8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	f1c3 0207 	rsb	r2, r3, #7
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	6959      	ldr	r1, [r3, #20]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4a22      	ldr	r2, [pc, #136]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a6b8:	4413      	add	r3, r2
 800a6ba:	4299      	cmp	r1, r3
 800a6bc:	d101      	bne.n	800a6c2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d034      	beq.n	800a732 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd ffd7 	bl	8008680 <uxListRemove>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d115      	bne.n	800a704 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6dc:	4918      	ldr	r1, [pc, #96]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10a      	bne.n	800a704 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f8:	43da      	mvns	r2, r3
 800a6fa:	4b12      	ldr	r3, [pc, #72]	; (800a744 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4013      	ands	r3, r2
 800a700:	4a10      	ldr	r2, [pc, #64]	; (800a744 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a702:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	2201      	movs	r2, #1
 800a70a:	409a      	lsls	r2, r3
 800a70c:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4313      	orrs	r3, r2
 800a712:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4a07      	ldr	r2, [pc, #28]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a724:	441a      	add	r2, r3
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	3304      	adds	r3, #4
 800a72a:	4619      	mov	r1, r3
 800a72c:	4610      	mov	r0, r2
 800a72e:	f7fd ff4c 	bl	80085ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a732:	bf00      	nop
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000f50 	.word	0x20000f50
 800a740:	20000f54 	.word	0x20000f54
 800a744:	20001058 	.word	0x20001058

0800a748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a74c:	4b07      	ldr	r3, [pc, #28]	; (800a76c <pvTaskIncrementMutexHeldCount+0x24>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d004      	beq.n	800a75e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <pvTaskIncrementMutexHeldCount+0x24>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a75a:	3201      	adds	r2, #1
 800a75c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a75e:	4b03      	ldr	r3, [pc, #12]	; (800a76c <pvTaskIncrementMutexHeldCount+0x24>)
 800a760:	681b      	ldr	r3, [r3, #0]
	}
 800a762:	4618      	mov	r0, r3
 800a764:	46bd      	mov	sp, r7
 800a766:	bc80      	pop	{r7}
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000f50 	.word	0x20000f50

0800a770 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
 800a77c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a77e:	f000 fe23 	bl	800b3c8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a782:	4b26      	ldr	r3, [pc, #152]	; (800a81c <xTaskNotifyWait+0xac>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d01a      	beq.n	800a7c6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a790:	4b22      	ldr	r3, [pc, #136]	; (800a81c <xTaskNotifyWait+0xac>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	43d2      	mvns	r2, r2
 800a79a:	400a      	ands	r2, r1
 800a79c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a79e:	4b1f      	ldr	r3, [pc, #124]	; (800a81c <xTaskNotifyWait+0xac>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	6838      	ldr	r0, [r7, #0]
 800a7b2:	f000 f99d 	bl	800aaf0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a7b6:	4b1a      	ldr	r3, [pc, #104]	; (800a820 <xTaskNotifyWait+0xb0>)
 800a7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a7c6:	f000 fe2d 	bl	800b424 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a7ca:	f000 fdfd 	bl	800b3c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d004      	beq.n	800a7de <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a7d4:	4b11      	ldr	r3, [pc, #68]	; (800a81c <xTaskNotifyWait+0xac>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <xTaskNotifyWait+0xac>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d002      	beq.n	800a7f2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	e008      	b.n	800a804 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <xTaskNotifyWait+0xac>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	43d2      	mvns	r2, r2
 800a7fc:	400a      	ands	r2, r1
 800a7fe:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <xTaskNotifyWait+0xac>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800a80e:	f000 fe09 	bl	800b424 <vPortExitCritical>

		return xReturn;
 800a812:	697b      	ldr	r3, [r7, #20]
	}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000f50 	.word	0x20000f50
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08a      	sub	sp, #40	; 0x28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a834:	2301      	movs	r3, #1
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <xTaskGenericNotify+0x2e>
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	61bb      	str	r3, [r7, #24]
 800a850:	e7fe      	b.n	800a850 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a856:	f000 fdb7 	bl	800b3c8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d003      	beq.n	800a868 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a86e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d827      	bhi.n	800a8ce <xTaskGenericNotify+0xaa>
 800a87e:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <xTaskGenericNotify+0x60>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a8cf 	.word	0x0800a8cf
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a8a7 	.word	0x0800a8a7
 800a890:	0800a8b3 	.word	0x0800a8b3
 800a894:	0800a8bb 	.word	0x0800a8bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800a8a4:	e013      	b.n	800a8ce <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800a8b0:	e00d      	b.n	800a8ce <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800a8b8:	e009      	b.n	800a8ce <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a8ba:	7ffb      	ldrb	r3, [r7, #31]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d003      	beq.n	800a8c8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a8c6:	e001      	b.n	800a8cc <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a8cc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d138      	bne.n	800a946 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fd fed1 	bl	8008680 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	409a      	lsls	r2, r3
 800a8e6:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <xTaskGenericNotify+0x130>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	4a19      	ldr	r2, [pc, #100]	; (800a954 <xTaskGenericNotify+0x130>)
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4a16      	ldr	r2, [pc, #88]	; (800a958 <xTaskGenericNotify+0x134>)
 800a8fe:	441a      	add	r2, r3
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7fd fe5f 	bl	80085ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a910:	2b00      	cmp	r3, #0
 800a912:	d009      	beq.n	800a928 <xTaskGenericNotify+0x104>
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	e7fe      	b.n	800a926 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92c:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <xTaskGenericNotify+0x138>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	429a      	cmp	r2, r3
 800a934:	d907      	bls.n	800a946 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a936:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <xTaskGenericNotify+0x13c>)
 800a938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a946:	f000 fd6d 	bl	800b424 <vPortExitCritical>

		return xReturn;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3728      	adds	r7, #40	; 0x28
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20001058 	.word	0x20001058
 800a958:	20000f54 	.word	0x20000f54
 800a95c:	20000f50 	.word	0x20000f50
 800a960:	e000ed04 	.word	0xe000ed04

0800a964 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08e      	sub	sp, #56	; 0x38
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	4613      	mov	r3, r2
 800a972:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a974:	2301      	movs	r3, #1
 800a976:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d109      	bne.n	800a992 <xTaskGenericNotifyFromISR+0x2e>
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
 800a990:	e7fe      	b.n	800a990 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a992:	f000 fdd3 	bl	800b53c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a99a:	f3ef 8211 	mrs	r2, BASEPRI
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	623a      	str	r2, [r7, #32]
 800a9b0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a9b2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d829      	bhi.n	800aa30 <xTaskGenericNotifyFromISR+0xcc>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <xTaskGenericNotifyFromISR+0x80>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800aa31 	.word	0x0800aa31
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800aa07 	.word	0x0800aa07
 800a9f0:	0800aa13 	.word	0x0800aa13
 800a9f4:	0800aa1b 	.word	0x0800aa1b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	431a      	orrs	r2, r3
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800aa04:	e014      	b.n	800aa30 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800aa10:	e00e      	b.n	800aa30 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800aa18:	e00a      	b.n	800aa30 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aa1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d003      	beq.n	800aa2a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aa28:	e001      	b.n	800aa2e <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800aa2e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aa30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d145      	bne.n	800aac4 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	61bb      	str	r3, [r7, #24]
 800aa52:	e7fe      	b.n	800aa52 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa54:	4b20      	ldr	r3, [pc, #128]	; (800aad8 <xTaskGenericNotifyFromISR+0x174>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d11c      	bne.n	800aa96 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	3304      	adds	r3, #4
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fd fe0d 	bl	8008680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	409a      	lsls	r2, r3
 800aa6e:	4b1b      	ldr	r3, [pc, #108]	; (800aadc <xTaskGenericNotifyFromISR+0x178>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	4a19      	ldr	r2, [pc, #100]	; (800aadc <xTaskGenericNotifyFromISR+0x178>)
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4a16      	ldr	r2, [pc, #88]	; (800aae0 <xTaskGenericNotifyFromISR+0x17c>)
 800aa86:	441a      	add	r2, r3
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f7fd fd9b 	bl	80085ca <vListInsertEnd>
 800aa94:	e005      	b.n	800aaa2 <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	3318      	adds	r3, #24
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4811      	ldr	r0, [pc, #68]	; (800aae4 <xTaskGenericNotifyFromISR+0x180>)
 800aa9e:	f7fd fd94 	bl	80085ca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa6:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <xTaskGenericNotifyFromISR+0x184>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d909      	bls.n	800aac4 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800aab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d003      	beq.n	800aabe <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800aab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab8:	2201      	movs	r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e002      	b.n	800aac4 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800aabe:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <xTaskGenericNotifyFromISR+0x188>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800aace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3738      	adds	r7, #56	; 0x38
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20001078 	.word	0x20001078
 800aadc:	20001058 	.word	0x20001058
 800aae0:	20000f54 	.word	0x20000f54
 800aae4:	20001010 	.word	0x20001010
 800aae8:	20000f50 	.word	0x20000f50
 800aaec:	20001064 	.word	0x20001064

0800aaf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aafa:	4b29      	ldr	r3, [pc, #164]	; (800aba0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fd fdba 	bl	8008680 <uxListRemove>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10b      	bne.n	800ab2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ab12:	4b24      	ldr	r3, [pc, #144]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	2201      	movs	r2, #1
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	43da      	mvns	r2, r3
 800ab20:	4b21      	ldr	r3, [pc, #132]	; (800aba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4013      	ands	r3, r2
 800ab26:	4a20      	ldr	r2, [pc, #128]	; (800aba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d10a      	bne.n	800ab48 <prvAddCurrentTaskToDelayedList+0x58>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab38:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4619      	mov	r1, r3
 800ab40:	481a      	ldr	r0, [pc, #104]	; (800abac <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab42:	f7fd fd42 	bl	80085ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab46:	e026      	b.n	800ab96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab50:	4b14      	ldr	r3, [pc, #80]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d209      	bcs.n	800ab74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab60:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	f7fd fd4f 	bl	8008610 <vListInsert>
}
 800ab72:	e010      	b.n	800ab96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fd fd45 	bl	8008610 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d202      	bcs.n	800ab96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab90:	4a09      	ldr	r2, [pc, #36]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	6013      	str	r3, [r2, #0]
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20001054 	.word	0x20001054
 800aba4:	20000f50 	.word	0x20000f50
 800aba8:	20001058 	.word	0x20001058
 800abac:	2000103c 	.word	0x2000103c
 800abb0:	2000100c 	.word	0x2000100c
 800abb4:	20001008 	.word	0x20001008
 800abb8:	20001070 	.word	0x20001070

0800abbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800abc6:	f000 fadd 	bl	800b184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800abca:	4b11      	ldr	r3, [pc, #68]	; (800ac10 <xTimerCreateTimerTask+0x54>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00b      	beq.n	800abea <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800abd2:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <xTimerCreateTimerTask+0x58>)
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	2302      	movs	r3, #2
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	2300      	movs	r3, #0
 800abdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abe0:	490d      	ldr	r1, [pc, #52]	; (800ac18 <xTimerCreateTimerTask+0x5c>)
 800abe2:	480e      	ldr	r0, [pc, #56]	; (800ac1c <xTimerCreateTimerTask+0x60>)
 800abe4:	f7fe fc64 	bl	80094b0 <xTaskCreate>
 800abe8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d109      	bne.n	800ac04 <xTimerCreateTimerTask+0x48>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	e7fe      	b.n	800ac02 <xTimerCreateTimerTask+0x46>
	return xReturn;
 800ac04:	687b      	ldr	r3, [r7, #4]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200010ac 	.word	0x200010ac
 800ac14:	200010b0 	.word	0x200010b0
 800ac18:	0800f228 	.word	0x0800f228
 800ac1c:	0800add5 	.word	0x0800add5

0800ac20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ac2e:	2028      	movs	r0, #40	; 0x28
 800ac30:	f000 fcc0 	bl	800b5b4 <pvPortMalloc>
 800ac34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d009      	beq.n	800ac50 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f805 	bl	800ac5a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800ac50:	697b      	ldr	r3, [r7, #20]
	}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
 800ac66:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d109      	bne.n	800ac82 <prvInitialiseNewTimer+0x28>
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	e7fe      	b.n	800ac80 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d015      	beq.n	800acb4 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ac88:	f000 fa7c 	bl	800b184 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	6a3a      	ldr	r2, [r7, #32]
 800aca8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	3304      	adds	r3, #4
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd fc7f 	bl	80085b2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08a      	sub	sp, #40	; 0x28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acca:	2300      	movs	r3, #0
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <xTimerGenericCommand+0x2c>
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	623b      	str	r3, [r7, #32]
 800ace6:	e7fe      	b.n	800ace6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ace8:	4b19      	ldr	r3, [pc, #100]	; (800ad50 <xTimerGenericCommand+0x94>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02a      	beq.n	800ad46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	dc18      	bgt.n	800ad34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad02:	f7ff fb5b 	bl	800a3bc <xTaskGetSchedulerState>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d109      	bne.n	800ad20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad0c:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <xTimerGenericCommand+0x94>)
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	f107 0114 	add.w	r1, r7, #20
 800ad14:	2300      	movs	r3, #0
 800ad16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad18:	f7fd fdce 	bl	80088b8 <xQueueGenericSend>
 800ad1c:	6278      	str	r0, [r7, #36]	; 0x24
 800ad1e:	e012      	b.n	800ad46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad20:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <xTimerGenericCommand+0x94>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	f107 0114 	add.w	r1, r7, #20
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f7fd fdc4 	bl	80088b8 <xQueueGenericSend>
 800ad30:	6278      	str	r0, [r7, #36]	; 0x24
 800ad32:	e008      	b.n	800ad46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad34:	4b06      	ldr	r3, [pc, #24]	; (800ad50 <xTimerGenericCommand+0x94>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	f107 0114 	add.w	r1, r7, #20
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	f7fd feb4 	bl	8008aac <xQueueGenericSendFromISR>
 800ad44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3728      	adds	r7, #40	; 0x28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	200010ac 	.word	0x200010ac

0800ad54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad5e:	4b1c      	ldr	r3, [pc, #112]	; (800add0 <prvProcessExpiredTimer+0x7c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fd fc87 	bl	8008680 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d121      	bne.n	800adbe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	18d1      	adds	r1, r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	6978      	ldr	r0, [r7, #20]
 800ad88:	f000 f8c8 	bl	800af1c <prvInsertTimerInActiveList>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d015      	beq.n	800adbe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad92:	2300      	movs	r3, #0
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	2300      	movs	r3, #0
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	6978      	ldr	r0, [r7, #20]
 800ad9e:	f7ff ff8d 	bl	800acbc <xTimerGenericCommand>
 800ada2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d109      	bne.n	800adbe <prvProcessExpiredTimer+0x6a>
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e7fe      	b.n	800adbc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	6978      	ldr	r0, [r7, #20]
 800adc4:	4798      	blx	r3
}
 800adc6:	bf00      	nop
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	200010a4 	.word	0x200010a4

0800add4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800addc:	f107 0308 	add.w	r3, r7, #8
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 f857 	bl	800ae94 <prvGetNextExpireTime>
 800ade6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4619      	mov	r1, r3
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 f803 	bl	800adf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800adf2:	f000 f8d5 	bl	800afa0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adf6:	e7f1      	b.n	800addc <prvTimerTask+0x8>

0800adf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae02:	f7fe ff11 	bl	8009c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae06:	f107 0308 	add.w	r3, r7, #8
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 f866 	bl	800aedc <prvSampleTimeNow>
 800ae10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d130      	bne.n	800ae7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <prvProcessTimerOrBlockTask+0x3c>
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d806      	bhi.n	800ae34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae26:	f7fe ff0d 	bl	8009c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae2a:	68f9      	ldr	r1, [r7, #12]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff91 	bl	800ad54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae32:	e024      	b.n	800ae7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d008      	beq.n	800ae4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae3a:	4b13      	ldr	r3, [pc, #76]	; (800ae88 <prvProcessTimerOrBlockTask+0x90>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bf0c      	ite	eq
 800ae44:	2301      	moveq	r3, #1
 800ae46:	2300      	movne	r3, #0
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <prvProcessTimerOrBlockTask+0x94>)
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f7fe faf5 	bl	8009448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae5e:	f7fe fef1 	bl	8009c44 <xTaskResumeAll>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae68:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <prvProcessTimerOrBlockTask+0x98>)
 800ae6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	f3bf 8f6f 	isb	sy
}
 800ae78:	e001      	b.n	800ae7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae7a:	f7fe fee3 	bl	8009c44 <xTaskResumeAll>
}
 800ae7e:	bf00      	nop
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200010a8 	.word	0x200010a8
 800ae8c:	200010ac 	.word	0x200010ac
 800ae90:	e000ed04 	.word	0xe000ed04

0800ae94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae9c:	4b0e      	ldr	r3, [pc, #56]	; (800aed8 <prvGetNextExpireTime+0x44>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	bf0c      	ite	eq
 800aea6:	2301      	moveq	r3, #1
 800aea8:	2300      	movne	r3, #0
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d105      	bne.n	800aec6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <prvGetNextExpireTime+0x44>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	e001      	b.n	800aeca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aeca:	68fb      	ldr	r3, [r7, #12]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bc80      	pop	{r7}
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	200010a4 	.word	0x200010a4

0800aedc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aee4:	f7fe ff4a 	bl	8009d7c <xTaskGetTickCount>
 800aee8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aeea:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <prvSampleTimeNow+0x3c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d205      	bcs.n	800af00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aef4:	f000 f8e6 	bl	800b0c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	e002      	b.n	800af06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af06:	4a04      	ldr	r2, [pc, #16]	; (800af18 <prvSampleTimeNow+0x3c>)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af0c:	68fb      	ldr	r3, [r7, #12]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	200010b4 	.word	0x200010b4

0800af1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d812      	bhi.n	800af68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	1ad2      	subs	r2, r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d302      	bcc.n	800af56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af50:	2301      	movs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	e01b      	b.n	800af8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af56:	4b10      	ldr	r3, [pc, #64]	; (800af98 <prvInsertTimerInActiveList+0x7c>)
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4619      	mov	r1, r3
 800af60:	4610      	mov	r0, r2
 800af62:	f7fd fb55 	bl	8008610 <vListInsert>
 800af66:	e012      	b.n	800af8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d206      	bcs.n	800af7e <prvInsertTimerInActiveList+0x62>
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d302      	bcc.n	800af7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	617b      	str	r3, [r7, #20]
 800af7c:	e007      	b.n	800af8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af7e:	4b07      	ldr	r3, [pc, #28]	; (800af9c <prvInsertTimerInActiveList+0x80>)
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3304      	adds	r3, #4
 800af86:	4619      	mov	r1, r3
 800af88:	4610      	mov	r0, r2
 800af8a:	f7fd fb41 	bl	8008610 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af8e:	697b      	ldr	r3, [r7, #20]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	200010a8 	.word	0x200010a8
 800af9c:	200010a4 	.word	0x200010a4

0800afa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afa6:	e07a      	b.n	800b09e <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	db76      	blt.n	800b09c <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d004      	beq.n	800afc4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	3304      	adds	r3, #4
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fd fb5e 	bl	8008680 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afc4:	1d3b      	adds	r3, r7, #4
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff ff88 	bl	800aedc <prvSampleTimeNow>
 800afcc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	d864      	bhi.n	800b09e <prvProcessReceivedCommands+0xfe>
 800afd4:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <prvProcessReceivedCommands+0x3c>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800b005 	.word	0x0800b005
 800afe0:	0800b005 	.word	0x0800b005
 800afe4:	0800b005 	.word	0x0800b005
 800afe8:	0800b09f 	.word	0x0800b09f
 800afec:	0800b05f 	.word	0x0800b05f
 800aff0:	0800b095 	.word	0x0800b095
 800aff4:	0800b005 	.word	0x0800b005
 800aff8:	0800b005 	.word	0x0800b005
 800affc:	0800b09f 	.word	0x0800b09f
 800b000:	0800b05f 	.word	0x0800b05f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	18d1      	adds	r1, r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6a3a      	ldr	r2, [r7, #32]
 800b010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b012:	f7ff ff83 	bl	800af1c <prvInsertTimerInActiveList>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d040      	beq.n	800b09e <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b022:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	69db      	ldr	r3, [r3, #28]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d138      	bne.n	800b09e <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	441a      	add	r2, r3
 800b034:	2300      	movs	r3, #0
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	2300      	movs	r3, #0
 800b03a:	2100      	movs	r1, #0
 800b03c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b03e:	f7ff fe3d 	bl	800acbc <xTimerGenericCommand>
 800b042:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d129      	bne.n	800b09e <prvProcessReceivedCommands+0xfe>
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	61bb      	str	r3, [r7, #24]
 800b05c:	e7fe      	b.n	800b05c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d109      	bne.n	800b080 <prvProcessReceivedCommands+0xe0>
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	617b      	str	r3, [r7, #20]
 800b07e:	e7fe      	b.n	800b07e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	699a      	ldr	r2, [r3, #24]
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	18d1      	adds	r1, r2, r3
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	6a3a      	ldr	r2, [r7, #32]
 800b08c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b08e:	f7ff ff45 	bl	800af1c <prvInsertTimerInActiveList>
					break;
 800b092:	e004      	b.n	800b09e <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800b094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b096:	f000 fb4f 	bl	800b738 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b09a:	e000      	b.n	800b09e <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b09c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b09e:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <prvProcessReceivedCommands+0x120>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f107 0108 	add.w	r1, r7, #8
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fd fe1d 	bl	8008ce8 <xQueueReceive>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f47f af79 	bne.w	800afa8 <prvProcessReceivedCommands+0x8>
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	3728      	adds	r7, #40	; 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	200010ac 	.word	0x200010ac

0800b0c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0ca:	e044      	b.n	800b156 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0cc:	4b2b      	ldr	r3, [pc, #172]	; (800b17c <prvSwitchTimerLists+0xb8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0d6:	4b29      	ldr	r3, [pc, #164]	; (800b17c <prvSwitchTimerLists+0xb8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fd facb 	bl	8008680 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d12d      	bne.n	800b156 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	4413      	add	r3, r2
 800b102:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d90e      	bls.n	800b12a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b118:	4b18      	ldr	r3, [pc, #96]	; (800b17c <prvSwitchTimerLists+0xb8>)
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3304      	adds	r3, #4
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7fd fa74 	bl	8008610 <vListInsert>
 800b128:	e015      	b.n	800b156 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b12a:	2300      	movs	r3, #0
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	2300      	movs	r3, #0
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	2100      	movs	r1, #0
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff fdc1 	bl	800acbc <xTimerGenericCommand>
 800b13a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d109      	bne.n	800b156 <prvSwitchTimerLists+0x92>
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	e7fe      	b.n	800b154 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b156:	4b09      	ldr	r3, [pc, #36]	; (800b17c <prvSwitchTimerLists+0xb8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1b5      	bne.n	800b0cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b160:	4b06      	ldr	r3, [pc, #24]	; (800b17c <prvSwitchTimerLists+0xb8>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b166:	4b06      	ldr	r3, [pc, #24]	; (800b180 <prvSwitchTimerLists+0xbc>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a04      	ldr	r2, [pc, #16]	; (800b17c <prvSwitchTimerLists+0xb8>)
 800b16c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b16e:	4a04      	ldr	r2, [pc, #16]	; (800b180 <prvSwitchTimerLists+0xbc>)
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	6013      	str	r3, [r2, #0]
}
 800b174:	bf00      	nop
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	200010a4 	.word	0x200010a4
 800b180:	200010a8 	.word	0x200010a8

0800b184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b188:	f000 f91e 	bl	800b3c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b18c:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <prvCheckForValidListAndQueue+0x54>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d11d      	bne.n	800b1d0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b194:	4811      	ldr	r0, [pc, #68]	; (800b1dc <prvCheckForValidListAndQueue+0x58>)
 800b196:	f7fd f9ed 	bl	8008574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b19a:	4811      	ldr	r0, [pc, #68]	; (800b1e0 <prvCheckForValidListAndQueue+0x5c>)
 800b19c:	f7fd f9ea 	bl	8008574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1a0:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <prvCheckForValidListAndQueue+0x60>)
 800b1a2:	4a0e      	ldr	r2, [pc, #56]	; (800b1dc <prvCheckForValidListAndQueue+0x58>)
 800b1a4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1a6:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <prvCheckForValidListAndQueue+0x64>)
 800b1a8:	4a0d      	ldr	r2, [pc, #52]	; (800b1e0 <prvCheckForValidListAndQueue+0x5c>)
 800b1aa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	210c      	movs	r1, #12
 800b1b0:	200a      	movs	r0, #10
 800b1b2:	f7fd faf7 	bl	80087a4 <xQueueGenericCreate>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <prvCheckForValidListAndQueue+0x54>)
 800b1ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <prvCheckForValidListAndQueue+0x54>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d005      	beq.n	800b1d0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1c4:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <prvCheckForValidListAndQueue+0x54>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4908      	ldr	r1, [pc, #32]	; (800b1ec <prvCheckForValidListAndQueue+0x68>)
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe f914 	bl	80093f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1d0:	f000 f928 	bl	800b424 <vPortExitCritical>
}
 800b1d4:	bf00      	nop
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200010ac 	.word	0x200010ac
 800b1dc:	2000107c 	.word	0x2000107c
 800b1e0:	20001090 	.word	0x20001090
 800b1e4:	200010a4 	.word	0x200010a4
 800b1e8:	200010a8 	.word	0x200010a8
 800b1ec:	0800f230 	.word	0x0800f230

0800b1f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3b04      	subs	r3, #4
 800b200:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3b04      	subs	r3, #4
 800b20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f023 0201 	bic.w	r2, r3, #1
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3b04      	subs	r3, #4
 800b21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b220:	4a08      	ldr	r2, [pc, #32]	; (800b244 <pxPortInitialiseStack+0x54>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3b14      	subs	r3, #20
 800b22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3b20      	subs	r3, #32
 800b236:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b238:	68fb      	ldr	r3, [r7, #12]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	bc80      	pop	{r7}
 800b242:	4770      	bx	lr
 800b244:	0800b249 	.word	0x0800b249

0800b248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b252:	4b10      	ldr	r3, [pc, #64]	; (800b294 <prvTaskExitError+0x4c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25a:	d009      	beq.n	800b270 <prvTaskExitError+0x28>
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	e7fe      	b.n	800b26e <prvTaskExitError+0x26>
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b282:	bf00      	nop
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0fc      	beq.n	800b284 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b28a:	bf00      	nop
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	bc80      	pop	{r7}
 800b292:	4770      	bx	lr
 800b294:	20000024 	.word	0x20000024
	...

0800b2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <pxCurrentTCBConst2>)
 800b2a2:	6819      	ldr	r1, [r3, #0]
 800b2a4:	6808      	ldr	r0, [r1, #0]
 800b2a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b2aa:	f380 8809 	msr	PSP, r0
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f04f 0000 	mov.w	r0, #0
 800b2b6:	f380 8811 	msr	BASEPRI, r0
 800b2ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800b2be:	4770      	bx	lr

0800b2c0 <pxCurrentTCBConst2>:
 800b2c0:	20000f50 	.word	0x20000f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b2c8:	4806      	ldr	r0, [pc, #24]	; (800b2e4 <prvPortStartFirstTask+0x1c>)
 800b2ca:	6800      	ldr	r0, [r0, #0]
 800b2cc:	6800      	ldr	r0, [r0, #0]
 800b2ce:	f380 8808 	msr	MSP, r0
 800b2d2:	b662      	cpsie	i
 800b2d4:	b661      	cpsie	f
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	df00      	svc	0
 800b2e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed08 	.word	0xe000ed08

0800b2e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2ee:	4b31      	ldr	r3, [pc, #196]	; (800b3b4 <xPortStartScheduler+0xcc>)
 800b2f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	22ff      	movs	r2, #255	; 0xff
 800b2fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b308:	78fb      	ldrb	r3, [r7, #3]
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b310:	b2da      	uxtb	r2, r3
 800b312:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <xPortStartScheduler+0xd0>)
 800b314:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b316:	4b29      	ldr	r3, [pc, #164]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b318:	2207      	movs	r2, #7
 800b31a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b31c:	e009      	b.n	800b332 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b31e:	4b27      	ldr	r3, [pc, #156]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3b01      	subs	r3, #1
 800b324:	4a25      	ldr	r2, [pc, #148]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b326:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b328:	78fb      	ldrb	r3, [r7, #3]
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b332:	78fb      	ldrb	r3, [r7, #3]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33a:	2b80      	cmp	r3, #128	; 0x80
 800b33c:	d0ef      	beq.n	800b31e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b33e:	4b1f      	ldr	r3, [pc, #124]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1c3 0307 	rsb	r3, r3, #7
 800b346:	2b04      	cmp	r3, #4
 800b348:	d009      	beq.n	800b35e <xPortStartScheduler+0x76>
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	60bb      	str	r3, [r7, #8]
 800b35c:	e7fe      	b.n	800b35c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b35e:	4b17      	ldr	r3, [pc, #92]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	021b      	lsls	r3, r3, #8
 800b364:	4a15      	ldr	r2, [pc, #84]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b368:	4b14      	ldr	r3, [pc, #80]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b370:	4a12      	ldr	r2, [pc, #72]	; (800b3bc <xPortStartScheduler+0xd4>)
 800b372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	b2da      	uxtb	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b37c:	4b10      	ldr	r3, [pc, #64]	; (800b3c0 <xPortStartScheduler+0xd8>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a0f      	ldr	r2, [pc, #60]	; (800b3c0 <xPortStartScheduler+0xd8>)
 800b382:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b388:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <xPortStartScheduler+0xd8>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a0c      	ldr	r2, [pc, #48]	; (800b3c0 <xPortStartScheduler+0xd8>)
 800b38e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b394:	f000 f8b0 	bl	800b4f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <xPortStartScheduler+0xdc>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b39e:	f7ff ff93 	bl	800b2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3a2:	f7fe fdc7 	bl	8009f34 <vTaskSwitchContext>
	prvTaskExitError();
 800b3a6:	f7ff ff4f 	bl	800b248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	e000e400 	.word	0xe000e400
 800b3b8:	200010b8 	.word	0x200010b8
 800b3bc:	200010bc 	.word	0x200010bc
 800b3c0:	e000ed20 	.word	0xe000ed20
 800b3c4:	20000024 	.word	0x20000024

0800b3c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3e0:	4b0e      	ldr	r3, [pc, #56]	; (800b41c <vPortEnterCritical+0x54>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	4a0d      	ldr	r2, [pc, #52]	; (800b41c <vPortEnterCritical+0x54>)
 800b3e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <vPortEnterCritical+0x54>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d10e      	bne.n	800b410 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3f2:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <vPortEnterCritical+0x58>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d009      	beq.n	800b410 <vPortEnterCritical+0x48>
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	603b      	str	r3, [r7, #0]
 800b40e:	e7fe      	b.n	800b40e <vPortEnterCritical+0x46>
	}
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	bc80      	pop	{r7}
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	20000024 	.word	0x20000024
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b42a:	4b10      	ldr	r3, [pc, #64]	; (800b46c <vPortExitCritical+0x48>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d109      	bne.n	800b446 <vPortExitCritical+0x22>
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	607b      	str	r3, [r7, #4]
 800b444:	e7fe      	b.n	800b444 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b446:	4b09      	ldr	r3, [pc, #36]	; (800b46c <vPortExitCritical+0x48>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	4a07      	ldr	r2, [pc, #28]	; (800b46c <vPortExitCritical+0x48>)
 800b44e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b450:	4b06      	ldr	r3, [pc, #24]	; (800b46c <vPortExitCritical+0x48>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d104      	bne.n	800b462 <vPortExitCritical+0x3e>
 800b458:	2300      	movs	r3, #0
 800b45a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr
 800b46c:	20000024 	.word	0x20000024

0800b470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b470:	f3ef 8009 	mrs	r0, PSP
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4b0d      	ldr	r3, [pc, #52]	; (800b4b0 <pxCurrentTCBConst>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b480:	6010      	str	r0, [r2, #0]
 800b482:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b486:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b48a:	f380 8811 	msr	BASEPRI, r0
 800b48e:	f7fe fd51 	bl	8009f34 <vTaskSwitchContext>
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b49e:	6819      	ldr	r1, [r3, #0]
 800b4a0:	6808      	ldr	r0, [r1, #0]
 800b4a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b4a6:	f380 8809 	msr	PSP, r0
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	4770      	bx	lr

0800b4b0 <pxCurrentTCBConst>:
 800b4b0:	20000f50 	.word	0x20000f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4d0:	f7fe fc74 	bl	8009dbc <xTaskIncrementTick>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <SysTick_Handler+0x3c>)
 800b4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4ec:	bf00      	nop
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	e000ed04 	.word	0xe000ed04

0800b4f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <vPortSetupTimerInterrupt+0x30>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b502:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <vPortSetupTimerInterrupt+0x34>)
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b508:	4b09      	ldr	r3, [pc, #36]	; (800b530 <vPortSetupTimerInterrupt+0x38>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a09      	ldr	r2, [pc, #36]	; (800b534 <vPortSetupTimerInterrupt+0x3c>)
 800b50e:	fba2 2303 	umull	r2, r3, r2, r3
 800b512:	099b      	lsrs	r3, r3, #6
 800b514:	4a08      	ldr	r2, [pc, #32]	; (800b538 <vPortSetupTimerInterrupt+0x40>)
 800b516:	3b01      	subs	r3, #1
 800b518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b51a:	4b03      	ldr	r3, [pc, #12]	; (800b528 <vPortSetupTimerInterrupt+0x30>)
 800b51c:	2207      	movs	r2, #7
 800b51e:	601a      	str	r2, [r3, #0]
}
 800b520:	bf00      	nop
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr
 800b528:	e000e010 	.word	0xe000e010
 800b52c:	e000e018 	.word	0xe000e018
 800b530:	20000018 	.word	0x20000018
 800b534:	10624dd3 	.word	0x10624dd3
 800b538:	e000e014 	.word	0xe000e014

0800b53c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b542:	f3ef 8305 	mrs	r3, IPSR
 800b546:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b0f      	cmp	r3, #15
 800b54c:	d913      	bls.n	800b576 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b54e:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <vPortValidateInterruptPriority+0x68>)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4413      	add	r3, r2
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b558:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <vPortValidateInterruptPriority+0x6c>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	7afa      	ldrb	r2, [r7, #11]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d209      	bcs.n	800b576 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	607b      	str	r3, [r7, #4]
 800b574:	e7fe      	b.n	800b574 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b576:	4b0d      	ldr	r3, [pc, #52]	; (800b5ac <vPortValidateInterruptPriority+0x70>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b57e:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <vPortValidateInterruptPriority+0x74>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d909      	bls.n	800b59a <vPortValidateInterruptPriority+0x5e>
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	e7fe      	b.n	800b598 <vPortValidateInterruptPriority+0x5c>
	}
 800b59a:	bf00      	nop
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr
 800b5a4:	e000e3f0 	.word	0xe000e3f0
 800b5a8:	200010b8 	.word	0x200010b8
 800b5ac:	e000ed0c 	.word	0xe000ed0c
 800b5b0:	200010bc 	.word	0x200010bc

0800b5b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5c0:	f7fe fb32 	bl	8009c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5c4:	4b57      	ldr	r3, [pc, #348]	; (800b724 <pvPortMalloc+0x170>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5cc:	f000 f90c 	bl	800b7e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5d0:	4b55      	ldr	r3, [pc, #340]	; (800b728 <pvPortMalloc+0x174>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 808c 	bne.w	800b6f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d01c      	beq.n	800b61e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b5e4:	2208      	movs	r2, #8
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f003 0307 	and.w	r3, r3, #7
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d013      	beq.n	800b61e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f023 0307 	bic.w	r3, r3, #7
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	2b00      	cmp	r3, #0
 800b608:	d009      	beq.n	800b61e <pvPortMalloc+0x6a>
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e7fe      	b.n	800b61c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d068      	beq.n	800b6f6 <pvPortMalloc+0x142>
 800b624:	4b41      	ldr	r3, [pc, #260]	; (800b72c <pvPortMalloc+0x178>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d863      	bhi.n	800b6f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b62e:	4b40      	ldr	r3, [pc, #256]	; (800b730 <pvPortMalloc+0x17c>)
 800b630:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b632:	4b3f      	ldr	r3, [pc, #252]	; (800b730 <pvPortMalloc+0x17c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b638:	e004      	b.n	800b644 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d903      	bls.n	800b656 <pvPortMalloc+0xa2>
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1f1      	bne.n	800b63a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b656:	4b33      	ldr	r3, [pc, #204]	; (800b724 <pvPortMalloc+0x170>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d04a      	beq.n	800b6f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2208      	movs	r2, #8
 800b666:	4413      	add	r3, r2
 800b668:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	1ad2      	subs	r2, r2, r3
 800b67a:	2308      	movs	r3, #8
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	429a      	cmp	r2, r3
 800b680:	d91e      	bls.n	800b6c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	2b00      	cmp	r3, #0
 800b692:	d009      	beq.n	800b6a8 <pvPortMalloc+0xf4>
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	613b      	str	r3, [r7, #16]
 800b6a6:	e7fe      	b.n	800b6a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6ba:	69b8      	ldr	r0, [r7, #24]
 800b6bc:	f000 f8f6 	bl	800b8ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6c0:	4b1a      	ldr	r3, [pc, #104]	; (800b72c <pvPortMalloc+0x178>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	4a18      	ldr	r2, [pc, #96]	; (800b72c <pvPortMalloc+0x178>)
 800b6cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6ce:	4b17      	ldr	r3, [pc, #92]	; (800b72c <pvPortMalloc+0x178>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4b18      	ldr	r3, [pc, #96]	; (800b734 <pvPortMalloc+0x180>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d203      	bcs.n	800b6e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6da:	4b14      	ldr	r3, [pc, #80]	; (800b72c <pvPortMalloc+0x178>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a15      	ldr	r2, [pc, #84]	; (800b734 <pvPortMalloc+0x180>)
 800b6e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	4b10      	ldr	r3, [pc, #64]	; (800b728 <pvPortMalloc+0x174>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f6:	f7fe faa5 	bl	8009c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	f003 0307 	and.w	r3, r3, #7
 800b700:	2b00      	cmp	r3, #0
 800b702:	d009      	beq.n	800b718 <pvPortMalloc+0x164>
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	e7fe      	b.n	800b716 <pvPortMalloc+0x162>
	return pvReturn;
 800b718:	69fb      	ldr	r3, [r7, #28]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3728      	adds	r7, #40	; 0x28
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	200088c8 	.word	0x200088c8
 800b728:	200088d4 	.word	0x200088d4
 800b72c:	200088cc 	.word	0x200088cc
 800b730:	200088c0 	.word	0x200088c0
 800b734:	200088d0 	.word	0x200088d0

0800b738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d046      	beq.n	800b7d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b74a:	2308      	movs	r3, #8
 800b74c:	425b      	negs	r3, r3
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	4413      	add	r3, r2
 800b752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	4b20      	ldr	r3, [pc, #128]	; (800b7e0 <vPortFree+0xa8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4013      	ands	r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <vPortFree+0x42>
 800b766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e7fe      	b.n	800b778 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d009      	beq.n	800b796 <vPortFree+0x5e>
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	60bb      	str	r3, [r7, #8]
 800b794:	e7fe      	b.n	800b794 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <vPortFree+0xa8>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4013      	ands	r3, r2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d019      	beq.n	800b7d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d115      	bne.n	800b7d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <vPortFree+0xa8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	43db      	mvns	r3, r3
 800b7b6:	401a      	ands	r2, r3
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7bc:	f7fe fa34 	bl	8009c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <vPortFree+0xac>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	4a06      	ldr	r2, [pc, #24]	; (800b7e4 <vPortFree+0xac>)
 800b7cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7ce:	6938      	ldr	r0, [r7, #16]
 800b7d0:	f000 f86c 	bl	800b8ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b7d4:	f7fe fa36 	bl	8009c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7d8:	bf00      	nop
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	200088d4 	.word	0x200088d4
 800b7e4:	200088cc 	.word	0x200088cc

0800b7e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7ee:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800b7f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7f4:	4b27      	ldr	r3, [pc, #156]	; (800b894 <prvHeapInit+0xac>)
 800b7f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f003 0307 	and.w	r3, r3, #7
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00c      	beq.n	800b81c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3307      	adds	r3, #7
 800b806:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0307 	bic.w	r3, r3, #7
 800b80e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	4a1f      	ldr	r2, [pc, #124]	; (800b894 <prvHeapInit+0xac>)
 800b818:	4413      	add	r3, r2
 800b81a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b820:	4a1d      	ldr	r2, [pc, #116]	; (800b898 <prvHeapInit+0xb0>)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b826:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <prvHeapInit+0xb0>)
 800b828:	2200      	movs	r2, #0
 800b82a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4413      	add	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b834:	2208      	movs	r2, #8
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	1a9b      	subs	r3, r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f023 0307 	bic.w	r3, r3, #7
 800b842:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4a15      	ldr	r2, [pc, #84]	; (800b89c <prvHeapInit+0xb4>)
 800b848:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b84a:	4b14      	ldr	r3, [pc, #80]	; (800b89c <prvHeapInit+0xb4>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2200      	movs	r2, #0
 800b850:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b852:	4b12      	ldr	r3, [pc, #72]	; (800b89c <prvHeapInit+0xb4>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b868:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <prvHeapInit+0xb4>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	4a0a      	ldr	r2, [pc, #40]	; (800b8a0 <prvHeapInit+0xb8>)
 800b876:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4a09      	ldr	r2, [pc, #36]	; (800b8a4 <prvHeapInit+0xbc>)
 800b87e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b880:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <prvHeapInit+0xc0>)
 800b882:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b886:	601a      	str	r2, [r3, #0]
}
 800b888:	bf00      	nop
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bc80      	pop	{r7}
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	200010c0 	.word	0x200010c0
 800b898:	200088c0 	.word	0x200088c0
 800b89c:	200088c8 	.word	0x200088c8
 800b8a0:	200088d0 	.word	0x200088d0
 800b8a4:	200088cc 	.word	0x200088cc
 800b8a8:	200088d4 	.word	0x200088d4

0800b8ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8b4:	4b27      	ldr	r3, [pc, #156]	; (800b954 <prvInsertBlockIntoFreeList+0xa8>)
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	e002      	b.n	800b8c0 <prvInsertBlockIntoFreeList+0x14>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d8f7      	bhi.n	800b8ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d108      	bne.n	800b8ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	441a      	add	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d118      	bne.n	800b934 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	4b14      	ldr	r3, [pc, #80]	; (800b958 <prvInsertBlockIntoFreeList+0xac>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d00d      	beq.n	800b92a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	441a      	add	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	e008      	b.n	800b93c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b92a:	4b0b      	ldr	r3, [pc, #44]	; (800b958 <prvInsertBlockIntoFreeList+0xac>)
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	e003      	b.n	800b93c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d002      	beq.n	800b94a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b94a:	bf00      	nop
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	bc80      	pop	{r7}
 800b952:	4770      	bx	lr
 800b954:	200088c0 	.word	0x200088c0
 800b958:	200088c8 	.word	0x200088c8

0800b95c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800b95c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800b95e:	e003      	b.n	800b968 <LoopCopyDataInit>

0800b960 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800b960:	4b0b      	ldr	r3, [pc, #44]	; (800b990 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800b962:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800b964:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800b966:	3104      	adds	r1, #4

0800b968 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800b968:	480a      	ldr	r0, [pc, #40]	; (800b994 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800b96a:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800b96c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800b96e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800b970:	d3f6      	bcc.n	800b960 <CopyDataInit>
  ldr r2, =_sbss
 800b972:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800b974:	e002      	b.n	800b97c <LoopFillZerobss>

0800b976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800b976:	2300      	movs	r3, #0
  str r3, [r2], #4
 800b978:	f842 3b04 	str.w	r3, [r2], #4

0800b97c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800b97c:	4b08      	ldr	r3, [pc, #32]	; (800b9a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800b97e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800b980:	d3f9      	bcc.n	800b976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b982:	f7f7 fbed 	bl	8003160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b986:	f001 fd5b 	bl	800d440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b98a:	f7f7 f9b3 	bl	8002cf4 <main>
  bx lr
 800b98e:	4770      	bx	lr
  ldr r3, =_sidata
 800b990:	0800f4f8 	.word	0x0800f4f8
  ldr r0, =_sdata
 800b994:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800b998:	20000b18 	.word	0x20000b18
  ldr r2, =_sbss
 800b99c:	20000b18 	.word	0x20000b18
  ldr r3, = _ebss
 800b9a0:	20009ff8 	.word	0x20009ff8

0800b9a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b9a4:	e7fe      	b.n	800b9a4 <CAN1_RX1_IRQHandler>
	...

0800b9a8 <adc1_manage_init>:
//static adc_conv_cplt_call_back adc1_conv_cplt_call_back_f = NULL;
static adc_awd_trigger_call_back right_motor_awd_trigger_call_back_f = NULL;
static adc_awd_trigger_call_back left_motor_awd_trigger_call_back_f = NULL;

void adc1_manage_init(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
	//  HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc1_conv_buff,SAMPLE_PER_CHANNEL*SAMPLE_CHANNEL_NUM);
 800b9ac:	2296      	movs	r2, #150	; 0x96
 800b9ae:	4903      	ldr	r1, [pc, #12]	; (800b9bc <adc1_manage_init+0x14>)
 800b9b0:	4803      	ldr	r0, [pc, #12]	; (800b9c0 <adc1_manage_init+0x18>)
 800b9b2:	f7f8 fbf9 	bl	80041a8 <HAL_ADC_Start_DMA>
}
 800b9b6:	bf00      	nop
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	200088d8 	.word	0x200088d8
 800b9c0:	20009b3c 	.word	0x20009b3c

0800b9c4 <adc2_manage_init>:

void adc2_manage_init(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc2);
 800b9c8:	4802      	ldr	r0, [pc, #8]	; (800b9d4 <adc2_manage_init+0x10>)
 800b9ca:	f7f8 fb3f 	bl	800404c <HAL_ADC_Start>

}
 800b9ce:	bf00      	nop
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20009b0c 	.word	0x20009b0c

0800b9d8 <adc3_manage_init>:

void adc3_manage_init(void)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800b9dc:	4802      	ldr	r0, [pc, #8]	; (800b9e8 <adc3_manage_init+0x10>)
 800b9de:	f7f8 fb35 	bl	800404c <HAL_ADC_Start>
}
 800b9e2:	bf00      	nop
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20009b6c 	.word	0x20009b6c

0800b9ec <right_motor_awd_trigger_callback_register>:
//{
//	adc1_conv_cplt_call_back_f = fun;
//}

void right_motor_awd_trigger_callback_register(adc_awd_trigger_call_back fun)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
	right_motor_awd_trigger_call_back_f = fun;
 800b9f4:	4a03      	ldr	r2, [pc, #12]	; (800ba04 <right_motor_awd_trigger_callback_register+0x18>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6013      	str	r3, [r2, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bc80      	pop	{r7}
 800ba02:	4770      	bx	lr
 800ba04:	20008a04 	.word	0x20008a04

0800ba08 <left_motor_awd_trigger_callback_register>:

void left_motor_awd_trigger_callback_register(adc_awd_trigger_call_back fun)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
	left_motor_awd_trigger_call_back_f = fun;
 800ba10:	4a03      	ldr	r2, [pc, #12]	; (800ba20 <left_motor_awd_trigger_callback_register+0x18>)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6013      	str	r3, [r2, #0]
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bc80      	pop	{r7}
 800ba1e:	4770      	bx	lr
 800ba20:	20008a08 	.word	0x20008a08

0800ba24 <HAL_ADC_LevelOutOfWindowCallback>:
//		}
//	}
//}

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC2)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a14      	ldr	r2, [pc, #80]	; (800ba84 <HAL_ADC_LevelOutOfWindowCallback+0x60>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d10e      	bne.n	800ba54 <HAL_ADC_LevelOutOfWindowCallback+0x30>
	{
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) != RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d11a      	bne.n	800ba7a <HAL_ADC_LevelOutOfWindowCallback+0x56>
		{
			if(right_motor_awd_trigger_call_back_f != NULL)
 800ba44:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <HAL_ADC_LevelOutOfWindowCallback+0x64>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d016      	beq.n	800ba7a <HAL_ADC_LevelOutOfWindowCallback+0x56>
			{
				right_motor_awd_trigger_call_back_f();
 800ba4c:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <HAL_ADC_LevelOutOfWindowCallback+0x64>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4798      	blx	r3
			{
				left_motor_awd_trigger_call_back_f();
			}
		}
	}
}
 800ba52:	e012      	b.n	800ba7a <HAL_ADC_LevelOutOfWindowCallback+0x56>
	else if(hadc->Instance == ADC3)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a0c      	ldr	r2, [pc, #48]	; (800ba8c <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d10d      	bne.n	800ba7a <HAL_ADC_LevelOutOfWindowCallback+0x56>
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) != RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d106      	bne.n	800ba7a <HAL_ADC_LevelOutOfWindowCallback+0x56>
			if(left_motor_awd_trigger_call_back_f != NULL)
 800ba6c:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <HAL_ADC_LevelOutOfWindowCallback+0x6c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <HAL_ADC_LevelOutOfWindowCallback+0x56>
				left_motor_awd_trigger_call_back_f();
 800ba74:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <HAL_ADC_LevelOutOfWindowCallback+0x6c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4798      	blx	r3
}
 800ba7a:	bf00      	nop
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	40012800 	.word	0x40012800
 800ba88:	20008a04 	.word	0x20008a04
 800ba8c:	40013c00 	.word	0x40013c00
 800ba90:	20008a08 	.word	0x20008a08

0800ba94 <read_word_from_flash>:
{
	return *(uint16_t*)addr;
}

uint32_t read_word_from_flash(uint32_t addr)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
	return (*(uint16_t*)addr) | (*(uint16_t*)(addr+2)<<16);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	461a      	mov	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3302      	adds	r3, #2
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	041b      	lsls	r3, r3, #16
 800baaa:	4313      	orrs	r3, r2
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bc80      	pop	{r7}
 800bab4:	4770      	bx	lr
	...

0800bab8 <easer_flash>:
/***************************************************************/

static Flasher flasher = newFlasher(FLASH_START_ADDRESS,PAGE_SIZE);

void easer_flash(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
	/* -1- Unlock the Flash Bank Program Erase controller */
	  HAL_FLASH_Unlock();
 800babc:	f7f9 fd12 	bl	80054e4 <HAL_FLASH_Unlock>

	  /* -2- Clear All pending flags */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800bac0:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <easer_flash+0x30>)
 800bac2:	2234      	movs	r2, #52	; 0x34
 800bac4:	60da      	str	r2, [r3, #12]

	  /* -3- erase the FLASH pages */
	  FLASH_PageErase(FLASH_START_ADDRESS);
 800bac6:	4809      	ldr	r0, [pc, #36]	; (800baec <easer_flash+0x34>)
 800bac8:	f7f9 fdf4 	bl	80056b4 <FLASH_PageErase>
	  FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bacc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bad0:	f7f9 fd5a 	bl	8005588 <FLASH_WaitForLastOperation>
	  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bad4:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <easer_flash+0x30>)
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4a03      	ldr	r2, [pc, #12]	; (800bae8 <easer_flash+0x30>)
 800bada:	f023 0302 	bic.w	r3, r3, #2
 800bade:	6113      	str	r3, [r2, #16]

	  /* -5- Lock the Flash Bank Program Erase controller */
	  HAL_FLASH_Lock();
 800bae0:	f7f9 fd26 	bl	8005530 <HAL_FLASH_Lock>
}
 800bae4:	bf00      	nop
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	40022000 	.word	0x40022000
 800baec:	0801e000 	.word	0x0801e000

0800baf0 <find_new_entry>:


void find_new_entry(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
//	flasher.current_addr = flasher.flash_start_address;
	while(flasher.current_addr < flasher.flash_start_address+flasher.page_size)
 800baf4:	e015      	b.n	800bb22 <find_new_entry+0x32>
	{
		flasher.buff.data = read_word_from_flash(flasher.current_addr);
 800baf6:	4b19      	ldr	r3, [pc, #100]	; (800bb5c <find_new_entry+0x6c>)
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff ffca 	bl	800ba94 <read_word_from_flash>
 800bb00:	4602      	mov	r2, r0
 800bb02:	4b16      	ldr	r3, [pc, #88]	; (800bb5c <find_new_entry+0x6c>)
 800bb04:	611a      	str	r2, [r3, #16]
		if(flasher.buff.buff[0] == 0xFF)
 800bb06:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <find_new_entry+0x6c>)
 800bb08:	7c1b      	ldrb	r3, [r3, #16]
 800bb0a:	2bff      	cmp	r3, #255	; 0xff
 800bb0c:	d104      	bne.n	800bb18 <find_new_entry+0x28>
		{
			flasher.new_addr = flasher.current_addr;
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <find_new_entry+0x6c>)
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	4a12      	ldr	r2, [pc, #72]	; (800bb5c <find_new_entry+0x6c>)
 800bb14:	6093      	str	r3, [r2, #8]
			return;
 800bb16:	e020      	b.n	800bb5a <find_new_entry+0x6a>
		}

		flasher.current_addr += 4;
 800bb18:	4b10      	ldr	r3, [pc, #64]	; (800bb5c <find_new_entry+0x6c>)
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4a0f      	ldr	r2, [pc, #60]	; (800bb5c <find_new_entry+0x6c>)
 800bb20:	6053      	str	r3, [r2, #4]
	while(flasher.current_addr < flasher.flash_start_address+flasher.page_size)
 800bb22:	4b0e      	ldr	r3, [pc, #56]	; (800bb5c <find_new_entry+0x6c>)
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <find_new_entry+0x6c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	490c      	ldr	r1, [pc, #48]	; (800bb5c <find_new_entry+0x6c>)
 800bb2c:	8989      	ldrh	r1, [r1, #12]
 800bb2e:	440b      	add	r3, r1
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d3e0      	bcc.n	800baf6 <find_new_entry+0x6>
	}

	if(flasher.current_addr >= flasher.flash_start_address+flasher.page_size)
 800bb34:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <find_new_entry+0x6c>)
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	4b08      	ldr	r3, [pc, #32]	; (800bb5c <find_new_entry+0x6c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4907      	ldr	r1, [pc, #28]	; (800bb5c <find_new_entry+0x6c>)
 800bb3e:	8989      	ldrh	r1, [r1, #12]
 800bb40:	440b      	add	r3, r1
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d309      	bcc.n	800bb5a <find_new_entry+0x6a>
	{
		easer_flash();
 800bb46:	f7ff ffb7 	bl	800bab8 <easer_flash>
		flasher.current_addr = flasher.flash_start_address;
 800bb4a:	4b04      	ldr	r3, [pc, #16]	; (800bb5c <find_new_entry+0x6c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a03      	ldr	r2, [pc, #12]	; (800bb5c <find_new_entry+0x6c>)
 800bb50:	6053      	str	r3, [r2, #4]
		flasher.new_addr = flasher.flash_start_address;
 800bb52:	4b02      	ldr	r3, [pc, #8]	; (800bb5c <find_new_entry+0x6c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a01      	ldr	r2, [pc, #4]	; (800bb5c <find_new_entry+0x6c>)
 800bb58:	6093      	str	r3, [r2, #8]
	}
}
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20000028 	.word	0x20000028

0800bb60 <find_used_entry>:

uint32_t find_used_entry(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
//	flasher.current_addr = flasher.flash_start_address;
	while(flasher.current_addr < flasher.flash_start_address+flasher.page_size)
 800bb64:	e013      	b.n	800bb8e <find_used_entry+0x2e>
	{
		flasher.buff.data = read_word_from_flash(flasher.current_addr);
 800bb66:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <find_used_entry+0x48>)
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff ff92 	bl	800ba94 <read_word_from_flash>
 800bb70:	4602      	mov	r2, r0
 800bb72:	4b0d      	ldr	r3, [pc, #52]	; (800bba8 <find_used_entry+0x48>)
 800bb74:	611a      	str	r2, [r3, #16]
		if(flasher.buff.buff[0] == 0x5A)
 800bb76:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <find_used_entry+0x48>)
 800bb78:	7c1b      	ldrb	r3, [r3, #16]
 800bb7a:	2b5a      	cmp	r3, #90	; 0x5a
 800bb7c:	d102      	bne.n	800bb84 <find_used_entry+0x24>
		{
			return flasher.buff.data;
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <find_used_entry+0x48>)
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	e00e      	b.n	800bba2 <find_used_entry+0x42>
		}

		flasher.current_addr += 4;
 800bb84:	4b08      	ldr	r3, [pc, #32]	; (800bba8 <find_used_entry+0x48>)
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4a07      	ldr	r2, [pc, #28]	; (800bba8 <find_used_entry+0x48>)
 800bb8c:	6053      	str	r3, [r2, #4]
	while(flasher.current_addr < flasher.flash_start_address+flasher.page_size)
 800bb8e:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <find_used_entry+0x48>)
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <find_used_entry+0x48>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4904      	ldr	r1, [pc, #16]	; (800bba8 <find_used_entry+0x48>)
 800bb98:	8989      	ldrh	r1, [r1, #12]
 800bb9a:	440b      	add	r3, r1
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d3e2      	bcc.n	800bb66 <find_used_entry+0x6>
	}
	return 0;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20000028 	.word	0x20000028

0800bbac <write_word_to_flash>:

void write_word_to_flash(writer_u writer)
{
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	80b8      	strh	r0, [r7, #4]
	flash_pack_u buf;
	buf.buff[0] = 0x5A;
 800bbb4:	235a      	movs	r3, #90	; 0x5a
 800bbb6:	733b      	strb	r3, [r7, #12]
	buf.buff[1] = writer.data[0];
 800bbb8:	793b      	ldrb	r3, [r7, #4]
 800bbba:	737b      	strb	r3, [r7, #13]
	buf.buff[2] = writer.data[1];
 800bbbc:	797b      	ldrb	r3, [r7, #5]
 800bbbe:	73bb      	strb	r3, [r7, #14]
	buf.buff[3] = 0xA5;
 800bbc0:	23a5      	movs	r3, #165	; 0xa5
 800bbc2:	73fb      	strb	r3, [r7, #15]

	find_new_entry();
 800bbc4:	f7ff ff94 	bl	800baf0 <find_new_entry>

	HAL_FLASH_Unlock();
 800bbc8:	f7f9 fc8c 	bl	80054e4 <HAL_FLASH_Unlock>

	if(flasher.new_addr-4 >= flasher.flash_start_address)
 800bbcc:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <write_word_to_flash+0x64>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	1f1a      	subs	r2, r3, #4
 800bbd2:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <write_word_to_flash+0x64>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d309      	bcc.n	800bbee <write_word_to_flash+0x42>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,flasher.new_addr-4,0x00);
 800bbda:	4b0d      	ldr	r3, [pc, #52]	; (800bc10 <write_word_to_flash+0x64>)
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	1f19      	subs	r1, r3, #4
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	2002      	movs	r0, #2
 800bbea:	f7f9 fc0b 	bl	8005404 <HAL_FLASH_Program>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,flasher.new_addr,buf.data);
 800bbee:	4b08      	ldr	r3, [pc, #32]	; (800bc10 <write_word_to_flash+0x64>)
 800bbf0:	6899      	ldr	r1, [r3, #8]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f04f 0400 	mov.w	r4, #0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4623      	mov	r3, r4
 800bbfc:	2002      	movs	r0, #2
 800bbfe:	f7f9 fc01 	bl	8005404 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 800bc02:	f7f9 fc95 	bl	8005530 <HAL_FLASH_Lock>
}
 800bc06:	bf00      	nop
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd90      	pop	{r4, r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20000028 	.word	0x20000028

0800bc14 <usart_rx_callback_register>:

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type);
static void usart_transmit_hook(usart_manage_obj_t *m_obj);

void usart_rx_callback_register(usart_manage_obj_t *m_obj, usart_call_back fun)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  m_obj->call_back_f = fun;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	615a      	str	r2, [r3, #20]
  return;
 800bc24:	bf00      	nop
}
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bc80      	pop	{r7}
 800bc2c:	4770      	bx	lr
	...

0800bc30 <usart1_rx_callback_register>:

void usart1_rx_callback_register(usart_call_back fun)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  usart_rx_callback_register(&usart1_manage_obj, fun);
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	4803      	ldr	r0, [pc, #12]	; (800bc48 <usart1_rx_callback_register+0x18>)
 800bc3c:	f7ff ffea 	bl	800bc14 <usart_rx_callback_register>
  return;
 800bc40:	bf00      	nop
}
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	2000954c 	.word	0x2000954c

0800bc4c <usart3_rx_callback_register>:

void usart3_rx_callback_register(usart_call_back fun)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  usart_rx_callback_register(&usart3_manage_obj, fun);
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	4803      	ldr	r0, [pc, #12]	; (800bc64 <usart3_rx_callback_register+0x18>)
 800bc58:	f7ff ffdc 	bl	800bc14 <usart_rx_callback_register>
  return;
 800bc5c:	bf00      	nop
}
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	2000950c 	.word	0x2000950c

0800bc68 <HAL_UART_RxCpltCallback>:
//
//  return;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <HAL_UART_RxCpltCallback+0x34>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d104      	bne.n	800bc82 <HAL_UART_RxCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart3_manage_obj, INTERRUPT_TYPE_DMA_ALL);
 800bc78:	2102      	movs	r1, #2
 800bc7a:	4809      	ldr	r0, [pc, #36]	; (800bca0 <HAL_UART_RxCpltCallback+0x38>)
 800bc7c:	f000 f9c3 	bl	800c006 <usart_rec_to_buff>
  else if (huart == &huart1)
  {
    usart_rec_to_buff(&usart1_manage_obj, INTERRUPT_TYPE_DMA_ALL);
  }

  return;
 800bc80:	e008      	b.n	800bc94 <HAL_UART_RxCpltCallback+0x2c>
  else if (huart == &huart1)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a07      	ldr	r2, [pc, #28]	; (800bca4 <HAL_UART_RxCpltCallback+0x3c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d104      	bne.n	800bc94 <HAL_UART_RxCpltCallback+0x2c>
    usart_rec_to_buff(&usart1_manage_obj, INTERRUPT_TYPE_DMA_ALL);
 800bc8a:	2102      	movs	r1, #2
 800bc8c:	4806      	ldr	r0, [pc, #24]	; (800bca8 <HAL_UART_RxCpltCallback+0x40>)
 800bc8e:	f000 f9ba 	bl	800c006 <usart_rec_to_buff>
  return;
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
}
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20009e00 	.word	0x20009e00
 800bca0:	2000950c 	.word	0x2000950c
 800bca4:	20009f0c 	.word	0x20009f0c
 800bca8:	2000954c 	.word	0x2000954c

0800bcac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a09      	ldr	r2, [pc, #36]	; (800bcdc <HAL_UART_TxCpltCallback+0x30>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d103      	bne.n	800bcc4 <HAL_UART_TxCpltCallback+0x18>
  {
    usart_transmit_hook(&usart3_manage_obj);
 800bcbc:	4808      	ldr	r0, [pc, #32]	; (800bce0 <HAL_UART_TxCpltCallback+0x34>)
 800bcbe:	f000 f96b 	bl	800bf98 <usart_transmit_hook>
  else if (huart == &huart1)
  {
    usart_transmit_hook(&usart1_manage_obj);
  }

  return;
 800bcc2:	e007      	b.n	800bcd4 <HAL_UART_TxCpltCallback+0x28>
  else if (huart == &huart1)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a07      	ldr	r2, [pc, #28]	; (800bce4 <HAL_UART_TxCpltCallback+0x38>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d103      	bne.n	800bcd4 <HAL_UART_TxCpltCallback+0x28>
    usart_transmit_hook(&usart1_manage_obj);
 800bccc:	4806      	ldr	r0, [pc, #24]	; (800bce8 <HAL_UART_TxCpltCallback+0x3c>)
 800bcce:	f000 f963 	bl	800bf98 <usart_transmit_hook>
  return;
 800bcd2:	bf00      	nop
 800bcd4:	bf00      	nop
}
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	20009e00 	.word	0x20009e00
 800bce0:	2000950c 	.word	0x2000950c
 800bce4:	20009f0c 	.word	0x20009f0c
 800bce8:	2000954c 	.word	0x2000954c

0800bcec <usart3_idle_callback>:

void usart3_idle_callback(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <usart3_idle_callback+0x3c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 0310 	and.w	r3, r3, #16
 800bcfc:	2b10      	cmp	r3, #16
 800bcfe:	d10e      	bne.n	800bd1e <usart3_idle_callback+0x32>
  {
    __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 800bd00:	2300      	movs	r3, #0
 800bd02:	607b      	str	r3, [r7, #4]
 800bd04:	4b08      	ldr	r3, [pc, #32]	; (800bd28 <usart3_idle_callback+0x3c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	607b      	str	r3, [r7, #4]
 800bd0c:	4b06      	ldr	r3, [pc, #24]	; (800bd28 <usart3_idle_callback+0x3c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	607b      	str	r3, [r7, #4]
 800bd14:	687b      	ldr	r3, [r7, #4]
    usart_rec_to_buff(&usart3_manage_obj, INTERRUPT_TYPE_UART);
 800bd16:	2100      	movs	r1, #0
 800bd18:	4804      	ldr	r0, [pc, #16]	; (800bd2c <usart3_idle_callback+0x40>)
 800bd1a:	f000 f974 	bl	800c006 <usart_rec_to_buff>
  }
}
 800bd1e:	bf00      	nop
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20009e00 	.word	0x20009e00
 800bd2c:	2000950c 	.word	0x2000950c

0800bd30 <usart1_idle_callback>:

void usart1_idle_callback(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800bd36:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <usart1_idle_callback+0x3c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b10      	cmp	r3, #16
 800bd42:	d10e      	bne.n	800bd62 <usart1_idle_callback+0x32>
  {
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800bd44:	2300      	movs	r3, #0
 800bd46:	607b      	str	r3, [r7, #4]
 800bd48:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <usart1_idle_callback+0x3c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	607b      	str	r3, [r7, #4]
 800bd50:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <usart1_idle_callback+0x3c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	607b      	str	r3, [r7, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
    usart_rec_to_buff(&usart1_manage_obj, INTERRUPT_TYPE_UART);
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4804      	ldr	r0, [pc, #16]	; (800bd70 <usart1_idle_callback+0x40>)
 800bd5e:	f000 f952 	bl	800c006 <usart_rec_to_buff>
  }
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20009f0c 	.word	0x20009f0c
 800bd70:	2000954c 	.word	0x2000954c

0800bd74 <usart3_manage_init>:

void usart3_manage_init(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	af00      	add	r7, sp, #0
  usart3_manage_obj.rx_buffer = usart3_rx_buff;
 800bd78:	4b18      	ldr	r3, [pc, #96]	; (800bddc <usart3_manage_init+0x68>)
 800bd7a:	4a19      	ldr	r2, [pc, #100]	; (800bde0 <usart3_manage_init+0x6c>)
 800bd7c:	60da      	str	r2, [r3, #12]
  usart3_manage_obj.rx_buffer_size = USART3_RX_BUFFER_SIZE;
 800bd7e:	4b17      	ldr	r3, [pc, #92]	; (800bddc <usart3_manage_init+0x68>)
 800bd80:	2280      	movs	r2, #128	; 0x80
 800bd82:	811a      	strh	r2, [r3, #8]
  usart3_manage_obj.dma_h = &hdma_usart3_rx;
 800bd84:	4b15      	ldr	r3, [pc, #84]	; (800bddc <usart3_manage_init+0x68>)
 800bd86:	4a17      	ldr	r2, [pc, #92]	; (800bde4 <usart3_manage_init+0x70>)
 800bd88:	605a      	str	r2, [r3, #4]
  usart3_manage_obj.uart_h = &huart3;
 800bd8a:	4b14      	ldr	r3, [pc, #80]	; (800bddc <usart3_manage_init+0x68>)
 800bd8c:	4a16      	ldr	r2, [pc, #88]	; (800bde8 <usart3_manage_init+0x74>)
 800bd8e:	601a      	str	r2, [r3, #0]
  usart3_manage_obj.tx_fifo_buffer = usart3_tx_fifo_buff;
 800bd90:	4b12      	ldr	r3, [pc, #72]	; (800bddc <usart3_manage_init+0x68>)
 800bd92:	4a16      	ldr	r2, [pc, #88]	; (800bdec <usart3_manage_init+0x78>)
 800bd94:	639a      	str	r2, [r3, #56]	; 0x38
  usart3_manage_obj.tx_fifo_size = USART3_TX_FIFO_SIZE;
 800bd96:	4b11      	ldr	r3, [pc, #68]	; (800bddc <usart3_manage_init+0x68>)
 800bd98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  usart3_manage_obj.tx_buffer_size = USART3_TX_BUFFER_SIZE;
 800bd9e:	4b0f      	ldr	r3, [pc, #60]	; (800bddc <usart3_manage_init+0x68>)
 800bda0:	2280      	movs	r2, #128	; 0x80
 800bda2:	839a      	strh	r2, [r3, #28]
  usart3_manage_obj.tx_buffer = usart3_tx_buff;
 800bda4:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <usart3_manage_init+0x68>)
 800bda6:	4a12      	ldr	r2, [pc, #72]	; (800bdf0 <usart3_manage_init+0x7c>)
 800bda8:	619a      	str	r2, [r3, #24]
  usart3_manage_obj.is_sending = 0;
 800bdaa:	4b0c      	ldr	r3, [pc, #48]	; (800bddc <usart3_manage_init+0x68>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  fifo_s_init(&(usart3_manage_obj.tx_fifo), usart3_tx_fifo_buff, USART3_TX_FIFO_SIZE);
 800bdb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdb6:	490d      	ldr	r1, [pc, #52]	; (800bdec <usart3_manage_init+0x78>)
 800bdb8:	480e      	ldr	r0, [pc, #56]	; (800bdf4 <usart3_manage_init+0x80>)
 800bdba:	f001 f9a9 	bl	800d110 <fifo_s_init>

  HAL_UART_Receive_DMA(&huart3, usart3_rx_buff, USART3_RX_BUFFER_SIZE);
 800bdbe:	2280      	movs	r2, #128	; 0x80
 800bdc0:	4907      	ldr	r1, [pc, #28]	; (800bde0 <usart3_manage_init+0x6c>)
 800bdc2:	4809      	ldr	r0, [pc, #36]	; (800bde8 <usart3_manage_init+0x74>)
 800bdc4:	f7fb fce8 	bl	8007798 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 800bdc8:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <usart3_manage_init+0x74>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68da      	ldr	r2, [r3, #12]
 800bdce:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <usart3_manage_init+0x74>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f042 0210 	orr.w	r2, r2, #16
 800bdd6:	60da      	str	r2, [r3, #12]
}
 800bdd8:	bf00      	nop
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	2000950c 	.word	0x2000950c
 800bde0:	2000920c 	.word	0x2000920c
 800bde4:	20009dbc 	.word	0x20009dbc
 800bde8:	20009e00 	.word	0x20009e00
 800bdec:	2000930c 	.word	0x2000930c
 800bdf0:	2000928c 	.word	0x2000928c
 800bdf4:	2000952c 	.word	0x2000952c

0800bdf8 <usart1_manage_init>:

void usart1_manage_init(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
  usart1_manage_obj.rx_buffer = usart1_rx_buff;
 800bdfc:	4b1a      	ldr	r3, [pc, #104]	; (800be68 <usart1_manage_init+0x70>)
 800bdfe:	4a1b      	ldr	r2, [pc, #108]	; (800be6c <usart1_manage_init+0x74>)
 800be00:	60da      	str	r2, [r3, #12]
  usart1_manage_obj.rx_buffer_size = USART1_RX_BUFFER_SIZE;
 800be02:	4b19      	ldr	r3, [pc, #100]	; (800be68 <usart1_manage_init+0x70>)
 800be04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be08:	811a      	strh	r2, [r3, #8]
  usart1_manage_obj.dma_h = &hdma_usart1_rx;
 800be0a:	4b17      	ldr	r3, [pc, #92]	; (800be68 <usart1_manage_init+0x70>)
 800be0c:	4a18      	ldr	r2, [pc, #96]	; (800be70 <usart1_manage_init+0x78>)
 800be0e:	605a      	str	r2, [r3, #4]
  usart1_manage_obj.uart_h = &huart1;
 800be10:	4b15      	ldr	r3, [pc, #84]	; (800be68 <usart1_manage_init+0x70>)
 800be12:	4a18      	ldr	r2, [pc, #96]	; (800be74 <usart1_manage_init+0x7c>)
 800be14:	601a      	str	r2, [r3, #0]
  usart1_manage_obj.tx_fifo_buffer = usart1_tx_fifo_buff;
 800be16:	4b14      	ldr	r3, [pc, #80]	; (800be68 <usart1_manage_init+0x70>)
 800be18:	4a17      	ldr	r2, [pc, #92]	; (800be78 <usart1_manage_init+0x80>)
 800be1a:	639a      	str	r2, [r3, #56]	; 0x38
  usart1_manage_obj.tx_fifo_size = USART1_TX_FIFO_SIZE;
 800be1c:	4b12      	ldr	r3, [pc, #72]	; (800be68 <usart1_manage_init+0x70>)
 800be1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be22:	879a      	strh	r2, [r3, #60]	; 0x3c
  usart1_manage_obj.tx_buffer_size = USART1_TX_BUFFER_SIZE;
 800be24:	4b10      	ldr	r3, [pc, #64]	; (800be68 <usart1_manage_init+0x70>)
 800be26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be2a:	839a      	strh	r2, [r3, #28]
  usart1_manage_obj.tx_buffer = usart1_tx_buff;
 800be2c:	4b0e      	ldr	r3, [pc, #56]	; (800be68 <usart1_manage_init+0x70>)
 800be2e:	4a13      	ldr	r2, [pc, #76]	; (800be7c <usart1_manage_init+0x84>)
 800be30:	619a      	str	r2, [r3, #24]
  usart1_manage_obj.is_sending = 0;
 800be32:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <usart1_manage_init+0x70>)
 800be34:	2200      	movs	r2, #0
 800be36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  fifo_s_init(&(usart1_manage_obj.tx_fifo), usart1_tx_fifo_buff, USART1_TX_FIFO_SIZE);
 800be3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be3e:	490e      	ldr	r1, [pc, #56]	; (800be78 <usart1_manage_init+0x80>)
 800be40:	480f      	ldr	r0, [pc, #60]	; (800be80 <usart1_manage_init+0x88>)
 800be42:	f001 f965 	bl	800d110 <fifo_s_init>

  HAL_UART_Receive_DMA(&huart1, usart1_rx_buff, USART1_RX_BUFFER_SIZE);
 800be46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be4a:	4908      	ldr	r1, [pc, #32]	; (800be6c <usart1_manage_init+0x74>)
 800be4c:	4809      	ldr	r0, [pc, #36]	; (800be74 <usart1_manage_init+0x7c>)
 800be4e:	f7fb fca3 	bl	8007798 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <usart1_manage_init+0x7c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68da      	ldr	r2, [r3, #12]
 800be58:	4b06      	ldr	r3, [pc, #24]	; (800be74 <usart1_manage_init+0x7c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f042 0210 	orr.w	r2, r2, #16
 800be60:	60da      	str	r2, [r3, #12]
}
 800be62:	bf00      	nop
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	2000954c 	.word	0x2000954c
 800be6c:	20008a0c 	.word	0x20008a0c
 800be70:	20009ec8 	.word	0x20009ec8
 800be74:	20009f0c 	.word	0x20009f0c
 800be78:	20008e0c 	.word	0x20008e0c
 800be7c:	20008c0c 	.word	0x20008c0c
 800be80:	2000956c 	.word	0x2000956c

0800be84 <usart3_transmit>:

  return 0;
}

void usart3_transmit(uint8_t *buff, uint16_t len)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	807b      	strh	r3, [r7, #2]
  usart_transmit(&usart3_manage_obj, buff, len);
 800be90:	887b      	ldrh	r3, [r7, #2]
 800be92:	461a      	mov	r2, r3
 800be94:	6879      	ldr	r1, [r7, #4]
 800be96:	4803      	ldr	r0, [pc, #12]	; (800bea4 <usart3_transmit+0x20>)
 800be98:	f000 f818 	bl	800becc <usart_transmit>
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	2000950c 	.word	0x2000950c

0800bea8 <usart1_transmit>:

void usart1_transmit(uint8_t *buff, uint16_t len)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	807b      	strh	r3, [r7, #2]
  usart_transmit(&usart1_manage_obj, buff, len);
 800beb4:	887b      	ldrh	r3, [r7, #2]
 800beb6:	461a      	mov	r2, r3
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4803      	ldr	r0, [pc, #12]	; (800bec8 <usart1_transmit+0x20>)
 800bebc:	f000 f806 	bl	800becc <usart_transmit>
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	2000954c 	.word	0x2000954c

0800becc <usart_transmit>:

UART_Err usart_transmit(usart_manage_obj_t *m_obj, uint8_t *buf, uint16_t len)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	4613      	mov	r3, r2
 800bed8:	80fb      	strh	r3, [r7, #6]
  uint16_t to_send_len;
  uint16_t to_tx_fifo_len;

  if (m_obj->is_sending == 0)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d122      	bne.n	800bf2a <usart_transmit+0x5e>
  {
    if (len < m_obj->tx_buffer_size)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	8b9b      	ldrh	r3, [r3, #28]
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	429a      	cmp	r2, r3
 800beec:	d204      	bcs.n	800bef8 <usart_transmit+0x2c>
    {
      to_send_len = len;
 800beee:	88fb      	ldrh	r3, [r7, #6]
 800bef0:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	82bb      	strh	r3, [r7, #20]
 800bef6:	e027      	b.n	800bf48 <usart_transmit+0x7c>
    }
    else if (len < m_obj->tx_buffer_size + m_obj->tx_fifo_size)
 800bef8:	88fa      	ldrh	r2, [r7, #6]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	8b9b      	ldrh	r3, [r3, #28]
 800befe:	4619      	mov	r1, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf04:	440b      	add	r3, r1
 800bf06:	429a      	cmp	r2, r3
 800bf08:	da08      	bge.n	800bf1c <usart_transmit+0x50>
    {
      to_send_len = m_obj->tx_buffer_size;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	8b9b      	ldrh	r3, [r3, #28]
 800bf0e:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = len - m_obj->tx_buffer_size;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8b9b      	ldrh	r3, [r3, #28]
 800bf14:	88fa      	ldrh	r2, [r7, #6]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	82bb      	strh	r3, [r7, #20]
 800bf1a:	e015      	b.n	800bf48 <usart_transmit+0x7c>
    }
    else
    {
      to_send_len = m_obj->tx_buffer_size;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	8b9b      	ldrh	r3, [r3, #28]
 800bf20:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = m_obj->tx_fifo_size;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf26:	82bb      	strh	r3, [r7, #20]
 800bf28:	e00e      	b.n	800bf48 <usart_transmit+0x7c>
    }
  }
  else
  {
    if (len < m_obj->tx_fifo_size)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf2e:	88fa      	ldrh	r2, [r7, #6]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d204      	bcs.n	800bf3e <usart_transmit+0x72>
    {
      to_send_len = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = len;
 800bf38:	88fb      	ldrh	r3, [r7, #6]
 800bf3a:	82bb      	strh	r3, [r7, #20]
 800bf3c:	e004      	b.n	800bf48 <usart_transmit+0x7c>
    }
    else
    {
      to_send_len = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = m_obj->tx_fifo_size;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf46:	82bb      	strh	r3, [r7, #20]
    }
  }

  if (to_send_len > 0)
 800bf48:	8afb      	ldrh	r3, [r7, #22]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d012      	beq.n	800bf74 <usart_transmit+0xa8>
  {
    memcpy(m_obj->tx_buffer, buf, to_send_len);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	8afa      	ldrh	r2, [r7, #22]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f001 fa9e 	bl	800d498 <memcpy>
    m_obj->is_sending = 1;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_UART_Transmit_DMA(m_obj->uart_h, m_obj->tx_buffer, to_send_len);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	8afa      	ldrh	r2, [r7, #22]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	f7fb fba6 	bl	80076c0 <HAL_UART_Transmit_DMA>
  }
  if (to_tx_fifo_len > 0)
 800bf74:	8abb      	ldrh	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d009      	beq.n	800bf8e <usart_transmit+0xc2>
  {
    fifo_s_puts(&(m_obj->tx_fifo), (char *)(buf) + to_send_len, to_tx_fifo_len);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f103 0020 	add.w	r0, r3, #32
 800bf80:	8afb      	ldrh	r3, [r7, #22]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	8aba      	ldrh	r2, [r7, #20]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f001 f8e2 	bl	800d152 <fifo_s_puts>
  }

  return ERR_NORAML;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <usart_transmit_hook>:

static void usart_transmit_hook(usart_manage_obj_t *m_obj)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint16_t fifo_data_num = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	81bb      	strh	r3, [r7, #12]
  uint16_t send_num = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	81fb      	strh	r3, [r7, #14]

  fifo_data_num = m_obj->tx_fifo.used_num;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	81bb      	strh	r3, [r7, #12]

  if (fifo_data_num != 0)
 800bfae:	89bb      	ldrh	r3, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d020      	beq.n	800bff6 <usart_transmit_hook+0x5e>
  {
    if (fifo_data_num < m_obj->tx_buffer_size)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8b9b      	ldrh	r3, [r3, #28]
 800bfb8:	89ba      	ldrh	r2, [r7, #12]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d202      	bcs.n	800bfc4 <usart_transmit_hook+0x2c>
    {
      send_num = fifo_data_num;
 800bfbe:	89bb      	ldrh	r3, [r7, #12]
 800bfc0:	81fb      	strh	r3, [r7, #14]
 800bfc2:	e002      	b.n	800bfca <usart_transmit_hook+0x32>
    }
    else
    {
      send_num = m_obj->tx_buffer_size;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	8b9b      	ldrh	r3, [r3, #28]
 800bfc8:	81fb      	strh	r3, [r7, #14]
    }
    fifo_s_gets(&(m_obj->tx_fifo), (char *)(m_obj->tx_buffer), send_num);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f103 0020 	add.w	r0, r3, #32
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	89fa      	ldrh	r2, [r7, #14]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f001 f969 	bl	800d2ae <fifo_s_gets>
    m_obj->is_sending = 1;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_UART_Transmit_DMA(m_obj->uart_h, m_obj->tx_buffer, send_num);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	89fa      	ldrh	r2, [r7, #14]
 800bfee:	4619      	mov	r1, r3
 800bff0:	f7fb fb66 	bl	80076c0 <HAL_UART_Transmit_DMA>
  }
  else
  {
    m_obj->is_sending = 0;
  }
  return;
 800bff4:	e004      	b.n	800c000 <usart_transmit_hook+0x68>
    m_obj->is_sending = 0;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  return;
 800bffe:	bf00      	nop
}
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <usart_rec_to_buff>:

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b088      	sub	sp, #32
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	460b      	mov	r3, r1
 800c010:	70fb      	strb	r3, [r7, #3]
  uint16_t read_end_ptr = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	83fb      	strh	r3, [r7, #30]
  uint16_t read_length = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	83bb      	strh	r3, [r7, #28]
  uint16_t read_success_length = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	837b      	strh	r3, [r7, #26]
  uint16_t read_start_ptr = m_obj->read_start_index;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	8a1b      	ldrh	r3, [r3, #16]
 800c022:	833b      	strh	r3, [r7, #24]
  uint8_t *pdata = m_obj->rx_buffer;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	617b      	str	r3, [r7, #20]

  UNUSED(read_success_length);

  uint16_t buff_left = m_obj->dma_h->Instance->CNDTR;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	827b      	strh	r3, [r7, #18]

  if (int_type == INTERRUPT_TYPE_UART)
 800c034:	78fb      	ldrb	r3, [r7, #3]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d104      	bne.n	800c044 <usart_rec_to_buff+0x3e>
  {
    read_end_ptr = m_obj->rx_buffer_size - buff_left;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	891a      	ldrh	r2, [r3, #8]
 800c03e:	8a7b      	ldrh	r3, [r7, #18]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	83fb      	strh	r3, [r7, #30]
//  if (int_type == INTERRUPT_TYPE_DMA_HALF)
//  {
//    read_end_ptr = m_obj->rx_buffer_size / 2;
//  }

  if (int_type == INTERRUPT_TYPE_DMA_ALL)
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	2b02      	cmp	r3, #2
 800c048:	d102      	bne.n	800c050 <usart_rec_to_buff+0x4a>
  {
    read_end_ptr = m_obj->rx_buffer_size;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	891b      	ldrh	r3, [r3, #8]
 800c04e:	83fb      	strh	r3, [r7, #30]
  }

  read_length = read_end_ptr - m_obj->read_start_index;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8a1b      	ldrh	r3, [r3, #16]
 800c054:	8bfa      	ldrh	r2, [r7, #30]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	83bb      	strh	r3, [r7, #28]

  if (m_obj->call_back_f != NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <usart_rec_to_buff+0x74>
  {
    uint8_t *read_ptr = pdata + read_start_ptr;
 800c062:	8b3b      	ldrh	r3, [r7, #24]
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	4413      	add	r3, r2
 800c068:	60fb      	str	r3, [r7, #12]
    read_success_length = m_obj->call_back_f(read_ptr, read_length);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	8bba      	ldrh	r2, [r7, #28]
 800c070:	4611      	mov	r1, r2
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	4798      	blx	r3
 800c076:	4603      	mov	r3, r0
 800c078:	837b      	strh	r3, [r7, #26]
  }

  m_obj->read_start_index = (m_obj->read_start_index + read_length) % (m_obj->rx_buffer_size);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	8a1b      	ldrh	r3, [r3, #16]
 800c07e:	461a      	mov	r2, r3
 800c080:	8bbb      	ldrh	r3, [r7, #28]
 800c082:	4413      	add	r3, r2
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	8912      	ldrh	r2, [r2, #8]
 800c088:	fb93 f1f2 	sdiv	r1, r3, r2
 800c08c:	fb02 f201 	mul.w	r2, r2, r1
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	b29a      	uxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	821a      	strh	r2, [r3, #16]

  return;
 800c098:	bf00      	nop
}
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <abs_limit>:
#include "pid.h"

#include "sys.h"

void abs_limit(float *a, float ABS_MAX)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  if (*a > ABS_MAX)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6838      	ldr	r0, [r7, #0]
 800c0b2:	f7f5 f80f 	bl	80010d4 <__aeabi_fcmplt>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <abs_limit+0x22>
    *a = ABS_MAX;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	f7f5 f800 	bl	80010d4 <__aeabi_fcmplt>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d100      	bne.n	800c0dc <abs_limit+0x3c>
    *a = -ABS_MAX;
}
 800c0da:	e004      	b.n	800c0e6 <abs_limit+0x46>
    *a = -ABS_MAX;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	601a      	str	r2, [r3, #0]
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
 800c0fa:	603b      	str	r3, [r7, #0]

  pid->param.inte_limit = inte_limit;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	609a      	str	r2, [r3, #8]
}
 800c11a:	bf00      	nop
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	bc80      	pop	{r7}
 800c122:	4770      	bx	lr

0800c124 <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
  pid->param.p = kp;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f04f 0200 	mov.w	r2, #0
 800c14a:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f04f 0200 	mov.w	r2, #0
 800c162:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	bc80      	pop	{r7}
 800c16c:	4770      	bx	lr

0800c16e <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 800c16e:	b590      	push	{r4, r7, lr}
 800c170:	b085      	sub	sp, #20
 800c172:	af00      	add	r7, sp, #0
 800c174:	60f8      	str	r0, [r7, #12]
 800c176:	60b9      	str	r1, [r7, #8]
 800c178:	607a      	str	r2, [r7, #4]
  pid->get = get;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	61da      	str	r2, [r3, #28]
  pid->set = set;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 800c186:	68b9      	ldr	r1, [r7, #8]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7f4 fcfb 	bl	8000b84 <__aeabi_fsub>
 800c18e:	4603      	mov	r3, r0
 800c190:	461a      	mov	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	621a      	str	r2, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	f04f 0100 	mov.w	r1, #0
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f4 ff8e 	bl	80010c0 <__aeabi_fcmpeq>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10f      	bne.n	800c1ca <pid_calculate+0x5c>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	f7f4 ffa9 	bl	8001110 <__aeabi_fcmpgt>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <pid_calculate+0x5c>
    return 0;
 800c1c4:	f04f 0300 	mov.w	r3, #0
 800c1c8:	e059      	b.n	800c27e <pid_calculate+0x110>

  pid->pout = pid->param.p * pid->err;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f7f4 fddf 	bl	8000d98 <__aeabi_fmul>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f7f4 fdd1 	bl	8000d98 <__aeabi_fmul>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f7f4 fcc4 	bl	8000b88 <__addsf3>
 800c200:	4603      	mov	r3, r0
 800c202:	461a      	mov	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689c      	ldr	r4, [r3, #8]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6a1a      	ldr	r2, [r3, #32]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	4619      	mov	r1, r3
 800c216:	4610      	mov	r0, r2
 800c218:	f7f4 fcb4 	bl	8000b84 <__aeabi_fsub>
 800c21c:	4603      	mov	r3, r0
 800c21e:	4619      	mov	r1, r3
 800c220:	4620      	mov	r0, r4
 800c222:	f7f4 fdb9 	bl	8000d98 <__aeabi_fmul>
 800c226:	4603      	mov	r3, r0
 800c228:	461a      	mov	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	631a      	str	r2, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f7ff ff30 	bl	800c0a0 <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	4619      	mov	r1, r3
 800c24a:	4610      	mov	r0, r2
 800c24c:	f7f4 fc9c 	bl	8000b88 <__addsf3>
 800c250:	4603      	mov	r3, r0
 800c252:	461a      	mov	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	f7f4 fc94 	bl	8000b88 <__addsf3>
 800c260:	4603      	mov	r3, r0
 800c262:	461a      	mov	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	635a      	str	r2, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	4619      	mov	r1, r3
 800c274:	4610      	mov	r0, r2
 800c276:	f7ff ff13 	bl	800c0a0 <abs_limit>

  return pid->out;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	bd90      	pop	{r4, r7, pc}
	...

0800c288 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 800c288:	b590      	push	{r4, r7, lr}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af02      	add	r7, sp, #8
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	603b      	str	r3, [r7, #0]
  pid->f_param_init = pid_param_init;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4a0d      	ldr	r2, [pc, #52]	; (800c2d0 <pid_struct_init+0x48>)
 800c29a:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4a0d      	ldr	r2, [pc, #52]	; (800c2d4 <pid_struct_init+0x4c>)
 800c2a0:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	68b9      	ldr	r1, [r7, #8]
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	47a0      	blx	r4
  pid->f_pid_reset(pid, kp, ki, kd);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	6a3a      	ldr	r2, [r7, #32]
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	47a0      	blx	r4
}
 800c2c6:	bf00      	nop
 800c2c8:	3714      	adds	r7, #20
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd90      	pop	{r4, r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0800c0ef 	.word	0x0800c0ef
 800c2d4:	0800c125 	.word	0x0800c125

0800c2d8 <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d102      	bne.n	800c2f2 <device_register+0x1a>
    return -WT_INVAL;
 800c2ec:	f06f 0301 	mvn.w	r3, #1
 800c2f0:	e019      	b.n	800c326 <device_register+0x4e>
  if (device_find(name) != NULL)
 800c2f2:	68b8      	ldr	r0, [r7, #8]
 800c2f4:	f000 f81b 	bl	800c32e <device_find>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <device_register+0x2c>
    return -WT_EXISTED;
 800c2fe:	f06f 0302 	mvn.w	r3, #2
 800c302:	e010      	b.n	800c326 <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	2100      	movs	r1, #0
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 fe62 	bl	800cfd4 <object_init>

  dev->flag = flags;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	88fa      	ldrh	r2, [r7, #6]
 800c314:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	861a      	strh	r2, [r3, #48]	; 0x30

  return WT_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <device_find>:

  return WT_OK;
}

device_t device_find(const char *name)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 800c336:	2100      	movs	r1, #0
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fe85 	bl	800d048 <object_find>
 800c33e:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 800c340:	68fb      	ldr	r3, [r7, #12]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <m62429_init>:
							/*   -64db, -68db, -72db, -76db	*/
								0x0010,0x0000};
							/*   -80db, -84db	*/

void m62429_init(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
	uint8_t init_vol = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	71fb      	strb	r3, [r7, #7]
	m62429_control(&init_vol,1);
 800c356:	1dfb      	adds	r3, r7, #7
 800c358:	2101      	movs	r1, #1
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 f80a 	bl	800c374 <m62429_control>
	protocol_rcv_cmd_register(SET_VOLUME,m62429_control);
 800c360:	4903      	ldr	r1, [pc, #12]	; (800c370 <m62429_init+0x24>)
 800c362:	2022      	movs	r0, #34	; 0x22
 800c364:	f7f5 fa70 	bl	8001848 <protocol_rcv_cmd_register>
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	0800c375 	.word	0x0800c375

0800c374 <m62429_control>:

int8_t m62429_control(uint8_t *volume_data,uint16_t len)  //Vol_dat = 0->84: 0db -> -∞
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	807b      	strh	r3, [r7, #2]
	uint16_t D_a=0;
 800c380:	2300      	movs	r3, #0
 800c382:	82fb      	strh	r3, [r7, #22]
	uint8_t  Send_bit;
	uint16_t channel_value = 0x4000;  // Both_Channel_Value	:0x0000	 ,  One_Channel_Value	:0x4000	 ,  Two_Channel_Value	:0xc000
 800c384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c388:	823b      	strh	r3, [r7, #16]
	uint16_t volume_temp1,volume_temp2;
	uint16_t M62429_VolumeDATA;

	volume_temp1 = Volume_H[volume_data[0] / 4];	//D2~D6
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	089b      	lsrs	r3, r3, #2
 800c390:	b2db      	uxtb	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	4b46      	ldr	r3, [pc, #280]	; (800c4b0 <m62429_control+0x13c>)
 800c396:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c39a:	81fb      	strh	r3, [r7, #14]
	volume_temp2 = Volume_L[volume_data[0] % 4];	//D7~D8
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	4a43      	ldr	r2, [pc, #268]	; (800c4b4 <m62429_control+0x140>)
 800c3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3aa:	81bb      	strh	r3, [r7, #12]

	M62429_VolumeDATA = (volume_temp1 << 9) + (volume_temp2 << 7) + channel_value + CONTROL_D9D10;		//count the 11bits volume data
 800c3ac:	89fb      	ldrh	r3, [r7, #14]
 800c3ae:	025b      	lsls	r3, r3, #9
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	89bb      	ldrh	r3, [r7, #12]
 800c3b4:	01db      	lsls	r3, r3, #7
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	8a3b      	ldrh	r3, [r7, #16]
 800c3be:	4413      	add	r3, r2
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3360      	adds	r3, #96	; 0x60
 800c3c4:	827b      	strh	r3, [r7, #18]

	for(Send_bit = 0;Send_bit < 11;Send_bit++)
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	757b      	strb	r3, [r7, #21]
 800c3ca:	e047      	b.n	800c45c <m62429_control+0xe8>
	{
		DAT_L;
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2140      	movs	r1, #64	; 0x40
 800c3d0:	4839      	ldr	r0, [pc, #228]	; (800c4b8 <m62429_control+0x144>)
 800c3d2:	f7f9 fb10 	bl	80059f6 <HAL_GPIO_WritePin>
		for(D_a=0;D_a<20;D_a++){;}
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	82fb      	strh	r3, [r7, #22]
 800c3da:	e002      	b.n	800c3e2 <m62429_control+0x6e>
 800c3dc:	8afb      	ldrh	r3, [r7, #22]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	82fb      	strh	r3, [r7, #22]
 800c3e2:	8afb      	ldrh	r3, [r7, #22]
 800c3e4:	2b13      	cmp	r3, #19
 800c3e6:	d9f9      	bls.n	800c3dc <m62429_control+0x68>
		CLK_L;
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2180      	movs	r1, #128	; 0x80
 800c3ec:	4832      	ldr	r0, [pc, #200]	; (800c4b8 <m62429_control+0x144>)
 800c3ee:	f7f9 fb02 	bl	80059f6 <HAL_GPIO_WritePin>
		for(D_a=0;D_a<20;D_a++){;}
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	82fb      	strh	r3, [r7, #22]
 800c3f6:	e002      	b.n	800c3fe <m62429_control+0x8a>
 800c3f8:	8afb      	ldrh	r3, [r7, #22]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	82fb      	strh	r3, [r7, #22]
 800c3fe:	8afb      	ldrh	r3, [r7, #22]
 800c400:	2b13      	cmp	r3, #19
 800c402:	d9f9      	bls.n	800c3f8 <m62429_control+0x84>
		if((M62429_VolumeDATA & 0x8000) == 0x8000)
 800c404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	da05      	bge.n	800c418 <m62429_control+0xa4>
		{
			DAT_H;
 800c40c:	2201      	movs	r2, #1
 800c40e:	2140      	movs	r1, #64	; 0x40
 800c410:	4829      	ldr	r0, [pc, #164]	; (800c4b8 <m62429_control+0x144>)
 800c412:	f7f9 faf0 	bl	80059f6 <HAL_GPIO_WritePin>
 800c416:	e004      	b.n	800c422 <m62429_control+0xae>
		}
		else
		{
			DAT_L;
 800c418:	2200      	movs	r2, #0
 800c41a:	2140      	movs	r1, #64	; 0x40
 800c41c:	4826      	ldr	r0, [pc, #152]	; (800c4b8 <m62429_control+0x144>)
 800c41e:	f7f9 faea 	bl	80059f6 <HAL_GPIO_WritePin>
		}
		for(D_a=0;D_a<20;D_a++){;}
 800c422:	2300      	movs	r3, #0
 800c424:	82fb      	strh	r3, [r7, #22]
 800c426:	e002      	b.n	800c42e <m62429_control+0xba>
 800c428:	8afb      	ldrh	r3, [r7, #22]
 800c42a:	3301      	adds	r3, #1
 800c42c:	82fb      	strh	r3, [r7, #22]
 800c42e:	8afb      	ldrh	r3, [r7, #22]
 800c430:	2b13      	cmp	r3, #19
 800c432:	d9f9      	bls.n	800c428 <m62429_control+0xb4>
		CLK_H;
 800c434:	2201      	movs	r2, #1
 800c436:	2180      	movs	r1, #128	; 0x80
 800c438:	481f      	ldr	r0, [pc, #124]	; (800c4b8 <m62429_control+0x144>)
 800c43a:	f7f9 fadc 	bl	80059f6 <HAL_GPIO_WritePin>
		for(D_a=0;D_a<20;D_a++){;}
 800c43e:	2300      	movs	r3, #0
 800c440:	82fb      	strh	r3, [r7, #22]
 800c442:	e002      	b.n	800c44a <m62429_control+0xd6>
 800c444:	8afb      	ldrh	r3, [r7, #22]
 800c446:	3301      	adds	r3, #1
 800c448:	82fb      	strh	r3, [r7, #22]
 800c44a:	8afb      	ldrh	r3, [r7, #22]
 800c44c:	2b13      	cmp	r3, #19
 800c44e:	d9f9      	bls.n	800c444 <m62429_control+0xd0>
		M62429_VolumeDATA <<= 1;
 800c450:	8a7b      	ldrh	r3, [r7, #18]
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	827b      	strh	r3, [r7, #18]
	for(Send_bit = 0;Send_bit < 11;Send_bit++)
 800c456:	7d7b      	ldrb	r3, [r7, #21]
 800c458:	3301      	adds	r3, #1
 800c45a:	757b      	strb	r3, [r7, #21]
 800c45c:	7d7b      	ldrb	r3, [r7, #21]
 800c45e:	2b0a      	cmp	r3, #10
 800c460:	d9b4      	bls.n	800c3cc <m62429_control+0x58>
	}

	DAT_H;
 800c462:	2201      	movs	r2, #1
 800c464:	2140      	movs	r1, #64	; 0x40
 800c466:	4814      	ldr	r0, [pc, #80]	; (800c4b8 <m62429_control+0x144>)
 800c468:	f7f9 fac5 	bl	80059f6 <HAL_GPIO_WritePin>
	for(D_a=0;D_a<20;D_a++){;}
 800c46c:	2300      	movs	r3, #0
 800c46e:	82fb      	strh	r3, [r7, #22]
 800c470:	e002      	b.n	800c478 <m62429_control+0x104>
 800c472:	8afb      	ldrh	r3, [r7, #22]
 800c474:	3301      	adds	r3, #1
 800c476:	82fb      	strh	r3, [r7, #22]
 800c478:	8afb      	ldrh	r3, [r7, #22]
 800c47a:	2b13      	cmp	r3, #19
 800c47c:	d9f9      	bls.n	800c472 <m62429_control+0xfe>
	CLK_L;
 800c47e:	2200      	movs	r2, #0
 800c480:	2180      	movs	r1, #128	; 0x80
 800c482:	480d      	ldr	r0, [pc, #52]	; (800c4b8 <m62429_control+0x144>)
 800c484:	f7f9 fab7 	bl	80059f6 <HAL_GPIO_WritePin>
	for(D_a=0;D_a<20;D_a++){;}
 800c488:	2300      	movs	r3, #0
 800c48a:	82fb      	strh	r3, [r7, #22]
 800c48c:	e002      	b.n	800c494 <m62429_control+0x120>
 800c48e:	8afb      	ldrh	r3, [r7, #22]
 800c490:	3301      	adds	r3, #1
 800c492:	82fb      	strh	r3, [r7, #22]
 800c494:	8afb      	ldrh	r3, [r7, #22]
 800c496:	2b13      	cmp	r3, #19
 800c498:	d9f9      	bls.n	800c48e <m62429_control+0x11a>
	CLK_H;
 800c49a:	2201      	movs	r2, #1
 800c49c:	2180      	movs	r1, #128	; 0x80
 800c49e:	4806      	ldr	r0, [pc, #24]	; (800c4b8 <m62429_control+0x144>)
 800c4a0:	f7f9 faa9 	bl	80059f6 <HAL_GPIO_WritePin>

	return 0;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000044 	.word	0x20000044
 800c4b4:	2000003c 	.word	0x2000003c
 800c4b8:	40011400 	.word	0x40011400

0800c4bc <motor_device_register>:
#define MAX_MOTOR_NUM 6

int32_t motor_device_register(motor_device_t motor_dev,
                              const char *name,
                              uint16_t flags)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d102      	bne.n	800c4d6 <motor_device_register+0x1a>
    return -WT_INVAL;
 800c4d0:	f06f 0301 	mvn.w	r3, #1
 800c4d4:	e013      	b.n	800c4fe <motor_device_register+0x42>

  if (device_find(name) != NULL)
 800c4d6:	68b8      	ldr	r0, [r7, #8]
 800c4d8:	f7ff ff29 	bl	800c32e <device_find>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <motor_device_register+0x2c>
    return -WT_EXISTED;
 800c4e2:	f06f 0302 	mvn.w	r3, #2
 800c4e6:	e00a      	b.n	800c4fe <motor_device_register+0x42>

  motor_dev->parent.type = Device_Class_Motor;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  device_register( &(motor_dev->parent), name, flags);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	88fa      	ldrh	r2, [r7, #6]
 800c4f4:	68b9      	ldr	r1, [r7, #8]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff feee 	bl	800c2d8 <device_register>

  return WT_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <motor_device_set_current>:
    return NULL;
  }
}

int32_t motor_device_set_current(motor_device_t motor_dev, int16_t current)
{
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	460b      	mov	r3, r1
 800c510:	807b      	strh	r3, [r7, #2]
  if (motor_dev != NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d038      	beq.n	800c58a <motor_device_set_current+0x84>
  {
    motor_dev->current = current;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	887a      	ldrh	r2, [r7, #2]
 800c51c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    __HAL_TIM_SET_COMPARE(motor_dev->pwm_tim_handle,motor_dev->pwm_channel,500-motor_dev->current);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c524:	2b00      	cmp	r3, #0
 800c526:	d109      	bne.n	800c53c <motor_device_set_current+0x36>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c52e:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	635a      	str	r2, [r3, #52]	; 0x34
 800c53a:	e024      	b.n	800c586 <motor_device_set_current+0x80>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c540:	2b04      	cmp	r3, #4
 800c542:	d109      	bne.n	800c558 <motor_device_set_current+0x52>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c54a:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	639a      	str	r2, [r3, #56]	; 0x38
 800c556:	e016      	b.n	800c586 <motor_device_set_current+0x80>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c55c:	2b08      	cmp	r3, #8
 800c55e:	d109      	bne.n	800c574 <motor_device_set_current+0x6e>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c566:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	63da      	str	r2, [r3, #60]	; 0x3c
 800c572:	e008      	b.n	800c586 <motor_device_set_current+0x80>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c57a:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	641a      	str	r2, [r3, #64]	; 0x40
    return WT_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	e001      	b.n	800c58e <motor_device_set_current+0x88>
  }
  return -WT_ERROR;
 800c58a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	bc80      	pop	{r7}
 800c596:	4770      	bx	lr

0800c598 <motor_device_run>:

void motor_device_run(motor_device_t motor_dev,uint16_t speed)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(motor_dev->pwm_tim_handle,motor_dev->pwm_channel,speed);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d105      	bne.n	800c5b8 <motor_device_run+0x20>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	887a      	ldrh	r2, [r7, #2]
 800c5b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c5b6:	e018      	b.n	800c5ea <motor_device_run+0x52>
	__HAL_TIM_SET_COMPARE(motor_dev->pwm_tim_handle,motor_dev->pwm_channel,speed);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d105      	bne.n	800c5cc <motor_device_run+0x34>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	887a      	ldrh	r2, [r7, #2]
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c5ca:	e00e      	b.n	800c5ea <motor_device_run+0x52>
	__HAL_TIM_SET_COMPARE(motor_dev->pwm_tim_handle,motor_dev->pwm_channel,speed);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d0:	2b08      	cmp	r3, #8
 800c5d2:	d105      	bne.n	800c5e0 <motor_device_run+0x48>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	887a      	ldrh	r2, [r7, #2]
 800c5dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c5de:	e004      	b.n	800c5ea <motor_device_run+0x52>
	__HAL_TIM_SET_COMPARE(motor_dev->pwm_tim_handle,motor_dev->pwm_channel,speed);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	887a      	ldrh	r2, [r7, #2]
 800c5e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c5ea:	bf00      	nop
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bc80      	pop	{r7}
 800c5f2:	4770      	bx	lr

0800c5f4 <motor_device_set_encoder>:

void motor_device_set_encoder(motor_device_t motor_dev,uint16_t encoder)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(motor_dev->encoder_tim_handle,encoder);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	887a      	ldrh	r2, [r7, #2]
 800c608:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c60a:	bf00      	nop
 800c60c:	370c      	adds	r7, #12
 800c60e:	46bd      	mov	sp, r7
 800c610:	bc80      	pop	{r7}
 800c612:	4770      	bx	lr

0800c614 <setpper_device_register>:
#include "stepper_motor.h"

int32_t setpper_device_register(stepper_device_t stepper_dev,
                              const char *name,
                              uint16_t flags)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	80fb      	strh	r3, [r7, #6]
  if (stepper_dev == NULL)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <setpper_device_register+0x1a>
    return -WT_INVAL;
 800c628:	f06f 0301 	mvn.w	r3, #1
 800c62c:	e013      	b.n	800c656 <setpper_device_register+0x42>

  if (device_find(name) != NULL)
 800c62e:	68b8      	ldr	r0, [r7, #8]
 800c630:	f7ff fe7d 	bl	800c32e <device_find>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <setpper_device_register+0x2c>
    return -WT_EXISTED;
 800c63a:	f06f 0302 	mvn.w	r3, #2
 800c63e:	e00a      	b.n	800c656 <setpper_device_register+0x42>

  stepper_dev->parent.type = Device_Class_Stepper;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  device_register( &(stepper_dev->parent), name, flags);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	88fa      	ldrh	r2, [r7, #6]
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff fe42 	bl	800c2d8 <device_register>

  return WT_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <bracket_register>:
 *      Author: Administrator
 */
#include "2d_bracket.h"

int32_t bracket_register(struct bracket *bracket, const char *name)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b098      	sub	sp, #96	; 0x60
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
	char motor_name[2][OBJECT_NAME_MAX_LEN] = {0};
 800c66a:	f107 0310 	add.w	r3, r7, #16
 800c66e:	2240      	movs	r2, #64	; 0x40
 800c670:	2100      	movs	r1, #0
 800c672:	4618      	mov	r0, r3
 800c674:	f000 ff1b 	bl	800d4ae <memset>
	uint8_t name_len;
	int32_t err;

	if (bracket == NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <bracket_register+0x24>
		return -WT_INVAL;
 800c67e:	f06f 0301 	mvn.w	r3, #1
 800c682:	e0c7      	b.n	800c814 <bracket_register+0x1b4>
	if (bracket_find(name) != NULL)
 800c684:	6838      	ldr	r0, [r7, #0]
 800c686:	f000 f8d9 	bl	800c83c <bracket_find>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <bracket_register+0x36>
		return -WT_EXISTED;
 800c690:	f06f 0302 	mvn.w	r3, #2
 800c694:	e0be      	b.n	800c814 <bracket_register+0x1b4>

	object_init(&(bracket->parent), Object_Class_Bracket, name);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	2104      	movs	r1, #4
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fc99 	bl	800cfd4 <object_init>

	name_len = strlen(name);
 800c6a2:	6838      	ldr	r0, [r7, #0]
 800c6a4:	f7f3 fdc4 	bl	8000230 <strlen>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	if (name_len > OBJECT_NAME_MAX_LEN / 2)
 800c6ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6b2:	2b10      	cmp	r3, #16
 800c6b4:	d902      	bls.n	800c6bc <bracket_register+0x5c>
	{
		name_len = OBJECT_NAME_MAX_LEN / 2;
 800c6b6:	2310      	movs	r3, #16
 800c6b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	for (int i = 0; i < 2; i++)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6c0:	e00d      	b.n	800c6de <bracket_register+0x7e>
	{
		memcpy(&motor_name[i], name, name_len);
 800c6c2:	f107 0210 	add.w	r2, r7, #16
 800c6c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6c8:	015b      	lsls	r3, r3, #5
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fee0 	bl	800d498 <memcpy>
	for (int i = 0; i < 2; i++)
 800c6d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6da:	3301      	adds	r3, #1
 800c6dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	ddee      	ble.n	800c6c2 <bracket_register+0x62>
	}

	flash_pack_u flash_pack;
	flash_pack.data = find_used_entry();
 800c6e4:	f7ff fa3c 	bl	800bb60 <find_used_entry>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	60fb      	str	r3, [r7, #12]

	bracket->stepper[up_down_stepper].pwm_tim_handle = &htim8;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a4b      	ldr	r2, [pc, #300]	; (800c81c <bracket_register+0x1bc>)
 800c6f0:	665a      	str	r2, [r3, #100]	; 0x64
	bracket->stepper[up_down_stepper].cascade_tim_handle = NULL;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	66da      	str	r2, [r3, #108]	; 0x6c
	bracket->stepper[up_down_stepper].pwm_channel = TIM_CHANNEL_2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2204      	movs	r2, #4
 800c6fc:	669a      	str	r2, [r3, #104]	; 0x68
	bracket->stepper[up_down_stepper].dir_gpio_port_handle = Stepper_Up_Dir_GPIO_Port;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a47      	ldr	r2, [pc, #284]	; (800c820 <bracket_register+0x1c0>)
 800c702:	671a      	str	r2, [r3, #112]	; 0x70
	bracket->stepper[up_down_stepper].dir_gpio_Pin = Stepper_Up_Dir_Pin;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c70a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	bracket->stepper[up_down_stepper].limit_gpio_port_handle = UD_Limit_Switch_GPIO_Port;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a44      	ldr	r2, [pc, #272]	; (800c824 <bracket_register+0x1c4>)
 800c712:	679a      	str	r2, [r3, #120]	; 0x78
	bracket->stepper[up_down_stepper].limit_gpio_Pin = UD_Limit_Switch_Pin;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c71a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	bracket->stepper[up_down_stepper].sleep_gpio_port_handle = Stepper_UD_Sleep_GPIO_Port;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a3f      	ldr	r2, [pc, #252]	; (800c820 <bracket_register+0x1c0>)
 800c722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	bracket->stepper[up_down_stepper].sleep_gpio_Pin = Stepper_UD_Sleep_Pin;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c72c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	bracket->stepper[up_down_stepper].last_position = middle;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	bracket->stepper[up_down_stepper].position = flash_pack.buff[1];
 800c738:	7b7a      	ldrb	r2, [r7, #13]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	bracket->stepper[left_right_stepper].pwm_tim_handle = &htim2;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a39      	ldr	r2, [pc, #228]	; (800c828 <bracket_register+0x1c8>)
 800c744:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	bracket->stepper[left_right_stepper].cascade_tim_handle = &htim4;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a38      	ldr	r2, [pc, #224]	; (800c82c <bracket_register+0x1cc>)
 800c74c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	bracket->stepper[left_right_stepper].pwm_channel = TIM_CHANNEL_1;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	bracket->stepper[left_right_stepper].dir_gpio_port_handle = Stepper_LR_Dir_GPIO_Port;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a31      	ldr	r2, [pc, #196]	; (800c820 <bracket_register+0x1c0>)
 800c75c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	bracket->stepper[left_right_stepper].dir_gpio_Pin = Stepper_LR_Dir_Pin;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c766:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	bracket->stepper[left_right_stepper].limit_gpio_port_handle = LR_Limit_Switch_GPIO_Port;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a2d      	ldr	r2, [pc, #180]	; (800c824 <bracket_register+0x1c4>)
 800c76e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	bracket->stepper[left_right_stepper].limit_gpio_Pin = LR_Limit_Switch_Pin;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c778:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	bracket->stepper[left_right_stepper].sleep_gpio_port_handle = Stepper_LR_Sleep_GPIO_Port;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a2c      	ldr	r2, [pc, #176]	; (800c830 <bracket_register+0x1d0>)
 800c780:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	bracket->stepper[left_right_stepper].sleep_gpio_Pin = Stepper_LR_Sleep_Pin;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2280      	movs	r2, #128	; 0x80
 800c788:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	bracket->stepper[left_right_stepper].last_position = middle;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	bracket->stepper[left_right_stepper].position = flash_pack.buff[2];
 800c794:	7bba      	ldrb	r2, [r7, #14]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9

	memcpy(&motor_name[up_down_stepper][name_len], "_UD\0", 4);
 800c79c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7a0:	f107 0210 	add.w	r2, r7, #16
 800c7a4:	4413      	add	r3, r2
 800c7a6:	2204      	movs	r2, #4
 800c7a8:	4922      	ldr	r1, [pc, #136]	; (800c834 <bracket_register+0x1d4>)
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 fe74 	bl	800d498 <memcpy>
	memcpy(&motor_name[left_right_stepper][name_len], "_LR\0", 4);
 800c7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7b4:	f107 0210 	add.w	r2, r7, #16
 800c7b8:	3320      	adds	r3, #32
 800c7ba:	4413      	add	r3, r2
 800c7bc:	2204      	movs	r2, #4
 800c7be:	491e      	ldr	r1, [pc, #120]	; (800c838 <bracket_register+0x1d8>)
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 fe69 	bl	800d498 <memcpy>

	for (int i = 0; i < 2; i++)
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	657b      	str	r3, [r7, #84]	; 0x54
 800c7ca:	e018      	b.n	800c7fe <bracket_register+0x19e>
	{
		err = setpper_device_register(&(bracket->stepper[i]), motor_name[i], 0);
 800c7cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4413      	add	r3, r2
 800c7d4:	015b      	lsls	r3, r3, #5
 800c7d6:	3328      	adds	r3, #40	; 0x28
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	4413      	add	r3, r2
 800c7dc:	1d18      	adds	r0, r3, #4
 800c7de:	f107 0210 	add.w	r2, r7, #16
 800c7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7e4:	015b      	lsls	r3, r3, #5
 800c7e6:	4413      	add	r3, r2
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	f7ff ff12 	bl	800c614 <setpper_device_register>
 800c7f0:	6538      	str	r0, [r7, #80]	; 0x50
		if (err != WT_OK)
 800c7f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d107      	bne.n	800c808 <bracket_register+0x1a8>
	for (int i = 0; i < 2; i++)
 800c7f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	657b      	str	r3, [r7, #84]	; 0x54
 800c7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c800:	2b01      	cmp	r3, #1
 800c802:	dde3      	ble.n	800c7cc <bracket_register+0x16c>
			goto end;
	}

	return WT_OK;
 800c804:	2300      	movs	r3, #0
 800c806:	e005      	b.n	800c814 <bracket_register+0x1b4>
			goto end;
 800c808:	bf00      	nop

end:
	object_detach(&(bracket->parent));
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fc64 	bl	800d0da <object_detach>

	return err;
 800c812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c814:	4618      	mov	r0, r3
 800c816:	3760      	adds	r7, #96	; 0x60
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	20009c3c 	.word	0x20009c3c
 800c820:	40011400 	.word	0x40011400
 800c824:	40010c00 	.word	0x40010c00
 800c828:	20009d7c 	.word	0x20009d7c
 800c82c:	20009c7c 	.word	0x20009c7c
 800c830:	40010800 	.word	0x40010800
 800c834:	0800f238 	.word	0x0800f238
 800c838:	0800f240 	.word	0x0800f240

0800c83c <bracket_find>:


bracket_t bracket_find(const char *name)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Bracket);
 800c844:	2104      	movs	r1, #4
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fbfe 	bl	800d048 <object_find>
 800c84c:	60f8      	str	r0, [r7, #12]

  return (bracket_t)object;
 800c84e:	68fb      	ldr	r3, [r7, #12]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <stepper_run>:
 *
 * one step is 251 pluse
 *
 */
void stepper_run(stepper_device_t stepper_device, int16_t step)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	807b      	strh	r3, [r7, #2]
	GPIO_PinState pin_state;

	// leftward
	if(step>=0)
 800c864:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	db14      	blt.n	800c896 <stepper_run+0x3e>
	{
		if(stepper_device->position == left)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c872:	2b00      	cmp	r3, #0
 800c874:	d05b      	beq.n	800c92e <stepper_run+0xd6>
		{
			return;
		}
		stepper_device->step += step;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 800c87c:	887b      	ldrh	r3, [r7, #2]
 800c87e:	4413      	add	r3, r2
 800c880:	b29a      	uxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		stepper_device->direction = leftward;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		pin_state = GPIO_PIN_RESET;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]
 800c894:	e01b      	b.n	800c8ce <stepper_run+0x76>
	}
	// rightward
	else if(step<0)
 800c896:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	da17      	bge.n	800c8ce <stepper_run+0x76>
	{
		if(stepper_device->position == right)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d044      	beq.n	800c932 <stepper_run+0xda>
		{
			return;
		}
		step = -step;
 800c8a8:	887b      	ldrh	r3, [r7, #2]
 800c8aa:	425b      	negs	r3, r3
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	807b      	strh	r3, [r7, #2]
		stepper_device->step -= step;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 800c8b6:	887b      	ldrh	r3, [r7, #2]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		stepper_device->direction = rightward;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		pin_state = GPIO_PIN_SET;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	73fb      	strb	r3, [r7, #15]
	}

//	stepper_device->position = middle;
	HAL_GPIO_WritePin(stepper_device->sleep_gpio_port_handle,stepper_device->sleep_gpio_Pin,GPIO_PIN_SET);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8d8:	2201      	movs	r2, #1
 800c8da:	4619      	mov	r1, r3
 800c8dc:	f7f9 f88b 	bl	80059f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stepper_device->dir_gpio_port_handle, stepper_device->dir_gpio_Pin, pin_state);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8ea:	7bfa      	ldrb	r2, [r7, #15]
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	f7f9 f882 	bl	80059f6 <HAL_GPIO_WritePin>
	if(stepper_device->cascade_tim_handle == NULL)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d105      	bne.n	800c906 <stepper_run+0xae>
	{
		stepper_device->pwm_tim_handle->Instance->RCR = 250;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	22fa      	movs	r2, #250	; 0xfa
 800c902:	631a      	str	r2, [r3, #48]	; 0x30
 800c904:	e00a      	b.n	800c91c <stepper_run+0xc4>
	}
	else
	{
		__HAL_TIM_SET_AUTORELOAD(stepper_device->cascade_tim_handle,step);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c910:	62da      	str	r2, [r3, #44]	; 0x2c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c916:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c91a:	60da      	str	r2, [r3, #12]
	}

	HAL_TIM_PWM_Start(stepper_device->pwm_tim_handle, stepper_device->pwm_channel);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c924:	4619      	mov	r1, r3
 800c926:	4610      	mov	r0, r2
 800c928:	f7f9 fe12 	bl	8006550 <HAL_TIM_PWM_Start>
 800c92c:	e002      	b.n	800c934 <stepper_run+0xdc>
			return;
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <stepper_run+0xdc>
			return;
 800c932:	bf00      	nop
}
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <update_stepper_positon>:

void update_stepper_positon(uint16_t gpio_Pin)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	80fb      	strh	r3, [r7, #6]
	stepper_device_t stepper;
	bracket_t b = bracket_find("bracket");
 800c946:	482a      	ldr	r0, [pc, #168]	; (800c9f0 <update_stepper_positon+0xb4>)
 800c948:	f7ff ff78 	bl	800c83c <bracket_find>
 800c94c:	6138      	str	r0, [r7, #16]
	if(gpio_Pin==UD_Limit_Switch_Pin)
 800c94e:	88fb      	ldrh	r3, [r7, #6]
 800c950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c954:	d103      	bne.n	800c95e <update_stepper_positon+0x22>
	{
		stepper = &b->stepper[up_down_stepper];
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	332c      	adds	r3, #44	; 0x2c
 800c95a:	617b      	str	r3, [r7, #20]
 800c95c:	e006      	b.n	800c96c <update_stepper_positon+0x30>
	}
	else if(gpio_Pin==LR_Limit_Switch_Pin)
 800c95e:	88fb      	ldrh	r3, [r7, #6]
 800c960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c964:	d102      	bne.n	800c96c <update_stepper_positon+0x30>
	{
		stepper = &b->stepper[left_right_stepper];
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	338c      	adds	r3, #140	; 0x8c
 800c96a:	617b      	str	r3, [r7, #20]
	}

	stepper->last_position = stepper->position;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	if(!HAL_GPIO_ReadPin(stepper->limit_gpio_port_handle,stepper->limit_gpio_Pin))
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7f9 f81f 	bl	80059c8 <HAL_GPIO_ReadPin>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d11b      	bne.n	800c9c8 <update_stepper_positon+0x8c>
	{
		if(stepper->direction == leftward)
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d104      	bne.n	800c9a4 <update_stepper_positon+0x68>
		{
			stepper->position = left;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800c9a2:	e008      	b.n	800c9b6 <update_stepper_positon+0x7a>
		}
		else if(stepper->direction == rightward)
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d103      	bne.n	800c9b6 <update_stepper_positon+0x7a>
		{
			stepper->position = right;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		}

		HAL_TIM_PWM_Stop(stepper->pwm_tim_handle, stepper->pwm_channel);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9be:	4619      	mov	r1, r3
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	f7f9 fe03 	bl	80065cc <HAL_TIM_PWM_Stop>
 800c9c6:	e003      	b.n	800c9d0 <update_stepper_positon+0x94>
	}
	else
	{
		stepper->position = middle;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	}

	// TODO: update status into flash
	writer_u writer;
	writer.data[0] = b->stepper[up_down_stepper].position;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c9d6:	733b      	strb	r3, [r7, #12]
	writer.data[1] = b->stepper[left_right_stepper].position;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800c9de:	737b      	strb	r3, [r7, #13]
	write_word_to_flash(writer);
 800c9e0:	89b8      	ldrh	r0, [r7, #12]
 800c9e2:	f7ff f8e3 	bl	800bbac <write_word_to_flash>
}
 800c9e6:	bf00      	nop
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0800f248 	.word	0x0800f248

0800c9f4 <tim_rcr_uev_callback>:

static uint8_t rcr_cnt = 0;
void tim_rcr_uev_callback(void)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
	if(rcr_cnt++ >= 2)
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <tim_rcr_uev_callback+0x34>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	b2d1      	uxtb	r1, r2
 800ca00:	4a09      	ldr	r2, [pc, #36]	; (800ca28 <tim_rcr_uev_callback+0x34>)
 800ca02:	7011      	strb	r1, [r2, #0]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d90c      	bls.n	800ca22 <tim_rcr_uev_callback+0x2e>
	{
		rcr_cnt = 0;
 800ca08:	4b07      	ldr	r3, [pc, #28]	; (800ca28 <tim_rcr_uev_callback+0x34>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800ca0e:	2104      	movs	r1, #4
 800ca10:	4806      	ldr	r0, [pc, #24]	; (800ca2c <tim_rcr_uev_callback+0x38>)
 800ca12:	f7f9 fddb 	bl	80065cc <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(Stepper_UD_Sleep_GPIO_Port,Stepper_UD_Sleep_Pin,GPIO_PIN_RESET);
 800ca16:	2200      	movs	r2, #0
 800ca18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca1c:	4804      	ldr	r0, [pc, #16]	; (800ca30 <tim_rcr_uev_callback+0x3c>)
 800ca1e:	f7f8 ffea 	bl	80059f6 <HAL_GPIO_WritePin>
	}
}
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	2000958c 	.word	0x2000958c
 800ca2c:	20009c3c 	.word	0x20009c3c
 800ca30:	40011400 	.word	0x40011400

0800ca34 <charge_test>:
#include "charge_test.h"

extern void pdh_data_upload(uint8_t *p_frame, uint8_t len);

void charge_test(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
	upload_attr_t upload_attr;
	charge_status_e status;
	// It is high when charging
	if(HAL_GPIO_ReadPin(Charge_Test_GPIO_Port,Charge_Test_Pin))
 800ca3a:	2120      	movs	r1, #32
 800ca3c:	480d      	ldr	r0, [pc, #52]	; (800ca74 <charge_test+0x40>)
 800ca3e:	f7f8 ffc3 	bl	80059c8 <HAL_GPIO_ReadPin>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <charge_test+0x1a>
	{
		status = charging;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	71fb      	strb	r3, [r7, #7]
 800ca4c:	e001      	b.n	800ca52 <charge_test+0x1e>

	}
	else
	{
		status = no_charge;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	71fb      	strb	r3, [r7, #7]
	}

	upload_attr = pack_upload_data(CHARGE_STATUS,(uint8_t*)&status,1);
 800ca52:	f107 0008 	add.w	r0, r7, #8
 800ca56:	1dfa      	adds	r2, r7, #7
 800ca58:	2301      	movs	r3, #1
 800ca5a:	2134      	movs	r1, #52	; 0x34
 800ca5c:	f000 fcae 	bl	800d3bc <pack_upload_data>
	pdh_data_upload(upload_attr.pdata,upload_attr.len);
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	7b3a      	ldrb	r2, [r7, #12]
 800ca64:	4611      	mov	r1, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7f5 fa76 	bl	8001f58 <pdh_data_upload>
}
 800ca6c:	bf00      	nop
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	40011800 	.word	0x40011800

0800ca78 <lens_pid_register>:
#include "lens.h"
#include "tim.h"
#include "drv_uart.h"

int32_t lens_pid_register(struct lens *lens, const char *name)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b098      	sub	sp, #96	; 0x60
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  char motor_name[2][OBJECT_NAME_MAX_LEN] = {0};
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	2240      	movs	r2, #64	; 0x40
 800ca88:	2100      	movs	r1, #0
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 fd0f 	bl	800d4ae <memset>
  uint8_t name_len;
  int32_t err;

  if (lens == NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d102      	bne.n	800ca9c <lens_pid_register+0x24>
    return -WT_INVAL;
 800ca96:	f06f 0301 	mvn.w	r3, #1
 800ca9a:	e0ab      	b.n	800cbf4 <lens_pid_register+0x17c>
  if (lens_find(name) != NULL)
 800ca9c:	6838      	ldr	r0, [r7, #0]
 800ca9e:	f000 f8b9 	bl	800cc14 <lens_find>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <lens_pid_register+0x36>
    return -WT_EXISTED;
 800caa8:	f06f 0302 	mvn.w	r3, #2
 800caac:	e0a2      	b.n	800cbf4 <lens_pid_register+0x17c>

  object_init(&(lens->parent), Object_Class_Lens, name);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	2105      	movs	r1, #5
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 fa8d 	bl	800cfd4 <object_init>

  name_len = strlen(name);
 800caba:	6838      	ldr	r0, [r7, #0]
 800cabc:	f7f3 fbb8 	bl	8000230 <strlen>
 800cac0:	4603      	mov	r3, r0
 800cac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (name_len > OBJECT_NAME_MAX_LEN / 2)
 800cac6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caca:	2b10      	cmp	r3, #16
 800cacc:	d902      	bls.n	800cad4 <lens_pid_register+0x5c>
  {
    name_len = OBJECT_NAME_MAX_LEN / 2;
 800cace:	2310      	movs	r3, #16
 800cad0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }

  for (int i = 0; i < 2; i++)
 800cad4:	2300      	movs	r3, #0
 800cad6:	653b      	str	r3, [r7, #80]	; 0x50
 800cad8:	e00d      	b.n	800caf6 <lens_pid_register+0x7e>
  {
    memcpy(&motor_name[i], name, name_len);
 800cada:	f107 0208 	add.w	r2, r7, #8
 800cade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae0:	015b      	lsls	r3, r3, #5
 800cae2:	4413      	add	r3, r2
 800cae4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	4618      	mov	r0, r3
 800caec:	f000 fcd4 	bl	800d498 <memcpy>
  for (int i = 0; i < 2; i++)
 800caf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf2:	3301      	adds	r3, #1
 800caf4:	653b      	str	r3, [r7, #80]	; 0x50
 800caf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	ddee      	ble.n	800cada <lens_pid_register+0x62>
  }

  lens->motor[left_motor].encoder_tim_handle = &htim3;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a3f      	ldr	r2, [pc, #252]	; (800cbfc <lens_pid_register+0x184>)
 800cb00:	671a      	str	r2, [r3, #112]	; 0x70
  lens->motor[left_motor].pwm_tim_handle = &htim1;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a3e      	ldr	r2, [pc, #248]	; (800cc00 <lens_pid_register+0x188>)
 800cb06:	675a      	str	r2, [r3, #116]	; 0x74
  lens->motor[left_motor].pwm_channel = TIM_CHANNEL_2;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2204      	movs	r2, #4
 800cb0c:	679a      	str	r2, [r3, #120]	; 0x78
  lens->motor[left_motor].goto_zp_flag = TRUE;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  lens->motor[right_motor].encoder_tim_handle = &htim5;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a3a      	ldr	r2, [pc, #232]	; (800cc04 <lens_pid_register+0x18c>)
 800cb1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  lens->motor[right_motor].pwm_tim_handle = &htim1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a37      	ldr	r2, [pc, #220]	; (800cc00 <lens_pid_register+0x188>)
 800cb22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  lens->motor[right_motor].pwm_channel = TIM_CHANNEL_1;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  lens->motor[right_motor].goto_zp_flag = TRUE;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

  lens->auto_focus_flag = FALSE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  memcpy(&motor_name[left_motor][name_len], "_LEFT\0", 6);
 800cb3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb42:	f107 0208 	add.w	r2, r7, #8
 800cb46:	4413      	add	r3, r2
 800cb48:	2206      	movs	r2, #6
 800cb4a:	492f      	ldr	r1, [pc, #188]	; (800cc08 <lens_pid_register+0x190>)
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 fca3 	bl	800d498 <memcpy>
  memcpy(&motor_name[right_motor][name_len], "_RIGHT\0", 7);
 800cb52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb56:	f107 0208 	add.w	r2, r7, #8
 800cb5a:	3320      	adds	r3, #32
 800cb5c:	4413      	add	r3, r2
 800cb5e:	2207      	movs	r2, #7
 800cb60:	492a      	ldr	r1, [pc, #168]	; (800cc0c <lens_pid_register+0x194>)
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 fc98 	bl	800d498 <memcpy>

  for (int i = 0; i < 2; i++)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb6c:	e017      	b.n	800cb9e <lens_pid_register+0x126>
  {
    err = motor_device_register(&(lens->motor[i]), motor_name[i], 0);
 800cb6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb70:	4613      	mov	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	011b      	lsls	r3, r3, #4
 800cb78:	3330      	adds	r3, #48	; 0x30
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	18d0      	adds	r0, r2, r3
 800cb7e:	f107 0208 	add.w	r2, r7, #8
 800cb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb84:	015b      	lsls	r3, r3, #5
 800cb86:	4413      	add	r3, r2
 800cb88:	2200      	movs	r2, #0
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	f7ff fc96 	bl	800c4bc <motor_device_register>
 800cb90:	64b8      	str	r0, [r7, #72]	; 0x48
    if (err != WT_OK)
 800cb92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d127      	bne.n	800cbe8 <lens_pid_register+0x170>
  for (int i = 0; i < 2; i++)
 800cb98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	dde4      	ble.n	800cb6e <lens_pid_register+0xf6>
      goto end;
  }

  pid_struct_init(&(lens->motor_pid[left_motor]),  500, 0, 1.5, 0, 0);//1.5
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 800cbaa:	f04f 0300 	mov.w	r3, #0
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	f04f 0300 	mov.w	r3, #0
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cbba:	f04f 0200 	mov.w	r2, #0
 800cbbe:	4914      	ldr	r1, [pc, #80]	; (800cc10 <lens_pid_register+0x198>)
 800cbc0:	f7ff fb62 	bl	800c288 <pid_struct_init>
  pid_struct_init(&(lens->motor_pid[right_motor]), 500, 0, 1.5, 0, 0);//1.5
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800cbca:	f04f 0300 	mov.w	r3, #0
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	f04f 0300 	mov.w	r3, #0
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cbda:	f04f 0200 	mov.w	r2, #0
 800cbde:	490c      	ldr	r1, [pc, #48]	; (800cc10 <lens_pid_register+0x198>)
 800cbe0:	f7ff fb52 	bl	800c288 <pid_struct_init>

  return WT_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e005      	b.n	800cbf4 <lens_pid_register+0x17c>
      goto end;
 800cbe8:	bf00      	nop
end:
  object_detach(&(lens->parent));
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 fa74 	bl	800d0da <object_detach>

  return err;
 800cbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3758      	adds	r7, #88	; 0x58
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	20009cfc 	.word	0x20009cfc
 800cc00:	20009d3c 	.word	0x20009d3c
 800cc04:	20009cbc 	.word	0x20009cbc
 800cc08:	0800f250 	.word	0x0800f250
 800cc0c:	0800f258 	.word	0x0800f258
 800cc10:	43fa0000 	.word	0x43fa0000

0800cc14 <lens_find>:


lens_t lens_find(const char *name)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Lens);
 800cc1c:	2105      	movs	r1, #5
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa12 	bl	800d048 <object_find>
 800cc24:	60f8      	str	r0, [r7, #12]

  return (lens_t)object;
 800cc26:	68fb      	ldr	r3, [r7, #12]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <lens_execute>:

float motor_out;
int32_t lens_execute(struct lens *lens)
{
 800cc30:	b5b0      	push	{r4, r5, r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  if (lens == NULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d102      	bne.n	800cc44 <lens_execute+0x14>
    return -WT_INVAL;
 800cc3e:	f06f 0301 	mvn.w	r3, #1
 800cc42:	e04e      	b.n	800cce2 <lens_execute+0xb2>

  motor_out = pid_calculate(&(lens->motor_pid[left_motor]), __HAL_TIM_GET_COUNTER(&htim3), lens->motor[left_motor].target);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800cc4a:	4b28      	ldr	r3, [pc, #160]	; (800ccec <lens_execute+0xbc>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7f4 f849 	bl	8000ce8 <__aeabi_ui2f>
 800cc56:	4605      	mov	r5, r0
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f4 f842 	bl	8000ce8 <__aeabi_ui2f>
 800cc64:	4603      	mov	r3, r0
 800cc66:	461a      	mov	r2, r3
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f7ff fa7f 	bl	800c16e <pid_calculate>
 800cc70:	4602      	mov	r2, r0
 800cc72:	4b1f      	ldr	r3, [pc, #124]	; (800ccf0 <lens_execute+0xc0>)
 800cc74:	601a      	str	r2, [r3, #0]
  motor_device_set_current(&(lens->motor[left_motor]), motor_out);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800cc7c:	4b1c      	ldr	r3, [pc, #112]	; (800ccf0 <lens_execute+0xc0>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7f4 fa4f 	bl	8001124 <__aeabi_f2iz>
 800cc86:	4603      	mov	r3, r0
 800cc88:	b21b      	sxth	r3, r3
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff fc3a 	bl	800c506 <motor_device_set_current>


  motor_out = pid_calculate(&(lens->motor_pid[right_motor]), __HAL_TIM_GET_COUNTER(&htim5), lens->motor[right_motor].target);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800cc98:	4b16      	ldr	r3, [pc, #88]	; (800ccf4 <lens_execute+0xc4>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f4 f822 	bl	8000ce8 <__aeabi_ui2f>
 800cca4:	4605      	mov	r5, r0
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7f4 f81b 	bl	8000ce8 <__aeabi_ui2f>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f7ff fa58 	bl	800c16e <pid_calculate>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <lens_execute+0xc0>)
 800ccc2:	601a      	str	r2, [r3, #0]
  motor_device_set_current(&(lens->motor[right_motor]), motor_out);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800ccca:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <lens_execute+0xc0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7f4 fa28 	bl	8001124 <__aeabi_f2iz>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	b21b      	sxth	r3, r3
 800ccd8:	4619      	mov	r1, r3
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f7ff fc13 	bl	800c506 <motor_device_set_current>

  return WT_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bdb0      	pop	{r4, r5, r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20009cfc 	.word	0x20009cfc
 800ccf0:	20009ff0 	.word	0x20009ff0
 800ccf4:	20009cbc 	.word	0x20009cbc

0800ccf8 <lens_set_motors_target_by_distance>:
		{292,46122},{293,46124},{294,46126},{295,46128},{296,46130},{297,46132},{298,46134},{299,46136},{300,46200},{350,46300},{400,46400}};
#endif


void lens_set_motors_target_by_distance(uint16_t distance, struct lens *lens)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	6039      	str	r1, [r7, #0]
 800cd02:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	81fb      	strh	r3, [r7, #14]
	if( (distance>300) && (distance<=350) )
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cd0e:	d907      	bls.n	800cd20 <lens_set_motors_target_by_distance+0x28>
 800cd10:	88fb      	ldrh	r3, [r7, #6]
 800cd12:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800cd16:	d803      	bhi.n	800cd20 <lens_set_motors_target_by_distance+0x28>
	{
		distance = 350;
 800cd18:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800cd1c:	80fb      	strh	r3, [r7, #6]
 800cd1e:	e006      	b.n	800cd2e <lens_set_motors_target_by_distance+0x36>
	}
	else if( distance>350 )
 800cd20:	88fb      	ldrh	r3, [r7, #6]
 800cd22:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800cd26:	d902      	bls.n	800cd2e <lens_set_motors_target_by_distance+0x36>
	{
		distance = 400;
 800cd28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cd2c:	80fb      	strh	r3, [r7, #6]
	}

	if(distance<=28)
 800cd2e:	88fb      	ldrh	r3, [r7, #6]
 800cd30:	2b1c      	cmp	r3, #28
 800cd32:	d80a      	bhi.n	800cd4a <lens_set_motors_target_by_distance+0x52>
	{
		lens->motor[left_motor].target = left_motor_zp;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	f247 5230 	movw	r2, #30000	; 0x7530
 800cd3a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		lens->motor[right_motor].target = right_motor_zp;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	f247 5230 	movw	r2, #30000	; 0x7530
 800cd44:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		return;
 800cd48:	e033      	b.n	800cdb2 <lens_set_motors_target_by_distance+0xba>
	}

	for(i=0; i < ENCODER_VALUE_LENGTH; i++)
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	81fb      	strh	r3, [r7, #14]
 800cd4e:	e012      	b.n	800cd76 <lens_set_motors_target_by_distance+0x7e>
	{
		if(left_motor_table[i][0] == distance)
 800cd50:	89fb      	ldrh	r3, [r7, #14]
 800cd52:	4a1a      	ldr	r2, [pc, #104]	; (800cdbc <lens_set_motors_target_by_distance+0xc4>)
 800cd54:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800cd58:	88fa      	ldrh	r2, [r7, #6]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d108      	bne.n	800cd70 <lens_set_motors_target_by_distance+0x78>
		{
			lens->motor[left_motor].target = left_motor_table[i][1];
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
 800cd60:	4a16      	ldr	r2, [pc, #88]	; (800cdbc <lens_set_motors_target_by_distance+0xc4>)
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	885a      	ldrh	r2, [r3, #2]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
			break;
 800cd6e:	e006      	b.n	800cd7e <lens_set_motors_target_by_distance+0x86>
	for(i=0; i < ENCODER_VALUE_LENGTH; i++)
 800cd70:	89fb      	ldrh	r3, [r7, #14]
 800cd72:	3301      	adds	r3, #1
 800cd74:	81fb      	strh	r3, [r7, #14]
 800cd76:	89fb      	ldrh	r3, [r7, #14]
 800cd78:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800cd7c:	d3e8      	bcc.n	800cd50 <lens_set_motors_target_by_distance+0x58>
		}
	}

	for(i=0; i < ENCODER_VALUE_LENGTH; i++)
 800cd7e:	2300      	movs	r3, #0
 800cd80:	81fb      	strh	r3, [r7, #14]
 800cd82:	e012      	b.n	800cdaa <lens_set_motors_target_by_distance+0xb2>
	{
		if(right_motor_table[i][0] == distance)
 800cd84:	89fb      	ldrh	r3, [r7, #14]
 800cd86:	4a0e      	ldr	r2, [pc, #56]	; (800cdc0 <lens_set_motors_target_by_distance+0xc8>)
 800cd88:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800cd8c:	88fa      	ldrh	r2, [r7, #6]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d108      	bne.n	800cda4 <lens_set_motors_target_by_distance+0xac>
		{
			lens->motor[right_motor].target = right_motor_table[i][1];
 800cd92:	89fb      	ldrh	r3, [r7, #14]
 800cd94:	4a0a      	ldr	r2, [pc, #40]	; (800cdc0 <lens_set_motors_target_by_distance+0xc8>)
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	885a      	ldrh	r2, [r3, #2]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
			break;
 800cda2:	e006      	b.n	800cdb2 <lens_set_motors_target_by_distance+0xba>
	for(i=0; i < ENCODER_VALUE_LENGTH; i++)
 800cda4:	89fb      	ldrh	r3, [r7, #14]
 800cda6:	3301      	adds	r3, #1
 800cda8:	81fb      	strh	r3, [r7, #14]
 800cdaa:	89fb      	ldrh	r3, [r7, #14]
 800cdac:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800cdb0:	d3e8      	bcc.n	800cd84 <lens_set_motors_target_by_distance+0x8c>
		}
	}
}
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20000070 	.word	0x20000070
 800cdc0:	200004b8 	.word	0x200004b8

0800cdc4 <protect_structure_register>:
 */
#include "protect_structure.h"
#include "cmsis_os.h"

int32_t protect_structure_register(protect_structure_t protect_structure, const char *name)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08c      	sub	sp, #48	; 0x30
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
	char motor_name[OBJECT_NAME_MAX_LEN] = {0};
 800cdce:	f107 030c 	add.w	r3, r7, #12
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 fb69 	bl	800d4ae <memset>
	uint8_t name_len;
	int32_t err;

	if (protect_structure == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d102      	bne.n	800cde8 <protect_structure_register+0x24>
		return -WT_INVAL;
 800cde2:	f06f 0301 	mvn.w	r3, #1
 800cde6:	e034      	b.n	800ce52 <protect_structure_register+0x8e>
	if (protect_structure_find(name) != NULL)
 800cde8:	6838      	ldr	r0, [r7, #0]
 800cdea:	f000 f83b 	bl	800ce64 <protect_structure_find>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d002      	beq.n	800cdfa <protect_structure_register+0x36>
		return -WT_EXISTED;
 800cdf4:	f06f 0302 	mvn.w	r3, #2
 800cdf8:	e02b      	b.n	800ce52 <protect_structure_register+0x8e>

	object_init(&(protect_structure->parent), Object_Class_Protect_Structure, name);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	2103      	movs	r1, #3
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 f8e7 	bl	800cfd4 <object_init>

	name_len = strlen(name);
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f7f3 fa12 	bl	8000230 <strlen>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (name_len > OBJECT_NAME_MAX_LEN / 2)
 800ce12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce16:	2b10      	cmp	r3, #16
 800ce18:	d902      	bls.n	800ce20 <protect_structure_register+0x5c>
	{
		name_len = OBJECT_NAME_MAX_LEN / 2;
 800ce1a:	2310      	movs	r3, #16
 800ce1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	memcpy(motor_name, name, name_len);
 800ce20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ce24:	f107 030c 	add.w	r3, r7, #12
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fb34 	bl	800d498 <memcpy>
//	protect_structure->stepper.dir_gpio_Pin = Stepper_Protect_Dir_Pin;
//	protect_structure->stepper.sleep_gpio_port_handle = Stepper_Protect_Sleep_GPIO_Port;
//	protect_structure->stepper.sleep_gpio_Pin = Stepper_Protect_Sleep_Pin;


	protect_structure->motor.pwm_tim_handle = &htim1;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a0a      	ldr	r2, [pc, #40]	; (800ce5c <protect_structure_register+0x98>)
 800ce34:	671a      	str	r2, [r3, #112]	; 0x70
	protect_structure->motor.pwm_channel = TIM_CHANNEL_3;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2208      	movs	r2, #8
 800ce3a:	675a      	str	r2, [r3, #116]	; 0x74

	memcpy(&motor_name[name_len], "_PROTECT\0", 9);
 800ce3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce40:	f107 020c 	add.w	r2, r7, #12
 800ce44:	4413      	add	r3, r2
 800ce46:	2209      	movs	r2, #9
 800ce48:	4905      	ldr	r1, [pc, #20]	; (800ce60 <protect_structure_register+0x9c>)
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 fb24 	bl	800d498 <memcpy>

//	err = setpper_device_register(&(protect_structure->stepper), motor_name, 0);
//	if (err != WT_OK)
//		goto end;

	return WT_OK;
 800ce50:	2300      	movs	r3, #0

//end:
//	object_detach(&(protect_structure->parent));

	return err;
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3730      	adds	r7, #48	; 0x30
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20009d3c 	.word	0x20009d3c
 800ce60:	0800f260 	.word	0x0800f260

0800ce64 <protect_structure_find>:

protect_structure_t protect_structure_find(const char *name)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Protect_Structure);
 800ce6c:	2103      	movs	r1, #3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f8ea 	bl	800d048 <object_find>
 800ce74:	60f8      	str	r0, [r7, #12]

  return (protect_structure_t)object;
 800ce76:	68fb      	ldr	r3, [r7, #12]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <protect_structure_motor_run>:
//	HAL_TIM_PWM_Start(protect_structure->stepper.pwm_tim_handle, protect_structure->stepper.pwm_channel);
//}

extern osTimerId once_timerHandle;
void protect_structure_motor_run(int16_t current)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(Sleep2_GPIO_Port,Sleep2_Pin,GPIO_PIN_SET);
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	2110      	movs	r1, #16
 800ce8e:	480a      	ldr	r0, [pc, #40]	; (800ceb8 <protect_structure_motor_run+0x38>)
 800ce90:	f7f8 fdb1 	bl	80059f6 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,500-current);
 800ce94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce98:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800ce9c:	4b07      	ldr	r3, [pc, #28]	; (800cebc <protect_structure_motor_run+0x3c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	63da      	str	r2, [r3, #60]	; 0x3c

	osTimerStart(once_timerHandle,100);
 800cea2:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <protect_structure_motor_run+0x40>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2164      	movs	r1, #100	; 0x64
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fb f9bd 	bl	8008228 <osTimerStart>
}
 800ceae:	bf00      	nop
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	40011000 	.word	0x40011000
 800cebc:	20009d3c 	.word	0x20009d3c
 800cec0:	20009bec 	.word	0x20009bec

0800cec4 <stop_protect_motor>:

void stop_protect_motor(void const * argument)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Sleep2_GPIO_Port,Sleep2_Pin,GPIO_PIN_RESET);
 800cecc:	2200      	movs	r2, #0
 800cece:	2110      	movs	r1, #16
 800ced0:	4805      	ldr	r0, [pc, #20]	; (800cee8 <stop_protect_motor+0x24>)
 800ced2:	f7f8 fd90 	bl	80059f6 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,500);
 800ced6:	4b05      	ldr	r3, [pc, #20]	; (800ceec <stop_protect_motor+0x28>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cede:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	40011000 	.word	0x40011000
 800ceec:	20009d3c 	.word	0x20009d3c

0800cef0 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
  next->prev = new;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	605a      	str	r2, [r3, #4]
  new->next = next;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	605a      	str	r2, [r3, #4]
  prev->next = new;
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	601a      	str	r2, [r3, #0]
}
 800cf14:	bf00      	nop
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bc80      	pop	{r7}
 800cf1c:	4770      	bx	lr

0800cf1e <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7ff ffdd 	bl	800cef0 <__list_add>
}
 800cf36:	bf00      	nop
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b083      	sub	sp, #12
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	605a      	str	r2, [r3, #4]
  prev->next = next;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	601a      	str	r2, [r3, #0]
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bc80      	pop	{r7}
 800cf5c:	4770      	bx	lr

0800cf5e <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4610      	mov	r0, r2
 800cf72:	f7ff ffe4 	bl	800cf3e <__list_del>
}
 800cf76:	bf00      	nop
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <object_get_information>:
        {Object_Class_Lens, _OBJ_CONTAINER_LIST_INIT(Object_Info_Lens)},
};

struct object_information *
object_get_information(enum object_class_type type)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	e015      	b.n	800cfbc <object_get_information+0x3c>
    if (object_container[index].type == type)
 800cf90:	490f      	ldr	r1, [pc, #60]	; (800cfd0 <object_get_information+0x50>)
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	4613      	mov	r3, r2
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	440b      	add	r3, r1
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d107      	bne.n	800cfb6 <object_get_information+0x36>
      return &object_container[index];
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4a07      	ldr	r2, [pc, #28]	; (800cfd0 <object_get_information+0x50>)
 800cfb2:	4413      	add	r3, r2
 800cfb4:	e006      	b.n	800cfc4 <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2b05      	cmp	r3, #5
 800cfc0:	dde6      	ble.n	800cf90 <object_get_information+0x10>

  return NULL;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bc80      	pop	{r7}
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	20000900 	.word	0x20000900

0800cfd4 <object_init>:

int32_t object_init(struct object *object,
                    enum object_class_type type,
                    const char *name)
{
 800cfd4:	b590      	push	{r4, r7, lr}
 800cfd6:	b089      	sub	sp, #36	; 0x24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 800cfe2:	7afb      	ldrb	r3, [r7, #11]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7ff ffcb 	bl	800cf80 <object_get_information>
 800cfea:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	7afa      	ldrb	r2, [r7, #11]
 800cff0:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1)
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7f3 f91b 	bl	8000230 <strlen>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b1f      	cmp	r3, #31
 800cffe:	d902      	bls.n	800d006 <object_init+0x32>
  {
    return -1;
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	e01c      	b.n	800d040 <object_init+0x6c>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2220      	movs	r2, #32
 800d00a:	6879      	ldr	r1, [r7, #4]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fad3 	bl	800d5b8 <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	77da      	strb	r2, [r3, #31]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d018:	f3ef 8310 	mrs	r3, PRIMASK
 800d01c:	617b      	str	r3, [r7, #20]
  return(result);
 800d01e:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 800d020:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d022:	b672      	cpsid	i

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4619      	mov	r1, r3
 800d030:	4610      	mov	r0, r2
 800d032:	f7ff ff74 	bl	800cf1e <list_add>
 800d036:	61bc      	str	r4, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	f383 8810 	msr	PRIMASK, r3
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3724      	adds	r7, #36	; 0x24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd90      	pop	{r4, r7, pc}

0800d048 <object_find>:

object_t object_find(const char *name, enum object_class_type type)
{
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b089      	sub	sp, #36	; 0x24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 800d054:	2300      	movs	r3, #0
 800d056:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 800d058:	2300      	movs	r3, #0
 800d05a:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 800d05c:	2300      	movs	r3, #0
 800d05e:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d002      	beq.n	800d06c <object_find+0x24>
 800d066:	78fb      	ldrb	r3, [r7, #3]
 800d068:	2b05      	cmp	r3, #5
 800d06a:	d901      	bls.n	800d070 <object_find+0x28>
    return NULL;
 800d06c:	2300      	movs	r3, #0
 800d06e:	e030      	b.n	800d0d2 <object_find+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d070:	f3ef 8310 	mrs	r3, PRIMASK
 800d074:	613b      	str	r3, [r7, #16]
  return(result);
 800d076:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 800d078:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d07a:	b672      	cpsid	i

  /* try to find object */
  if (information == NULL)
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d104      	bne.n	800d08c <object_find+0x44>
  {
    information = object_get_information(type);
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	4618      	mov	r0, r3
 800d086:	f7ff ff7b 	bl	800cf80 <object_get_information>
 800d08a:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	61bb      	str	r3, [r7, #24]
 800d092:	e014      	b.n	800d0be <object_find+0x76>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	3b24      	subs	r3, #36	; 0x24
 800d098:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0)
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2220      	movs	r2, #32
 800d09e:	6879      	ldr	r1, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fa77 	bl	800d594 <strncmp>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d105      	bne.n	800d0b8 <object_find+0x70>
 800d0ac:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f383 8810 	msr	PRIMASK, r3
    {
      /* leave critical */
      exit_critical();

      return object;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	e00c      	b.n	800d0d2 <object_find+0x8a>
       node = node->next)
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	61bb      	str	r3, [r7, #24]
       node != &(information->object_list);
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	3304      	adds	r3, #4
  for (node = information->object_list.next;
 800d0c2:	69ba      	ldr	r2, [r7, #24]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d1e5      	bne.n	800d094 <object_find+0x4c>
 800d0c8:	60bc      	str	r4, [r7, #8]
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f383 8810 	msr	PRIMASK, r3
  }

  /* leave critical */
  exit_critical();

  return NULL;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3724      	adds	r7, #36	; 0x24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd90      	pop	{r4, r7, pc}

0800d0da <object_detach>:

void object_detach(object_t object)
{
 800d0da:	b590      	push	{r4, r7, lr}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2206      	movs	r2, #6
 800d0e6:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0f0:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 800d0f2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d0f4:	b672      	cpsid	i

  /* remove from old list */
  list_del(&(object->list));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	3324      	adds	r3, #36	; 0x24
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff ff2f 	bl	800cf5e <list_del>
 800d100:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f383 8810 	msr	PRIMASK, r3

  /* unlock interrupt */
  exit_critical();
}
 800d108:	bf00      	nop
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd90      	pop	{r4, r7, pc}

0800d110 <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3b01      	subs	r3, #1
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	441a      	add	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	615a      	str	r2, [r3, #20]

  return (0);
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bc80      	pop	{r7}
 800d150:	4770      	bx	lr

0800d152 <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 800d152:	b590      	push	{r4, r7, lr}
 800d154:	b08b      	sub	sp, #44	; 0x2c
 800d156:	af00      	add	r7, sp, #0
 800d158:	60f8      	str	r0, [r7, #12]
 800d15a:	60b9      	str	r1, [r7, #8]
 800d15c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d15e:	f3ef 8310 	mrs	r3, PRIMASK
 800d162:	61bb      	str	r3, [r7, #24]
  return(result);
 800d164:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800d166:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d168:	b672      	cpsid	i
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d05e      	beq.n	800d22e <fifo_s_puts+0xdc>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d05c      	beq.n	800d232 <fifo_s_puts+0xe0>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	695a      	ldr	r2, [r3, #20]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d903      	bls.n	800d18c <fifo_s_puts+0x3a>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	4293      	cmp	r3, r2
 800d194:	bfa8      	it	ge
 800d196:	4613      	movge	r3, r2
 800d198:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	695b      	ldr	r3, [r3, #20]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 800d1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	db0f      	blt.n	800d1d2 <fifo_s_puts+0x80>
  {
    len_to_end = len;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	695b      	ldr	r3, [r3, #20]
 800d1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f96a 	bl	800d498 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	695a      	ldr	r2, [r3, #20]
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	441a      	add	r2, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	615a      	str	r2, [r3, #20]
 800d1d0:	e019      	b.n	800d206 <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e0:	68b9      	ldr	r1, [r7, #8]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f000 f958 	bl	800d498 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6818      	ldr	r0, [r3, #0]
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	6a3a      	ldr	r2, [r7, #32]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f000 f94f 	bl	800d498 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	441a      	add	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	689a      	ldr	r2, [r3, #8]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	1ad2      	subs	r2, r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68da      	ldr	r2, [r3, #12]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	441a      	add	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	60da      	str	r2, [r3, #12]
  retval = len;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	61fb      	str	r3, [r7, #28]
 800d222:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f383 8810 	msr	PRIMASK, r3

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	e008      	b.n	800d240 <fifo_s_puts+0xee>
      goto end;
 800d22e:	bf00      	nop
 800d230:	e000      	b.n	800d234 <fifo_s_puts+0xe2>
      goto end;
 800d232:	bf00      	nop
 800d234:	613c      	str	r4, [r7, #16]
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f383 8810 	msr	PRIMASK, r3
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800d23c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d240:	4618      	mov	r0, r3
 800d242:	372c      	adds	r7, #44	; 0x2c
 800d244:	46bd      	mov	sp, r7
 800d246:	bd90      	pop	{r4, r7, pc}

0800d248 <fifo_s_get>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_get(fifo_s_t *p_fifo)
{
 800d248:	b490      	push	{r4, r7}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  FIFO_CPU_SR_TYPE cpu_sr;
  char retval = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d254:	f3ef 8310 	mrs	r3, PRIMASK
 800d258:	613b      	str	r3, [r7, #16]
  return(result);
 800d25a:	693b      	ldr	r3, [r7, #16]

  //! Check input parameters.
  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800d25c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d25e:	b672      	cpsid	i
  FIFO_ENTER_CRITICAL();

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	691a      	ldr	r2, [r3, #16]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d903      	bls.n	800d274 <fifo_s_get+0x2c>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	611a      	str	r2, [r3, #16]

  retval = *p_fifo->p_read_addr;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	75fb      	strb	r3, [r7, #23]
  // Update information
  p_fifo->p_read_addr++;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	611a      	str	r2, [r3, #16]
  p_fifo->free_num++;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	1e5a      	subs	r2, r3, #1
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	60da      	str	r2, [r3, #12]
 800d29a:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f383 8810 	msr	PRIMASK, r3
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (retval);
 800d2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3718      	adds	r7, #24
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bc90      	pop	{r4, r7}
 800d2ac:	4770      	bx	lr

0800d2ae <fifo_s_gets>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets(fifo_s_t *p_fifo, char *p_dest, int len)
{
 800d2ae:	b590      	push	{r4, r7, lr}
 800d2b0:	b08b      	sub	sp, #44	; 0x2c
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d2be:	61bb      	str	r3, [r7, #24]
  return(result);
 800d2c0:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800d2c2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d2c4:	b672      	cpsid	i
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d05e      	beq.n	800d38a <fifo_s_gets+0xdc>
  {
    goto end;
  }

  if (0 == p_fifo->used_num)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d05c      	beq.n	800d38e <fifo_s_gets+0xe0>
  {
    goto end;
  }

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	691a      	ldr	r2, [r3, #16]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d903      	bls.n	800d2e8 <fifo_s_gets+0x3a>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	bfa8      	it	ge
 800d2f2:	4613      	movge	r3, r2
 800d2f4:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	691b      	ldr	r3, [r3, #16]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	3301      	adds	r3, #1
 800d304:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 800d306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	db0f      	blt.n	800d32e <fifo_s_gets+0x80>
  {
    len_to_end = len;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d318:	4619      	mov	r1, r3
 800d31a:	68b8      	ldr	r0, [r7, #8]
 800d31c:	f000 f8bc 	bl	800d498 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	691a      	ldr	r2, [r3, #16]
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	441a      	add	r2, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	611a      	str	r2, [r3, #16]
 800d32c:	e019      	b.n	800d362 <fifo_s_gets+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	623b      	str	r3, [r7, #32]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d33c:	4619      	mov	r1, r3
 800d33e:	68b8      	ldr	r0, [r7, #8]
 800d340:	f000 f8aa 	bl	800d498 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	18d0      	adds	r0, r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6a3a      	ldr	r2, [r7, #32]
 800d350:	4619      	mov	r1, r3
 800d352:	f000 f8a1 	bl	800d498 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	441a      	add	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	689a      	ldr	r2, [r3, #8]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	441a      	add	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	68da      	ldr	r2, [r3, #12]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	1ad2      	subs	r2, r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	60da      	str	r2, [r3, #12]
  retval = len;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	61fb      	str	r3, [r7, #28]
 800d37e:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	f383 8810 	msr	PRIMASK, r3
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	e008      	b.n	800d39c <fifo_s_gets+0xee>
    goto end;
 800d38a:	bf00      	nop
 800d38c:	e000      	b.n	800d390 <fifo_s_gets+0xe2>
    goto end;
 800d38e:	bf00      	nop
 800d390:	613c      	str	r4, [r7, #16]
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f383 8810 	msr	PRIMASK, r3
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800d398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	372c      	adds	r7, #44	; 0x2c
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd90      	pop	{r4, r7, pc}

0800d3a4 <fifo_s_used>:
//!
//! \retval The number of elements in FIFO.
//
//******************************************************************************************
int fifo_s_used(fifo_s_t *p_fifo)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);
  return p_fifo->used_num;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bc80      	pop	{r7}
 800d3b8:	4770      	bx	lr
	...

0800d3bc <pack_upload_data>:
#include "package.h"

static upload_attr_t upload_attr;
static uint8_t buff[10];
upload_attr_t pack_upload_data(uint8_t attr_id,uint8_t *data, uint8_t len)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	72fb      	strb	r3, [r7, #11]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	72bb      	strb	r3, [r7, #10]
	osMutexWait(packMutexHandle,osWaitForever);
 800d3d0:	4b15      	ldr	r3, [pc, #84]	; (800d428 <pack_upload_data+0x6c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f04f 31ff 	mov.w	r1, #4294967295
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fb f803 	bl	80083e4 <osMutexWait>
	uint8_t data_frame_length = len+2;
 800d3de:	7abb      	ldrb	r3, [r7, #10]
 800d3e0:	3302      	adds	r3, #2
 800d3e2:	75fb      	strb	r3, [r7, #23]
	buff[0]=attr_id;
 800d3e4:	4a11      	ldr	r2, [pc, #68]	; (800d42c <pack_upload_data+0x70>)
 800d3e6:	7afb      	ldrb	r3, [r7, #11]
 800d3e8:	7013      	strb	r3, [r2, #0]
	buff[1]=len;
 800d3ea:	4a10      	ldr	r2, [pc, #64]	; (800d42c <pack_upload_data+0x70>)
 800d3ec:	7abb      	ldrb	r3, [r7, #10]
 800d3ee:	7053      	strb	r3, [r2, #1]
	memcpy(&buff[2],data,len);
 800d3f0:	7abb      	ldrb	r3, [r7, #10]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6879      	ldr	r1, [r7, #4]
 800d3f6:	480e      	ldr	r0, [pc, #56]	; (800d430 <pack_upload_data+0x74>)
 800d3f8:	f000 f84e 	bl	800d498 <memcpy>
	upload_attr.pdata = buff;
 800d3fc:	4b0d      	ldr	r3, [pc, #52]	; (800d434 <pack_upload_data+0x78>)
 800d3fe:	4a0b      	ldr	r2, [pc, #44]	; (800d42c <pack_upload_data+0x70>)
 800d400:	601a      	str	r2, [r3, #0]
	upload_attr.len = data_frame_length;
 800d402:	4a0c      	ldr	r2, [pc, #48]	; (800d434 <pack_upload_data+0x78>)
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	7113      	strb	r3, [r2, #4]
	osMutexRelease(packMutexHandle);
 800d408:	4b07      	ldr	r3, [pc, #28]	; (800d428 <pack_upload_data+0x6c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fb f837 	bl	8008480 <osMutexRelease>
	return upload_attr;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	4a07      	ldr	r2, [pc, #28]	; (800d434 <pack_upload_data+0x78>)
 800d416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d41a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20009be4 	.word	0x20009be4
 800d42c:	20009598 	.word	0x20009598
 800d430:	2000959a 	.word	0x2000959a
 800d434:	20009590 	.word	0x20009590

0800d438 <atof>:
 800d438:	2100      	movs	r1, #0
 800d43a:	f000 bef5 	b.w	800e228 <strtod>
	...

0800d440 <__libc_init_array>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	2500      	movs	r5, #0
 800d444:	4e0c      	ldr	r6, [pc, #48]	; (800d478 <__libc_init_array+0x38>)
 800d446:	4c0d      	ldr	r4, [pc, #52]	; (800d47c <__libc_init_array+0x3c>)
 800d448:	1ba4      	subs	r4, r4, r6
 800d44a:	10a4      	asrs	r4, r4, #2
 800d44c:	42a5      	cmp	r5, r4
 800d44e:	d109      	bne.n	800d464 <__libc_init_array+0x24>
 800d450:	f001 fe5c 	bl	800f10c <_init>
 800d454:	2500      	movs	r5, #0
 800d456:	4e0a      	ldr	r6, [pc, #40]	; (800d480 <__libc_init_array+0x40>)
 800d458:	4c0a      	ldr	r4, [pc, #40]	; (800d484 <__libc_init_array+0x44>)
 800d45a:	1ba4      	subs	r4, r4, r6
 800d45c:	10a4      	asrs	r4, r4, #2
 800d45e:	42a5      	cmp	r5, r4
 800d460:	d105      	bne.n	800d46e <__libc_init_array+0x2e>
 800d462:	bd70      	pop	{r4, r5, r6, pc}
 800d464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d468:	4798      	blx	r3
 800d46a:	3501      	adds	r5, #1
 800d46c:	e7ee      	b.n	800d44c <__libc_init_array+0xc>
 800d46e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d472:	4798      	blx	r3
 800d474:	3501      	adds	r5, #1
 800d476:	e7f2      	b.n	800d45e <__libc_init_array+0x1e>
 800d478:	0800f4f0 	.word	0x0800f4f0
 800d47c:	0800f4f0 	.word	0x0800f4f0
 800d480:	0800f4f0 	.word	0x0800f4f0
 800d484:	0800f4f4 	.word	0x0800f4f4

0800d488 <malloc>:
 800d488:	4b02      	ldr	r3, [pc, #8]	; (800d494 <malloc+0xc>)
 800d48a:	4601      	mov	r1, r0
 800d48c:	6818      	ldr	r0, [r3, #0]
 800d48e:	f000 b817 	b.w	800d4c0 <_malloc_r>
 800d492:	bf00      	nop
 800d494:	20000948 	.word	0x20000948

0800d498 <memcpy>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	1e43      	subs	r3, r0, #1
 800d49c:	440a      	add	r2, r1
 800d49e:	4291      	cmp	r1, r2
 800d4a0:	d100      	bne.n	800d4a4 <memcpy+0xc>
 800d4a2:	bd10      	pop	{r4, pc}
 800d4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ac:	e7f7      	b.n	800d49e <memcpy+0x6>

0800d4ae <memset>:
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	4402      	add	r2, r0
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d100      	bne.n	800d4b8 <memset+0xa>
 800d4b6:	4770      	bx	lr
 800d4b8:	f803 1b01 	strb.w	r1, [r3], #1
 800d4bc:	e7f9      	b.n	800d4b2 <memset+0x4>
	...

0800d4c0 <_malloc_r>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	1ccd      	adds	r5, r1, #3
 800d4c4:	f025 0503 	bic.w	r5, r5, #3
 800d4c8:	3508      	adds	r5, #8
 800d4ca:	2d0c      	cmp	r5, #12
 800d4cc:	bf38      	it	cc
 800d4ce:	250c      	movcc	r5, #12
 800d4d0:	2d00      	cmp	r5, #0
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	db01      	blt.n	800d4da <_malloc_r+0x1a>
 800d4d6:	42a9      	cmp	r1, r5
 800d4d8:	d903      	bls.n	800d4e2 <_malloc_r+0x22>
 800d4da:	230c      	movs	r3, #12
 800d4dc:	6033      	str	r3, [r6, #0]
 800d4de:	2000      	movs	r0, #0
 800d4e0:	bd70      	pop	{r4, r5, r6, pc}
 800d4e2:	f001 f9ef 	bl	800e8c4 <__malloc_lock>
 800d4e6:	4a21      	ldr	r2, [pc, #132]	; (800d56c <_malloc_r+0xac>)
 800d4e8:	6814      	ldr	r4, [r2, #0]
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	b991      	cbnz	r1, 800d514 <_malloc_r+0x54>
 800d4ee:	4c20      	ldr	r4, [pc, #128]	; (800d570 <_malloc_r+0xb0>)
 800d4f0:	6823      	ldr	r3, [r4, #0]
 800d4f2:	b91b      	cbnz	r3, 800d4fc <_malloc_r+0x3c>
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	f000 f83d 	bl	800d574 <_sbrk_r>
 800d4fa:	6020      	str	r0, [r4, #0]
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	4630      	mov	r0, r6
 800d500:	f000 f838 	bl	800d574 <_sbrk_r>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d124      	bne.n	800d552 <_malloc_r+0x92>
 800d508:	230c      	movs	r3, #12
 800d50a:	4630      	mov	r0, r6
 800d50c:	6033      	str	r3, [r6, #0]
 800d50e:	f001 f9da 	bl	800e8c6 <__malloc_unlock>
 800d512:	e7e4      	b.n	800d4de <_malloc_r+0x1e>
 800d514:	680b      	ldr	r3, [r1, #0]
 800d516:	1b5b      	subs	r3, r3, r5
 800d518:	d418      	bmi.n	800d54c <_malloc_r+0x8c>
 800d51a:	2b0b      	cmp	r3, #11
 800d51c:	d90f      	bls.n	800d53e <_malloc_r+0x7e>
 800d51e:	600b      	str	r3, [r1, #0]
 800d520:	18cc      	adds	r4, r1, r3
 800d522:	50cd      	str	r5, [r1, r3]
 800d524:	4630      	mov	r0, r6
 800d526:	f001 f9ce 	bl	800e8c6 <__malloc_unlock>
 800d52a:	f104 000b 	add.w	r0, r4, #11
 800d52e:	1d23      	adds	r3, r4, #4
 800d530:	f020 0007 	bic.w	r0, r0, #7
 800d534:	1ac3      	subs	r3, r0, r3
 800d536:	d0d3      	beq.n	800d4e0 <_malloc_r+0x20>
 800d538:	425a      	negs	r2, r3
 800d53a:	50e2      	str	r2, [r4, r3]
 800d53c:	e7d0      	b.n	800d4e0 <_malloc_r+0x20>
 800d53e:	684b      	ldr	r3, [r1, #4]
 800d540:	428c      	cmp	r4, r1
 800d542:	bf16      	itet	ne
 800d544:	6063      	strne	r3, [r4, #4]
 800d546:	6013      	streq	r3, [r2, #0]
 800d548:	460c      	movne	r4, r1
 800d54a:	e7eb      	b.n	800d524 <_malloc_r+0x64>
 800d54c:	460c      	mov	r4, r1
 800d54e:	6849      	ldr	r1, [r1, #4]
 800d550:	e7cc      	b.n	800d4ec <_malloc_r+0x2c>
 800d552:	1cc4      	adds	r4, r0, #3
 800d554:	f024 0403 	bic.w	r4, r4, #3
 800d558:	42a0      	cmp	r0, r4
 800d55a:	d005      	beq.n	800d568 <_malloc_r+0xa8>
 800d55c:	1a21      	subs	r1, r4, r0
 800d55e:	4630      	mov	r0, r6
 800d560:	f000 f808 	bl	800d574 <_sbrk_r>
 800d564:	3001      	adds	r0, #1
 800d566:	d0cf      	beq.n	800d508 <_malloc_r+0x48>
 800d568:	6025      	str	r5, [r4, #0]
 800d56a:	e7db      	b.n	800d524 <_malloc_r+0x64>
 800d56c:	200095a4 	.word	0x200095a4
 800d570:	200095a8 	.word	0x200095a8

0800d574 <_sbrk_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	2300      	movs	r3, #0
 800d578:	4c05      	ldr	r4, [pc, #20]	; (800d590 <_sbrk_r+0x1c>)
 800d57a:	4605      	mov	r5, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	f001 fdb6 	bl	800f0f0 <_sbrk>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_sbrk_r+0x1a>
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_sbrk_r+0x1a>
 800d58c:	602b      	str	r3, [r5, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	20009ff4 	.word	0x20009ff4

0800d594 <strncmp>:
 800d594:	b510      	push	{r4, lr}
 800d596:	b16a      	cbz	r2, 800d5b4 <strncmp+0x20>
 800d598:	3901      	subs	r1, #1
 800d59a:	1884      	adds	r4, r0, r2
 800d59c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d5a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d103      	bne.n	800d5b0 <strncmp+0x1c>
 800d5a8:	42a0      	cmp	r0, r4
 800d5aa:	d001      	beq.n	800d5b0 <strncmp+0x1c>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1f5      	bne.n	800d59c <strncmp+0x8>
 800d5b0:	1a98      	subs	r0, r3, r2
 800d5b2:	bd10      	pop	{r4, pc}
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	e7fc      	b.n	800d5b2 <strncmp+0x1e>

0800d5b8 <strncpy>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	3901      	subs	r1, #1
 800d5be:	b902      	cbnz	r2, 800d5c2 <strncpy+0xa>
 800d5c0:	bd70      	pop	{r4, r5, r6, pc}
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d5c8:	1e56      	subs	r6, r2, #1
 800d5ca:	f803 5b01 	strb.w	r5, [r3], #1
 800d5ce:	b92d      	cbnz	r5, 800d5dc <strncpy+0x24>
 800d5d0:	4414      	add	r4, r2
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	d0f4      	beq.n	800d5c0 <strncpy+0x8>
 800d5d6:	f803 5b01 	strb.w	r5, [r3], #1
 800d5da:	e7fa      	b.n	800d5d2 <strncpy+0x1a>
 800d5dc:	461c      	mov	r4, r3
 800d5de:	4632      	mov	r2, r6
 800d5e0:	e7ed      	b.n	800d5be <strncpy+0x6>

0800d5e2 <sulp>:
 800d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	460f      	mov	r7, r1
 800d5e8:	4690      	mov	r8, r2
 800d5ea:	f001 fc37 	bl	800ee5c <__ulp>
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	460d      	mov	r5, r1
 800d5f2:	f1b8 0f00 	cmp.w	r8, #0
 800d5f6:	d011      	beq.n	800d61c <sulp+0x3a>
 800d5f8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d5fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d600:	2b00      	cmp	r3, #0
 800d602:	dd0b      	ble.n	800d61c <sulp+0x3a>
 800d604:	2400      	movs	r4, #0
 800d606:	051b      	lsls	r3, r3, #20
 800d608:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d60c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d610:	4622      	mov	r2, r4
 800d612:	462b      	mov	r3, r5
 800d614:	f7f2 ffd0 	bl	80005b8 <__aeabi_dmul>
 800d618:	4604      	mov	r4, r0
 800d61a:	460d      	mov	r5, r1
 800d61c:	4620      	mov	r0, r4
 800d61e:	4629      	mov	r1, r5
 800d620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d624:	0000      	movs	r0, r0
	...

0800d628 <_strtod_l>:
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	461f      	mov	r7, r3
 800d62e:	2300      	movs	r3, #0
 800d630:	b0a1      	sub	sp, #132	; 0x84
 800d632:	4683      	mov	fp, r0
 800d634:	4638      	mov	r0, r7
 800d636:	460e      	mov	r6, r1
 800d638:	9217      	str	r2, [sp, #92]	; 0x5c
 800d63a:	931c      	str	r3, [sp, #112]	; 0x70
 800d63c:	f001 f92e 	bl	800e89c <__localeconv_l>
 800d640:	4680      	mov	r8, r0
 800d642:	6800      	ldr	r0, [r0, #0]
 800d644:	f7f2 fdf4 	bl	8000230 <strlen>
 800d648:	f04f 0900 	mov.w	r9, #0
 800d64c:	4604      	mov	r4, r0
 800d64e:	f04f 0a00 	mov.w	sl, #0
 800d652:	961b      	str	r6, [sp, #108]	; 0x6c
 800d654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d656:	781a      	ldrb	r2, [r3, #0]
 800d658:	2a0d      	cmp	r2, #13
 800d65a:	d832      	bhi.n	800d6c2 <_strtod_l+0x9a>
 800d65c:	2a09      	cmp	r2, #9
 800d65e:	d236      	bcs.n	800d6ce <_strtod_l+0xa6>
 800d660:	2a00      	cmp	r2, #0
 800d662:	d03e      	beq.n	800d6e2 <_strtod_l+0xba>
 800d664:	2300      	movs	r3, #0
 800d666:	930d      	str	r3, [sp, #52]	; 0x34
 800d668:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d66a:	782b      	ldrb	r3, [r5, #0]
 800d66c:	2b30      	cmp	r3, #48	; 0x30
 800d66e:	f040 80ac 	bne.w	800d7ca <_strtod_l+0x1a2>
 800d672:	786b      	ldrb	r3, [r5, #1]
 800d674:	2b58      	cmp	r3, #88	; 0x58
 800d676:	d001      	beq.n	800d67c <_strtod_l+0x54>
 800d678:	2b78      	cmp	r3, #120	; 0x78
 800d67a:	d167      	bne.n	800d74c <_strtod_l+0x124>
 800d67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d67e:	9702      	str	r7, [sp, #8]
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	ab1c      	add	r3, sp, #112	; 0x70
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	4a89      	ldr	r2, [pc, #548]	; (800d8ac <_strtod_l+0x284>)
 800d688:	ab1d      	add	r3, sp, #116	; 0x74
 800d68a:	a91b      	add	r1, sp, #108	; 0x6c
 800d68c:	4658      	mov	r0, fp
 800d68e:	f000 fe2d 	bl	800e2ec <__gethex>
 800d692:	f010 0407 	ands.w	r4, r0, #7
 800d696:	4606      	mov	r6, r0
 800d698:	d005      	beq.n	800d6a6 <_strtod_l+0x7e>
 800d69a:	2c06      	cmp	r4, #6
 800d69c:	d12b      	bne.n	800d6f6 <_strtod_l+0xce>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	3501      	adds	r5, #1
 800d6a2:	951b      	str	r5, [sp, #108]	; 0x6c
 800d6a4:	930d      	str	r3, [sp, #52]	; 0x34
 800d6a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 85a6 	bne.w	800e1fa <_strtod_l+0xbd2>
 800d6ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6b0:	b1e3      	cbz	r3, 800d6ec <_strtod_l+0xc4>
 800d6b2:	464a      	mov	r2, r9
 800d6b4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	b021      	add	sp, #132	; 0x84
 800d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c2:	2a2b      	cmp	r2, #43	; 0x2b
 800d6c4:	d015      	beq.n	800d6f2 <_strtod_l+0xca>
 800d6c6:	2a2d      	cmp	r2, #45	; 0x2d
 800d6c8:	d004      	beq.n	800d6d4 <_strtod_l+0xac>
 800d6ca:	2a20      	cmp	r2, #32
 800d6cc:	d1ca      	bne.n	800d664 <_strtod_l+0x3c>
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d6d2:	e7bf      	b.n	800d654 <_strtod_l+0x2c>
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	920d      	str	r2, [sp, #52]	; 0x34
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	921b      	str	r2, [sp, #108]	; 0x6c
 800d6dc:	785b      	ldrb	r3, [r3, #1]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1c2      	bne.n	800d668 <_strtod_l+0x40>
 800d6e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6e4:	961b      	str	r6, [sp, #108]	; 0x6c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f040 8585 	bne.w	800e1f6 <_strtod_l+0xbce>
 800d6ec:	464a      	mov	r2, r9
 800d6ee:	4653      	mov	r3, sl
 800d6f0:	e7e2      	b.n	800d6b8 <_strtod_l+0x90>
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	e7ef      	b.n	800d6d6 <_strtod_l+0xae>
 800d6f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d6f8:	b13a      	cbz	r2, 800d70a <_strtod_l+0xe2>
 800d6fa:	2135      	movs	r1, #53	; 0x35
 800d6fc:	a81e      	add	r0, sp, #120	; 0x78
 800d6fe:	f001 fca0 	bl	800f042 <__copybits>
 800d702:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d704:	4658      	mov	r0, fp
 800d706:	f001 f913 	bl	800e930 <_Bfree>
 800d70a:	3c01      	subs	r4, #1
 800d70c:	2c04      	cmp	r4, #4
 800d70e:	d806      	bhi.n	800d71e <_strtod_l+0xf6>
 800d710:	e8df f004 	tbb	[pc, r4]
 800d714:	1714030a 	.word	0x1714030a
 800d718:	0a          	.byte	0x0a
 800d719:	00          	.byte	0x00
 800d71a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800d71e:	0731      	lsls	r1, r6, #28
 800d720:	d5c1      	bpl.n	800d6a6 <_strtod_l+0x7e>
 800d722:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800d726:	e7be      	b.n	800d6a6 <_strtod_l+0x7e>
 800d728:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d72a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800d72e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d736:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800d73a:	e7f0      	b.n	800d71e <_strtod_l+0xf6>
 800d73c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800d8b0 <_strtod_l+0x288>
 800d740:	e7ed      	b.n	800d71e <_strtod_l+0xf6>
 800d742:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800d746:	f04f 39ff 	mov.w	r9, #4294967295
 800d74a:	e7e8      	b.n	800d71e <_strtod_l+0xf6>
 800d74c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	921b      	str	r2, [sp, #108]	; 0x6c
 800d752:	785b      	ldrb	r3, [r3, #1]
 800d754:	2b30      	cmp	r3, #48	; 0x30
 800d756:	d0f9      	beq.n	800d74c <_strtod_l+0x124>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0a4      	beq.n	800d6a6 <_strtod_l+0x7e>
 800d75c:	2301      	movs	r3, #1
 800d75e:	2500      	movs	r5, #0
 800d760:	220a      	movs	r2, #10
 800d762:	9307      	str	r3, [sp, #28]
 800d764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d766:	9506      	str	r5, [sp, #24]
 800d768:	9308      	str	r3, [sp, #32]
 800d76a:	9504      	str	r5, [sp, #16]
 800d76c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d76e:	7807      	ldrb	r7, [r0, #0]
 800d770:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d774:	b2d9      	uxtb	r1, r3
 800d776:	2909      	cmp	r1, #9
 800d778:	d929      	bls.n	800d7ce <_strtod_l+0x1a6>
 800d77a:	4622      	mov	r2, r4
 800d77c:	f8d8 1000 	ldr.w	r1, [r8]
 800d780:	f7ff ff08 	bl	800d594 <strncmp>
 800d784:	2800      	cmp	r0, #0
 800d786:	d031      	beq.n	800d7ec <_strtod_l+0x1c4>
 800d788:	2000      	movs	r0, #0
 800d78a:	463b      	mov	r3, r7
 800d78c:	4602      	mov	r2, r0
 800d78e:	9c04      	ldr	r4, [sp, #16]
 800d790:	9005      	str	r0, [sp, #20]
 800d792:	2b65      	cmp	r3, #101	; 0x65
 800d794:	d001      	beq.n	800d79a <_strtod_l+0x172>
 800d796:	2b45      	cmp	r3, #69	; 0x45
 800d798:	d114      	bne.n	800d7c4 <_strtod_l+0x19c>
 800d79a:	b924      	cbnz	r4, 800d7a6 <_strtod_l+0x17e>
 800d79c:	b910      	cbnz	r0, 800d7a4 <_strtod_l+0x17c>
 800d79e:	9b07      	ldr	r3, [sp, #28]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d09e      	beq.n	800d6e2 <_strtod_l+0xba>
 800d7a4:	2400      	movs	r4, #0
 800d7a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d7a8:	1c73      	adds	r3, r6, #1
 800d7aa:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7ac:	7873      	ldrb	r3, [r6, #1]
 800d7ae:	2b2b      	cmp	r3, #43	; 0x2b
 800d7b0:	d078      	beq.n	800d8a4 <_strtod_l+0x27c>
 800d7b2:	2b2d      	cmp	r3, #45	; 0x2d
 800d7b4:	d070      	beq.n	800d898 <_strtod_l+0x270>
 800d7b6:	f04f 0c00 	mov.w	ip, #0
 800d7ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d7be:	2f09      	cmp	r7, #9
 800d7c0:	d97c      	bls.n	800d8bc <_strtod_l+0x294>
 800d7c2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d7c4:	f04f 0e00 	mov.w	lr, #0
 800d7c8:	e09a      	b.n	800d900 <_strtod_l+0x2d8>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e7c7      	b.n	800d75e <_strtod_l+0x136>
 800d7ce:	9904      	ldr	r1, [sp, #16]
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	2908      	cmp	r1, #8
 800d7d4:	bfd7      	itett	le
 800d7d6:	9906      	ldrle	r1, [sp, #24]
 800d7d8:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d7dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d7e0:	9306      	strle	r3, [sp, #24]
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	901b      	str	r0, [sp, #108]	; 0x6c
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	e7bf      	b.n	800d76c <_strtod_l+0x144>
 800d7ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7ee:	191a      	adds	r2, r3, r4
 800d7f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d7f2:	9a04      	ldr	r2, [sp, #16]
 800d7f4:	5d1b      	ldrb	r3, [r3, r4]
 800d7f6:	2a00      	cmp	r2, #0
 800d7f8:	d037      	beq.n	800d86a <_strtod_l+0x242>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	9c04      	ldr	r4, [sp, #16]
 800d7fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d802:	2909      	cmp	r1, #9
 800d804:	d913      	bls.n	800d82e <_strtod_l+0x206>
 800d806:	2101      	movs	r1, #1
 800d808:	9105      	str	r1, [sp, #20]
 800d80a:	e7c2      	b.n	800d792 <_strtod_l+0x16a>
 800d80c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d80e:	3001      	adds	r0, #1
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	921b      	str	r2, [sp, #108]	; 0x6c
 800d814:	785b      	ldrb	r3, [r3, #1]
 800d816:	2b30      	cmp	r3, #48	; 0x30
 800d818:	d0f8      	beq.n	800d80c <_strtod_l+0x1e4>
 800d81a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d81e:	2a08      	cmp	r2, #8
 800d820:	f200 84f0 	bhi.w	800e204 <_strtod_l+0xbdc>
 800d824:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d826:	9208      	str	r2, [sp, #32]
 800d828:	4602      	mov	r2, r0
 800d82a:	2000      	movs	r0, #0
 800d82c:	4604      	mov	r4, r0
 800d82e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d832:	f100 0101 	add.w	r1, r0, #1
 800d836:	d012      	beq.n	800d85e <_strtod_l+0x236>
 800d838:	440a      	add	r2, r1
 800d83a:	270a      	movs	r7, #10
 800d83c:	4621      	mov	r1, r4
 800d83e:	eb00 0c04 	add.w	ip, r0, r4
 800d842:	458c      	cmp	ip, r1
 800d844:	d113      	bne.n	800d86e <_strtod_l+0x246>
 800d846:	1821      	adds	r1, r4, r0
 800d848:	2908      	cmp	r1, #8
 800d84a:	f104 0401 	add.w	r4, r4, #1
 800d84e:	4404      	add	r4, r0
 800d850:	dc19      	bgt.n	800d886 <_strtod_l+0x25e>
 800d852:	210a      	movs	r1, #10
 800d854:	9b06      	ldr	r3, [sp, #24]
 800d856:	fb01 e303 	mla	r3, r1, r3, lr
 800d85a:	9306      	str	r3, [sp, #24]
 800d85c:	2100      	movs	r1, #0
 800d85e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d860:	1c58      	adds	r0, r3, #1
 800d862:	901b      	str	r0, [sp, #108]	; 0x6c
 800d864:	785b      	ldrb	r3, [r3, #1]
 800d866:	4608      	mov	r0, r1
 800d868:	e7c9      	b.n	800d7fe <_strtod_l+0x1d6>
 800d86a:	9804      	ldr	r0, [sp, #16]
 800d86c:	e7d3      	b.n	800d816 <_strtod_l+0x1ee>
 800d86e:	2908      	cmp	r1, #8
 800d870:	f101 0101 	add.w	r1, r1, #1
 800d874:	dc03      	bgt.n	800d87e <_strtod_l+0x256>
 800d876:	9b06      	ldr	r3, [sp, #24]
 800d878:	437b      	muls	r3, r7
 800d87a:	9306      	str	r3, [sp, #24]
 800d87c:	e7e1      	b.n	800d842 <_strtod_l+0x21a>
 800d87e:	2910      	cmp	r1, #16
 800d880:	bfd8      	it	le
 800d882:	437d      	mulle	r5, r7
 800d884:	e7dd      	b.n	800d842 <_strtod_l+0x21a>
 800d886:	2c10      	cmp	r4, #16
 800d888:	bfdc      	itt	le
 800d88a:	210a      	movle	r1, #10
 800d88c:	fb01 e505 	mlale	r5, r1, r5, lr
 800d890:	e7e4      	b.n	800d85c <_strtod_l+0x234>
 800d892:	2301      	movs	r3, #1
 800d894:	9305      	str	r3, [sp, #20]
 800d896:	e781      	b.n	800d79c <_strtod_l+0x174>
 800d898:	f04f 0c01 	mov.w	ip, #1
 800d89c:	1cb3      	adds	r3, r6, #2
 800d89e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d8a0:	78b3      	ldrb	r3, [r6, #2]
 800d8a2:	e78a      	b.n	800d7ba <_strtod_l+0x192>
 800d8a4:	f04f 0c00 	mov.w	ip, #0
 800d8a8:	e7f8      	b.n	800d89c <_strtod_l+0x274>
 800d8aa:	bf00      	nop
 800d8ac:	0800f290 	.word	0x0800f290
 800d8b0:	7ff00000 	.word	0x7ff00000
 800d8b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8b6:	1c5f      	adds	r7, r3, #1
 800d8b8:	971b      	str	r7, [sp, #108]	; 0x6c
 800d8ba:	785b      	ldrb	r3, [r3, #1]
 800d8bc:	2b30      	cmp	r3, #48	; 0x30
 800d8be:	d0f9      	beq.n	800d8b4 <_strtod_l+0x28c>
 800d8c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d8c4:	2f08      	cmp	r7, #8
 800d8c6:	f63f af7d 	bhi.w	800d7c4 <_strtod_l+0x19c>
 800d8ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d8ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8d4:	1c5f      	adds	r7, r3, #1
 800d8d6:	971b      	str	r7, [sp, #108]	; 0x6c
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d8de:	f1b8 0f09 	cmp.w	r8, #9
 800d8e2:	d937      	bls.n	800d954 <_strtod_l+0x32c>
 800d8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8e6:	1a7f      	subs	r7, r7, r1
 800d8e8:	2f08      	cmp	r7, #8
 800d8ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d8ee:	dc37      	bgt.n	800d960 <_strtod_l+0x338>
 800d8f0:	45be      	cmp	lr, r7
 800d8f2:	bfa8      	it	ge
 800d8f4:	46be      	movge	lr, r7
 800d8f6:	f1bc 0f00 	cmp.w	ip, #0
 800d8fa:	d001      	beq.n	800d900 <_strtod_l+0x2d8>
 800d8fc:	f1ce 0e00 	rsb	lr, lr, #0
 800d900:	2c00      	cmp	r4, #0
 800d902:	d151      	bne.n	800d9a8 <_strtod_l+0x380>
 800d904:	2800      	cmp	r0, #0
 800d906:	f47f aece 	bne.w	800d6a6 <_strtod_l+0x7e>
 800d90a:	9a07      	ldr	r2, [sp, #28]
 800d90c:	2a00      	cmp	r2, #0
 800d90e:	f47f aeca 	bne.w	800d6a6 <_strtod_l+0x7e>
 800d912:	9a05      	ldr	r2, [sp, #20]
 800d914:	2a00      	cmp	r2, #0
 800d916:	f47f aee4 	bne.w	800d6e2 <_strtod_l+0xba>
 800d91a:	2b4e      	cmp	r3, #78	; 0x4e
 800d91c:	d027      	beq.n	800d96e <_strtod_l+0x346>
 800d91e:	dc21      	bgt.n	800d964 <_strtod_l+0x33c>
 800d920:	2b49      	cmp	r3, #73	; 0x49
 800d922:	f47f aede 	bne.w	800d6e2 <_strtod_l+0xba>
 800d926:	49a4      	ldr	r1, [pc, #656]	; (800dbb8 <_strtod_l+0x590>)
 800d928:	a81b      	add	r0, sp, #108	; 0x6c
 800d92a:	f000 ff13 	bl	800e754 <__match>
 800d92e:	2800      	cmp	r0, #0
 800d930:	f43f aed7 	beq.w	800d6e2 <_strtod_l+0xba>
 800d934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d936:	49a1      	ldr	r1, [pc, #644]	; (800dbbc <_strtod_l+0x594>)
 800d938:	3b01      	subs	r3, #1
 800d93a:	a81b      	add	r0, sp, #108	; 0x6c
 800d93c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d93e:	f000 ff09 	bl	800e754 <__match>
 800d942:	b910      	cbnz	r0, 800d94a <_strtod_l+0x322>
 800d944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d946:	3301      	adds	r3, #1
 800d948:	931b      	str	r3, [sp, #108]	; 0x6c
 800d94a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800dbd0 <_strtod_l+0x5a8>
 800d94e:	f04f 0900 	mov.w	r9, #0
 800d952:	e6a8      	b.n	800d6a6 <_strtod_l+0x7e>
 800d954:	210a      	movs	r1, #10
 800d956:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d95a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d95e:	e7b8      	b.n	800d8d2 <_strtod_l+0x2aa>
 800d960:	46be      	mov	lr, r7
 800d962:	e7c8      	b.n	800d8f6 <_strtod_l+0x2ce>
 800d964:	2b69      	cmp	r3, #105	; 0x69
 800d966:	d0de      	beq.n	800d926 <_strtod_l+0x2fe>
 800d968:	2b6e      	cmp	r3, #110	; 0x6e
 800d96a:	f47f aeba 	bne.w	800d6e2 <_strtod_l+0xba>
 800d96e:	4994      	ldr	r1, [pc, #592]	; (800dbc0 <_strtod_l+0x598>)
 800d970:	a81b      	add	r0, sp, #108	; 0x6c
 800d972:	f000 feef 	bl	800e754 <__match>
 800d976:	2800      	cmp	r0, #0
 800d978:	f43f aeb3 	beq.w	800d6e2 <_strtod_l+0xba>
 800d97c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b28      	cmp	r3, #40	; 0x28
 800d982:	d10e      	bne.n	800d9a2 <_strtod_l+0x37a>
 800d984:	aa1e      	add	r2, sp, #120	; 0x78
 800d986:	498f      	ldr	r1, [pc, #572]	; (800dbc4 <_strtod_l+0x59c>)
 800d988:	a81b      	add	r0, sp, #108	; 0x6c
 800d98a:	f000 fef7 	bl	800e77c <__hexnan>
 800d98e:	2805      	cmp	r0, #5
 800d990:	d107      	bne.n	800d9a2 <_strtod_l+0x37a>
 800d992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d994:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800d998:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800d99c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800d9a0:	e681      	b.n	800d6a6 <_strtod_l+0x7e>
 800d9a2:	f8df a234 	ldr.w	sl, [pc, #564]	; 800dbd8 <_strtod_l+0x5b0>
 800d9a6:	e7d2      	b.n	800d94e <_strtod_l+0x326>
 800d9a8:	ebae 0302 	sub.w	r3, lr, r2
 800d9ac:	9307      	str	r3, [sp, #28]
 800d9ae:	9b04      	ldr	r3, [sp, #16]
 800d9b0:	9806      	ldr	r0, [sp, #24]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	bf08      	it	eq
 800d9b6:	4623      	moveq	r3, r4
 800d9b8:	2c10      	cmp	r4, #16
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	46a0      	mov	r8, r4
 800d9be:	bfa8      	it	ge
 800d9c0:	f04f 0810 	movge.w	r8, #16
 800d9c4:	f7f2 fd7e 	bl	80004c4 <__aeabi_ui2d>
 800d9c8:	2c09      	cmp	r4, #9
 800d9ca:	4681      	mov	r9, r0
 800d9cc:	468a      	mov	sl, r1
 800d9ce:	dc13      	bgt.n	800d9f8 <_strtod_l+0x3d0>
 800d9d0:	9b07      	ldr	r3, [sp, #28]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f43f ae67 	beq.w	800d6a6 <_strtod_l+0x7e>
 800d9d8:	9b07      	ldr	r3, [sp, #28]
 800d9da:	dd7e      	ble.n	800dada <_strtod_l+0x4b2>
 800d9dc:	2b16      	cmp	r3, #22
 800d9de:	dc65      	bgt.n	800daac <_strtod_l+0x484>
 800d9e0:	4a79      	ldr	r2, [pc, #484]	; (800dbc8 <_strtod_l+0x5a0>)
 800d9e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d9e6:	464a      	mov	r2, r9
 800d9e8:	e9de 0100 	ldrd	r0, r1, [lr]
 800d9ec:	4653      	mov	r3, sl
 800d9ee:	f7f2 fde3 	bl	80005b8 <__aeabi_dmul>
 800d9f2:	4681      	mov	r9, r0
 800d9f4:	468a      	mov	sl, r1
 800d9f6:	e656      	b.n	800d6a6 <_strtod_l+0x7e>
 800d9f8:	4b73      	ldr	r3, [pc, #460]	; (800dbc8 <_strtod_l+0x5a0>)
 800d9fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d9fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800da02:	f7f2 fdd9 	bl	80005b8 <__aeabi_dmul>
 800da06:	4606      	mov	r6, r0
 800da08:	4628      	mov	r0, r5
 800da0a:	460f      	mov	r7, r1
 800da0c:	f7f2 fd5a 	bl	80004c4 <__aeabi_ui2d>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4630      	mov	r0, r6
 800da16:	4639      	mov	r1, r7
 800da18:	f7f2 fc18 	bl	800024c <__adddf3>
 800da1c:	2c0f      	cmp	r4, #15
 800da1e:	4681      	mov	r9, r0
 800da20:	468a      	mov	sl, r1
 800da22:	ddd5      	ble.n	800d9d0 <_strtod_l+0x3a8>
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	eba4 0808 	sub.w	r8, r4, r8
 800da2a:	4498      	add	r8, r3
 800da2c:	f1b8 0f00 	cmp.w	r8, #0
 800da30:	f340 809a 	ble.w	800db68 <_strtod_l+0x540>
 800da34:	f018 030f 	ands.w	r3, r8, #15
 800da38:	d00a      	beq.n	800da50 <_strtod_l+0x428>
 800da3a:	4963      	ldr	r1, [pc, #396]	; (800dbc8 <_strtod_l+0x5a0>)
 800da3c:	464a      	mov	r2, r9
 800da3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da46:	4653      	mov	r3, sl
 800da48:	f7f2 fdb6 	bl	80005b8 <__aeabi_dmul>
 800da4c:	4681      	mov	r9, r0
 800da4e:	468a      	mov	sl, r1
 800da50:	f038 080f 	bics.w	r8, r8, #15
 800da54:	d077      	beq.n	800db46 <_strtod_l+0x51e>
 800da56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800da5a:	dd4b      	ble.n	800daf4 <_strtod_l+0x4cc>
 800da5c:	f04f 0800 	mov.w	r8, #0
 800da60:	f8cd 8010 	str.w	r8, [sp, #16]
 800da64:	f8cd 8020 	str.w	r8, [sp, #32]
 800da68:	f8cd 8018 	str.w	r8, [sp, #24]
 800da6c:	2322      	movs	r3, #34	; 0x22
 800da6e:	f04f 0900 	mov.w	r9, #0
 800da72:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800dbd0 <_strtod_l+0x5a8>
 800da76:	f8cb 3000 	str.w	r3, [fp]
 800da7a:	9b08      	ldr	r3, [sp, #32]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f43f ae12 	beq.w	800d6a6 <_strtod_l+0x7e>
 800da82:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da84:	4658      	mov	r0, fp
 800da86:	f000 ff53 	bl	800e930 <_Bfree>
 800da8a:	9906      	ldr	r1, [sp, #24]
 800da8c:	4658      	mov	r0, fp
 800da8e:	f000 ff4f 	bl	800e930 <_Bfree>
 800da92:	9904      	ldr	r1, [sp, #16]
 800da94:	4658      	mov	r0, fp
 800da96:	f000 ff4b 	bl	800e930 <_Bfree>
 800da9a:	9908      	ldr	r1, [sp, #32]
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 ff47 	bl	800e930 <_Bfree>
 800daa2:	4641      	mov	r1, r8
 800daa4:	4658      	mov	r0, fp
 800daa6:	f000 ff43 	bl	800e930 <_Bfree>
 800daaa:	e5fc      	b.n	800d6a6 <_strtod_l+0x7e>
 800daac:	9a07      	ldr	r2, [sp, #28]
 800daae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800dab2:	4293      	cmp	r3, r2
 800dab4:	dbb6      	blt.n	800da24 <_strtod_l+0x3fc>
 800dab6:	4d44      	ldr	r5, [pc, #272]	; (800dbc8 <_strtod_l+0x5a0>)
 800dab8:	f1c4 040f 	rsb	r4, r4, #15
 800dabc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800dac0:	464a      	mov	r2, r9
 800dac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dac6:	4653      	mov	r3, sl
 800dac8:	f7f2 fd76 	bl	80005b8 <__aeabi_dmul>
 800dacc:	9b07      	ldr	r3, [sp, #28]
 800dace:	1b1c      	subs	r4, r3, r4
 800dad0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dad8:	e789      	b.n	800d9ee <_strtod_l+0x3c6>
 800dada:	f113 0f16 	cmn.w	r3, #22
 800dade:	dba1      	blt.n	800da24 <_strtod_l+0x3fc>
 800dae0:	4a39      	ldr	r2, [pc, #228]	; (800dbc8 <_strtod_l+0x5a0>)
 800dae2:	4648      	mov	r0, r9
 800dae4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800dae8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800daec:	4651      	mov	r1, sl
 800daee:	f7f2 fe8d 	bl	800080c <__aeabi_ddiv>
 800daf2:	e77e      	b.n	800d9f2 <_strtod_l+0x3ca>
 800daf4:	2300      	movs	r3, #0
 800daf6:	4648      	mov	r0, r9
 800daf8:	4651      	mov	r1, sl
 800dafa:	461d      	mov	r5, r3
 800dafc:	4e33      	ldr	r6, [pc, #204]	; (800dbcc <_strtod_l+0x5a4>)
 800dafe:	ea4f 1828 	mov.w	r8, r8, asr #4
 800db02:	f1b8 0f01 	cmp.w	r8, #1
 800db06:	dc21      	bgt.n	800db4c <_strtod_l+0x524>
 800db08:	b10b      	cbz	r3, 800db0e <_strtod_l+0x4e6>
 800db0a:	4681      	mov	r9, r0
 800db0c:	468a      	mov	sl, r1
 800db0e:	4b2f      	ldr	r3, [pc, #188]	; (800dbcc <_strtod_l+0x5a4>)
 800db10:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800db14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800db18:	464a      	mov	r2, r9
 800db1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db1e:	4653      	mov	r3, sl
 800db20:	f7f2 fd4a 	bl	80005b8 <__aeabi_dmul>
 800db24:	4b2a      	ldr	r3, [pc, #168]	; (800dbd0 <_strtod_l+0x5a8>)
 800db26:	460a      	mov	r2, r1
 800db28:	400b      	ands	r3, r1
 800db2a:	492a      	ldr	r1, [pc, #168]	; (800dbd4 <_strtod_l+0x5ac>)
 800db2c:	4681      	mov	r9, r0
 800db2e:	428b      	cmp	r3, r1
 800db30:	d894      	bhi.n	800da5c <_strtod_l+0x434>
 800db32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800db36:	428b      	cmp	r3, r1
 800db38:	bf86      	itte	hi
 800db3a:	f04f 39ff 	movhi.w	r9, #4294967295
 800db3e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800dbdc <_strtod_l+0x5b4>
 800db42:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800db46:	2300      	movs	r3, #0
 800db48:	9305      	str	r3, [sp, #20]
 800db4a:	e07b      	b.n	800dc44 <_strtod_l+0x61c>
 800db4c:	f018 0f01 	tst.w	r8, #1
 800db50:	d006      	beq.n	800db60 <_strtod_l+0x538>
 800db52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f7f2 fd2d 	bl	80005b8 <__aeabi_dmul>
 800db5e:	2301      	movs	r3, #1
 800db60:	3501      	adds	r5, #1
 800db62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800db66:	e7cc      	b.n	800db02 <_strtod_l+0x4da>
 800db68:	d0ed      	beq.n	800db46 <_strtod_l+0x51e>
 800db6a:	f1c8 0800 	rsb	r8, r8, #0
 800db6e:	f018 020f 	ands.w	r2, r8, #15
 800db72:	d00a      	beq.n	800db8a <_strtod_l+0x562>
 800db74:	4b14      	ldr	r3, [pc, #80]	; (800dbc8 <_strtod_l+0x5a0>)
 800db76:	4648      	mov	r0, r9
 800db78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db7c:	4651      	mov	r1, sl
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	f7f2 fe43 	bl	800080c <__aeabi_ddiv>
 800db86:	4681      	mov	r9, r0
 800db88:	468a      	mov	sl, r1
 800db8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800db8e:	d0da      	beq.n	800db46 <_strtod_l+0x51e>
 800db90:	f1b8 0f1f 	cmp.w	r8, #31
 800db94:	dd24      	ble.n	800dbe0 <_strtod_l+0x5b8>
 800db96:	f04f 0800 	mov.w	r8, #0
 800db9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800db9e:	f8cd 8020 	str.w	r8, [sp, #32]
 800dba2:	f8cd 8018 	str.w	r8, [sp, #24]
 800dba6:	2322      	movs	r3, #34	; 0x22
 800dba8:	f04f 0900 	mov.w	r9, #0
 800dbac:	f04f 0a00 	mov.w	sl, #0
 800dbb0:	f8cb 3000 	str.w	r3, [fp]
 800dbb4:	e761      	b.n	800da7a <_strtod_l+0x452>
 800dbb6:	bf00      	nop
 800dbb8:	0800f284 	.word	0x0800f284
 800dbbc:	0800f287 	.word	0x0800f287
 800dbc0:	0800f28d 	.word	0x0800f28d
 800dbc4:	0800f2a4 	.word	0x0800f2a4
 800dbc8:	0800f318 	.word	0x0800f318
 800dbcc:	0800f2f0 	.word	0x0800f2f0
 800dbd0:	7ff00000 	.word	0x7ff00000
 800dbd4:	7ca00000 	.word	0x7ca00000
 800dbd8:	fff80000 	.word	0xfff80000
 800dbdc:	7fefffff 	.word	0x7fefffff
 800dbe0:	f018 0310 	ands.w	r3, r8, #16
 800dbe4:	bf18      	it	ne
 800dbe6:	236a      	movne	r3, #106	; 0x6a
 800dbe8:	4648      	mov	r0, r9
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	4651      	mov	r1, sl
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4da1      	ldr	r5, [pc, #644]	; (800de78 <_strtod_l+0x850>)
 800dbf2:	f1b8 0f00 	cmp.w	r8, #0
 800dbf6:	f300 8113 	bgt.w	800de20 <_strtod_l+0x7f8>
 800dbfa:	b10b      	cbz	r3, 800dc00 <_strtod_l+0x5d8>
 800dbfc:	4681      	mov	r9, r0
 800dbfe:	468a      	mov	sl, r1
 800dc00:	9b05      	ldr	r3, [sp, #20]
 800dc02:	b1bb      	cbz	r3, 800dc34 <_strtod_l+0x60c>
 800dc04:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800dc08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	4651      	mov	r1, sl
 800dc10:	dd10      	ble.n	800dc34 <_strtod_l+0x60c>
 800dc12:	2b1f      	cmp	r3, #31
 800dc14:	f340 8110 	ble.w	800de38 <_strtod_l+0x810>
 800dc18:	2b34      	cmp	r3, #52	; 0x34
 800dc1a:	bfd8      	it	le
 800dc1c:	f04f 32ff 	movle.w	r2, #4294967295
 800dc20:	f04f 0900 	mov.w	r9, #0
 800dc24:	bfcf      	iteee	gt
 800dc26:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800dc2a:	3b20      	suble	r3, #32
 800dc2c:	fa02 f303 	lslle.w	r3, r2, r3
 800dc30:	ea03 0a01 	andle.w	sl, r3, r1
 800dc34:	2200      	movs	r2, #0
 800dc36:	2300      	movs	r3, #0
 800dc38:	4648      	mov	r0, r9
 800dc3a:	4651      	mov	r1, sl
 800dc3c:	f7f2 ff24 	bl	8000a88 <__aeabi_dcmpeq>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d1a8      	bne.n	800db96 <_strtod_l+0x56e>
 800dc44:	9b06      	ldr	r3, [sp, #24]
 800dc46:	9a04      	ldr	r2, [sp, #16]
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	9908      	ldr	r1, [sp, #32]
 800dc4c:	4623      	mov	r3, r4
 800dc4e:	4658      	mov	r0, fp
 800dc50:	f000 fec0 	bl	800e9d4 <__s2b>
 800dc54:	9008      	str	r0, [sp, #32]
 800dc56:	2800      	cmp	r0, #0
 800dc58:	f43f af00 	beq.w	800da5c <_strtod_l+0x434>
 800dc5c:	9a07      	ldr	r2, [sp, #28]
 800dc5e:	9b07      	ldr	r3, [sp, #28]
 800dc60:	2a00      	cmp	r2, #0
 800dc62:	f1c3 0300 	rsb	r3, r3, #0
 800dc66:	bfa8      	it	ge
 800dc68:	2300      	movge	r3, #0
 800dc6a:	f04f 0800 	mov.w	r8, #0
 800dc6e:	930e      	str	r3, [sp, #56]	; 0x38
 800dc70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc74:	9316      	str	r3, [sp, #88]	; 0x58
 800dc76:	f8cd 8010 	str.w	r8, [sp, #16]
 800dc7a:	9b08      	ldr	r3, [sp, #32]
 800dc7c:	4658      	mov	r0, fp
 800dc7e:	6859      	ldr	r1, [r3, #4]
 800dc80:	f000 fe22 	bl	800e8c8 <_Balloc>
 800dc84:	9006      	str	r0, [sp, #24]
 800dc86:	2800      	cmp	r0, #0
 800dc88:	f43f aef0 	beq.w	800da6c <_strtod_l+0x444>
 800dc8c:	9b08      	ldr	r3, [sp, #32]
 800dc8e:	300c      	adds	r0, #12
 800dc90:	691a      	ldr	r2, [r3, #16]
 800dc92:	f103 010c 	add.w	r1, r3, #12
 800dc96:	3202      	adds	r2, #2
 800dc98:	0092      	lsls	r2, r2, #2
 800dc9a:	f7ff fbfd 	bl	800d498 <memcpy>
 800dc9e:	ab1e      	add	r3, sp, #120	; 0x78
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	ab1d      	add	r3, sp, #116	; 0x74
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	464a      	mov	r2, r9
 800dca8:	4653      	mov	r3, sl
 800dcaa:	4658      	mov	r0, fp
 800dcac:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800dcb0:	f001 f94a 	bl	800ef48 <__d2b>
 800dcb4:	901c      	str	r0, [sp, #112]	; 0x70
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	f43f aed8 	beq.w	800da6c <_strtod_l+0x444>
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	4658      	mov	r0, fp
 800dcc0:	f000 ff14 	bl	800eaec <__i2b>
 800dcc4:	9004      	str	r0, [sp, #16]
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	f43f aecf 	beq.w	800da6c <_strtod_l+0x444>
 800dcce:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800dcd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dcd2:	2d00      	cmp	r5, #0
 800dcd4:	bfab      	itete	ge
 800dcd6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800dcd8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800dcda:	18ee      	addge	r6, r5, r3
 800dcdc:	1b5c      	sublt	r4, r3, r5
 800dcde:	9b05      	ldr	r3, [sp, #20]
 800dce0:	bfa8      	it	ge
 800dce2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800dce4:	eba5 0503 	sub.w	r5, r5, r3
 800dce8:	4415      	add	r5, r2
 800dcea:	4b64      	ldr	r3, [pc, #400]	; (800de7c <_strtod_l+0x854>)
 800dcec:	f105 35ff 	add.w	r5, r5, #4294967295
 800dcf0:	bfb8      	it	lt
 800dcf2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800dcf4:	429d      	cmp	r5, r3
 800dcf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dcfa:	f280 80af 	bge.w	800de5c <_strtod_l+0x834>
 800dcfe:	1b5b      	subs	r3, r3, r5
 800dd00:	2b1f      	cmp	r3, #31
 800dd02:	eba2 0203 	sub.w	r2, r2, r3
 800dd06:	f04f 0701 	mov.w	r7, #1
 800dd0a:	f300 809c 	bgt.w	800de46 <_strtod_l+0x81e>
 800dd0e:	2500      	movs	r5, #0
 800dd10:	fa07 f303 	lsl.w	r3, r7, r3
 800dd14:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd16:	18b7      	adds	r7, r6, r2
 800dd18:	9b05      	ldr	r3, [sp, #20]
 800dd1a:	42be      	cmp	r6, r7
 800dd1c:	4414      	add	r4, r2
 800dd1e:	441c      	add	r4, r3
 800dd20:	4633      	mov	r3, r6
 800dd22:	bfa8      	it	ge
 800dd24:	463b      	movge	r3, r7
 800dd26:	42a3      	cmp	r3, r4
 800dd28:	bfa8      	it	ge
 800dd2a:	4623      	movge	r3, r4
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	bfc2      	ittt	gt
 800dd30:	1aff      	subgt	r7, r7, r3
 800dd32:	1ae4      	subgt	r4, r4, r3
 800dd34:	1af6      	subgt	r6, r6, r3
 800dd36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd38:	b1bb      	cbz	r3, 800dd6a <_strtod_l+0x742>
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	9904      	ldr	r1, [sp, #16]
 800dd3e:	4658      	mov	r0, fp
 800dd40:	f000 ff72 	bl	800ec28 <__pow5mult>
 800dd44:	9004      	str	r0, [sp, #16]
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f43f ae90 	beq.w	800da6c <_strtod_l+0x444>
 800dd4c:	4601      	mov	r1, r0
 800dd4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dd50:	4658      	mov	r0, fp
 800dd52:	f000 fed4 	bl	800eafe <__multiply>
 800dd56:	9009      	str	r0, [sp, #36]	; 0x24
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	f43f ae87 	beq.w	800da6c <_strtod_l+0x444>
 800dd5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dd60:	4658      	mov	r0, fp
 800dd62:	f000 fde5 	bl	800e930 <_Bfree>
 800dd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd68:	931c      	str	r3, [sp, #112]	; 0x70
 800dd6a:	2f00      	cmp	r7, #0
 800dd6c:	dc7a      	bgt.n	800de64 <_strtod_l+0x83c>
 800dd6e:	9b07      	ldr	r3, [sp, #28]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	dd08      	ble.n	800dd86 <_strtod_l+0x75e>
 800dd74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd76:	9906      	ldr	r1, [sp, #24]
 800dd78:	4658      	mov	r0, fp
 800dd7a:	f000 ff55 	bl	800ec28 <__pow5mult>
 800dd7e:	9006      	str	r0, [sp, #24]
 800dd80:	2800      	cmp	r0, #0
 800dd82:	f43f ae73 	beq.w	800da6c <_strtod_l+0x444>
 800dd86:	2c00      	cmp	r4, #0
 800dd88:	dd08      	ble.n	800dd9c <_strtod_l+0x774>
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	9906      	ldr	r1, [sp, #24]
 800dd8e:	4658      	mov	r0, fp
 800dd90:	f000 ff98 	bl	800ecc4 <__lshift>
 800dd94:	9006      	str	r0, [sp, #24]
 800dd96:	2800      	cmp	r0, #0
 800dd98:	f43f ae68 	beq.w	800da6c <_strtod_l+0x444>
 800dd9c:	2e00      	cmp	r6, #0
 800dd9e:	dd08      	ble.n	800ddb2 <_strtod_l+0x78a>
 800dda0:	4632      	mov	r2, r6
 800dda2:	9904      	ldr	r1, [sp, #16]
 800dda4:	4658      	mov	r0, fp
 800dda6:	f000 ff8d 	bl	800ecc4 <__lshift>
 800ddaa:	9004      	str	r0, [sp, #16]
 800ddac:	2800      	cmp	r0, #0
 800ddae:	f43f ae5d 	beq.w	800da6c <_strtod_l+0x444>
 800ddb2:	9a06      	ldr	r2, [sp, #24]
 800ddb4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ddb6:	4658      	mov	r0, fp
 800ddb8:	f000 fff2 	bl	800eda0 <__mdiff>
 800ddbc:	4680      	mov	r8, r0
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f43f ae54 	beq.w	800da6c <_strtod_l+0x444>
 800ddc4:	2400      	movs	r4, #0
 800ddc6:	68c3      	ldr	r3, [r0, #12]
 800ddc8:	9904      	ldr	r1, [sp, #16]
 800ddca:	60c4      	str	r4, [r0, #12]
 800ddcc:	930c      	str	r3, [sp, #48]	; 0x30
 800ddce:	f000 ffcd 	bl	800ed6c <__mcmp>
 800ddd2:	42a0      	cmp	r0, r4
 800ddd4:	da54      	bge.n	800de80 <_strtod_l+0x858>
 800ddd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd8:	b9f3      	cbnz	r3, 800de18 <_strtod_l+0x7f0>
 800ddda:	f1b9 0f00 	cmp.w	r9, #0
 800ddde:	d11b      	bne.n	800de18 <_strtod_l+0x7f0>
 800dde0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800dde4:	b9c3      	cbnz	r3, 800de18 <_strtod_l+0x7f0>
 800dde6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ddea:	0d1b      	lsrs	r3, r3, #20
 800ddec:	051b      	lsls	r3, r3, #20
 800ddee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ddf2:	d911      	bls.n	800de18 <_strtod_l+0x7f0>
 800ddf4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ddf8:	b91b      	cbnz	r3, 800de02 <_strtod_l+0x7da>
 800ddfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	dd0a      	ble.n	800de18 <_strtod_l+0x7f0>
 800de02:	4641      	mov	r1, r8
 800de04:	2201      	movs	r2, #1
 800de06:	4658      	mov	r0, fp
 800de08:	f000 ff5c 	bl	800ecc4 <__lshift>
 800de0c:	9904      	ldr	r1, [sp, #16]
 800de0e:	4680      	mov	r8, r0
 800de10:	f000 ffac 	bl	800ed6c <__mcmp>
 800de14:	2800      	cmp	r0, #0
 800de16:	dc68      	bgt.n	800deea <_strtod_l+0x8c2>
 800de18:	9b05      	ldr	r3, [sp, #20]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d172      	bne.n	800df04 <_strtod_l+0x8dc>
 800de1e:	e630      	b.n	800da82 <_strtod_l+0x45a>
 800de20:	f018 0f01 	tst.w	r8, #1
 800de24:	d004      	beq.n	800de30 <_strtod_l+0x808>
 800de26:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de2a:	f7f2 fbc5 	bl	80005b8 <__aeabi_dmul>
 800de2e:	2301      	movs	r3, #1
 800de30:	ea4f 0868 	mov.w	r8, r8, asr #1
 800de34:	3508      	adds	r5, #8
 800de36:	e6dc      	b.n	800dbf2 <_strtod_l+0x5ca>
 800de38:	f04f 32ff 	mov.w	r2, #4294967295
 800de3c:	fa02 f303 	lsl.w	r3, r2, r3
 800de40:	ea03 0909 	and.w	r9, r3, r9
 800de44:	e6f6      	b.n	800dc34 <_strtod_l+0x60c>
 800de46:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800de4a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800de4e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800de52:	35e2      	adds	r5, #226	; 0xe2
 800de54:	fa07 f505 	lsl.w	r5, r7, r5
 800de58:	970f      	str	r7, [sp, #60]	; 0x3c
 800de5a:	e75c      	b.n	800dd16 <_strtod_l+0x6ee>
 800de5c:	2301      	movs	r3, #1
 800de5e:	2500      	movs	r5, #0
 800de60:	930f      	str	r3, [sp, #60]	; 0x3c
 800de62:	e758      	b.n	800dd16 <_strtod_l+0x6ee>
 800de64:	463a      	mov	r2, r7
 800de66:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de68:	4658      	mov	r0, fp
 800de6a:	f000 ff2b 	bl	800ecc4 <__lshift>
 800de6e:	901c      	str	r0, [sp, #112]	; 0x70
 800de70:	2800      	cmp	r0, #0
 800de72:	f47f af7c 	bne.w	800dd6e <_strtod_l+0x746>
 800de76:	e5f9      	b.n	800da6c <_strtod_l+0x444>
 800de78:	0800f2b8 	.word	0x0800f2b8
 800de7c:	fffffc02 	.word	0xfffffc02
 800de80:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800de84:	f040 8089 	bne.w	800df9a <_strtod_l+0x972>
 800de88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de8a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800de8e:	b342      	cbz	r2, 800dee2 <_strtod_l+0x8ba>
 800de90:	4aaf      	ldr	r2, [pc, #700]	; (800e150 <_strtod_l+0xb28>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d156      	bne.n	800df44 <_strtod_l+0x91c>
 800de96:	9b05      	ldr	r3, [sp, #20]
 800de98:	4648      	mov	r0, r9
 800de9a:	b1eb      	cbz	r3, 800ded8 <_strtod_l+0x8b0>
 800de9c:	4653      	mov	r3, sl
 800de9e:	4aad      	ldr	r2, [pc, #692]	; (800e154 <_strtod_l+0xb2c>)
 800dea0:	f04f 31ff 	mov.w	r1, #4294967295
 800dea4:	401a      	ands	r2, r3
 800dea6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800deaa:	d818      	bhi.n	800dede <_strtod_l+0x8b6>
 800deac:	0d12      	lsrs	r2, r2, #20
 800deae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800deb2:	fa01 f303 	lsl.w	r3, r1, r3
 800deb6:	4298      	cmp	r0, r3
 800deb8:	d144      	bne.n	800df44 <_strtod_l+0x91c>
 800deba:	4ba7      	ldr	r3, [pc, #668]	; (800e158 <_strtod_l+0xb30>)
 800debc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800debe:	429a      	cmp	r2, r3
 800dec0:	d102      	bne.n	800dec8 <_strtod_l+0x8a0>
 800dec2:	3001      	adds	r0, #1
 800dec4:	f43f add2 	beq.w	800da6c <_strtod_l+0x444>
 800dec8:	4ba2      	ldr	r3, [pc, #648]	; (800e154 <_strtod_l+0xb2c>)
 800deca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800decc:	f04f 0900 	mov.w	r9, #0
 800ded0:	401a      	ands	r2, r3
 800ded2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ded6:	e79f      	b.n	800de18 <_strtod_l+0x7f0>
 800ded8:	f04f 33ff 	mov.w	r3, #4294967295
 800dedc:	e7eb      	b.n	800deb6 <_strtod_l+0x88e>
 800dede:	460b      	mov	r3, r1
 800dee0:	e7e9      	b.n	800deb6 <_strtod_l+0x88e>
 800dee2:	bb7b      	cbnz	r3, 800df44 <_strtod_l+0x91c>
 800dee4:	f1b9 0f00 	cmp.w	r9, #0
 800dee8:	d12c      	bne.n	800df44 <_strtod_l+0x91c>
 800deea:	9905      	ldr	r1, [sp, #20]
 800deec:	4653      	mov	r3, sl
 800deee:	4a99      	ldr	r2, [pc, #612]	; (800e154 <_strtod_l+0xb2c>)
 800def0:	b1f1      	cbz	r1, 800df30 <_strtod_l+0x908>
 800def2:	ea02 010a 	and.w	r1, r2, sl
 800def6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800defa:	dc19      	bgt.n	800df30 <_strtod_l+0x908>
 800defc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800df00:	f77f ae51 	ble.w	800dba6 <_strtod_l+0x57e>
 800df04:	2300      	movs	r3, #0
 800df06:	4a95      	ldr	r2, [pc, #596]	; (800e15c <_strtod_l+0xb34>)
 800df08:	4648      	mov	r0, r9
 800df0a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800df0e:	4651      	mov	r1, sl
 800df10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800df14:	f7f2 fb50 	bl	80005b8 <__aeabi_dmul>
 800df18:	4681      	mov	r9, r0
 800df1a:	468a      	mov	sl, r1
 800df1c:	2900      	cmp	r1, #0
 800df1e:	f47f adb0 	bne.w	800da82 <_strtod_l+0x45a>
 800df22:	2800      	cmp	r0, #0
 800df24:	f47f adad 	bne.w	800da82 <_strtod_l+0x45a>
 800df28:	2322      	movs	r3, #34	; 0x22
 800df2a:	f8cb 3000 	str.w	r3, [fp]
 800df2e:	e5a8      	b.n	800da82 <_strtod_l+0x45a>
 800df30:	4013      	ands	r3, r2
 800df32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df36:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800df3a:	f04f 39ff 	mov.w	r9, #4294967295
 800df3e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800df42:	e769      	b.n	800de18 <_strtod_l+0x7f0>
 800df44:	b19d      	cbz	r5, 800df6e <_strtod_l+0x946>
 800df46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df48:	421d      	tst	r5, r3
 800df4a:	f43f af65 	beq.w	800de18 <_strtod_l+0x7f0>
 800df4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df50:	9a05      	ldr	r2, [sp, #20]
 800df52:	4648      	mov	r0, r9
 800df54:	4651      	mov	r1, sl
 800df56:	b173      	cbz	r3, 800df76 <_strtod_l+0x94e>
 800df58:	f7ff fb43 	bl	800d5e2 <sulp>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df64:	f7f2 f972 	bl	800024c <__adddf3>
 800df68:	4681      	mov	r9, r0
 800df6a:	468a      	mov	sl, r1
 800df6c:	e754      	b.n	800de18 <_strtod_l+0x7f0>
 800df6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df70:	ea13 0f09 	tst.w	r3, r9
 800df74:	e7e9      	b.n	800df4a <_strtod_l+0x922>
 800df76:	f7ff fb34 	bl	800d5e2 <sulp>
 800df7a:	4602      	mov	r2, r0
 800df7c:	460b      	mov	r3, r1
 800df7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df82:	f7f2 f961 	bl	8000248 <__aeabi_dsub>
 800df86:	2200      	movs	r2, #0
 800df88:	2300      	movs	r3, #0
 800df8a:	4681      	mov	r9, r0
 800df8c:	468a      	mov	sl, r1
 800df8e:	f7f2 fd7b 	bl	8000a88 <__aeabi_dcmpeq>
 800df92:	2800      	cmp	r0, #0
 800df94:	f47f ae07 	bne.w	800dba6 <_strtod_l+0x57e>
 800df98:	e73e      	b.n	800de18 <_strtod_l+0x7f0>
 800df9a:	9904      	ldr	r1, [sp, #16]
 800df9c:	4640      	mov	r0, r8
 800df9e:	f001 f822 	bl	800efe6 <__ratio>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	460f      	mov	r7, r1
 800dfac:	f7f2 fd80 	bl	8000ab0 <__aeabi_dcmple>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d075      	beq.n	800e0a0 <_strtod_l+0xa78>
 800dfb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d047      	beq.n	800e04a <_strtod_l+0xa22>
 800dfba:	2600      	movs	r6, #0
 800dfbc:	4f68      	ldr	r7, [pc, #416]	; (800e160 <_strtod_l+0xb38>)
 800dfbe:	4d68      	ldr	r5, [pc, #416]	; (800e160 <_strtod_l+0xb38>)
 800dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfc6:	0d1b      	lsrs	r3, r3, #20
 800dfc8:	051b      	lsls	r3, r3, #20
 800dfca:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dfce:	4b65      	ldr	r3, [pc, #404]	; (800e164 <_strtod_l+0xb3c>)
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	f040 80cf 	bne.w	800e174 <_strtod_l+0xb4c>
 800dfd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dfda:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800dfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe0:	4648      	mov	r0, r9
 800dfe2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800dfe6:	4651      	mov	r1, sl
 800dfe8:	f000 ff38 	bl	800ee5c <__ulp>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4630      	mov	r0, r6
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 fae0 	bl	80005b8 <__aeabi_dmul>
 800dff8:	464a      	mov	r2, r9
 800dffa:	4653      	mov	r3, sl
 800dffc:	f7f2 f926 	bl	800024c <__adddf3>
 800e000:	460b      	mov	r3, r1
 800e002:	4954      	ldr	r1, [pc, #336]	; (800e154 <_strtod_l+0xb2c>)
 800e004:	4a58      	ldr	r2, [pc, #352]	; (800e168 <_strtod_l+0xb40>)
 800e006:	4019      	ands	r1, r3
 800e008:	4291      	cmp	r1, r2
 800e00a:	4681      	mov	r9, r0
 800e00c:	d95e      	bls.n	800e0cc <_strtod_l+0xaa4>
 800e00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e010:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e014:	4293      	cmp	r3, r2
 800e016:	d103      	bne.n	800e020 <_strtod_l+0x9f8>
 800e018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e01a:	3301      	adds	r3, #1
 800e01c:	f43f ad26 	beq.w	800da6c <_strtod_l+0x444>
 800e020:	f04f 39ff 	mov.w	r9, #4294967295
 800e024:	f8df a130 	ldr.w	sl, [pc, #304]	; 800e158 <_strtod_l+0xb30>
 800e028:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e02a:	4658      	mov	r0, fp
 800e02c:	f000 fc80 	bl	800e930 <_Bfree>
 800e030:	9906      	ldr	r1, [sp, #24]
 800e032:	4658      	mov	r0, fp
 800e034:	f000 fc7c 	bl	800e930 <_Bfree>
 800e038:	9904      	ldr	r1, [sp, #16]
 800e03a:	4658      	mov	r0, fp
 800e03c:	f000 fc78 	bl	800e930 <_Bfree>
 800e040:	4641      	mov	r1, r8
 800e042:	4658      	mov	r0, fp
 800e044:	f000 fc74 	bl	800e930 <_Bfree>
 800e048:	e617      	b.n	800dc7a <_strtod_l+0x652>
 800e04a:	f1b9 0f00 	cmp.w	r9, #0
 800e04e:	d119      	bne.n	800e084 <_strtod_l+0xa5c>
 800e050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e056:	b9e3      	cbnz	r3, 800e092 <_strtod_l+0xa6a>
 800e058:	2200      	movs	r2, #0
 800e05a:	4b41      	ldr	r3, [pc, #260]	; (800e160 <_strtod_l+0xb38>)
 800e05c:	4630      	mov	r0, r6
 800e05e:	4639      	mov	r1, r7
 800e060:	f7f2 fd1c 	bl	8000a9c <__aeabi_dcmplt>
 800e064:	b9c8      	cbnz	r0, 800e09a <_strtod_l+0xa72>
 800e066:	2200      	movs	r2, #0
 800e068:	4b40      	ldr	r3, [pc, #256]	; (800e16c <_strtod_l+0xb44>)
 800e06a:	4630      	mov	r0, r6
 800e06c:	4639      	mov	r1, r7
 800e06e:	f7f2 faa3 	bl	80005b8 <__aeabi_dmul>
 800e072:	4604      	mov	r4, r0
 800e074:	460d      	mov	r5, r1
 800e076:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e07a:	9418      	str	r4, [sp, #96]	; 0x60
 800e07c:	9319      	str	r3, [sp, #100]	; 0x64
 800e07e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800e082:	e79d      	b.n	800dfc0 <_strtod_l+0x998>
 800e084:	f1b9 0f01 	cmp.w	r9, #1
 800e088:	d103      	bne.n	800e092 <_strtod_l+0xa6a>
 800e08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f43f ad8a 	beq.w	800dba6 <_strtod_l+0x57e>
 800e092:	2600      	movs	r6, #0
 800e094:	4f36      	ldr	r7, [pc, #216]	; (800e170 <_strtod_l+0xb48>)
 800e096:	2400      	movs	r4, #0
 800e098:	e791      	b.n	800dfbe <_strtod_l+0x996>
 800e09a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e09c:	4d33      	ldr	r5, [pc, #204]	; (800e16c <_strtod_l+0xb44>)
 800e09e:	e7ea      	b.n	800e076 <_strtod_l+0xa4e>
 800e0a0:	4b32      	ldr	r3, [pc, #200]	; (800e16c <_strtod_l+0xb44>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	f7f2 fa86 	bl	80005b8 <__aeabi_dmul>
 800e0ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	b933      	cbnz	r3, 800e0c2 <_strtod_l+0xa9a>
 800e0b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0b8:	9010      	str	r0, [sp, #64]	; 0x40
 800e0ba:	9311      	str	r3, [sp, #68]	; 0x44
 800e0bc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e0c0:	e77e      	b.n	800dfc0 <_strtod_l+0x998>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e0ca:	e7f7      	b.n	800e0bc <_strtod_l+0xa94>
 800e0cc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800e0d0:	9b05      	ldr	r3, [sp, #20]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1a8      	bne.n	800e028 <_strtod_l+0xa00>
 800e0d6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e0da:	0d1b      	lsrs	r3, r3, #20
 800e0dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0de:	051b      	lsls	r3, r3, #20
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	4656      	mov	r6, sl
 800e0e4:	d1a0      	bne.n	800e028 <_strtod_l+0xa00>
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f7f2 fcff 	bl	8000aec <__aeabi_d2iz>
 800e0ee:	f7f2 f9f9 	bl	80004e4 <__aeabi_i2d>
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f7f2 f8a5 	bl	8000248 <__aeabi_dsub>
 800e0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e100:	4604      	mov	r4, r0
 800e102:	460d      	mov	r5, r1
 800e104:	b933      	cbnz	r3, 800e114 <_strtod_l+0xaec>
 800e106:	f1b9 0f00 	cmp.w	r9, #0
 800e10a:	d103      	bne.n	800e114 <_strtod_l+0xaec>
 800e10c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800e110:	2e00      	cmp	r6, #0
 800e112:	d06a      	beq.n	800e1ea <_strtod_l+0xbc2>
 800e114:	a30a      	add	r3, pc, #40	; (adr r3, 800e140 <_strtod_l+0xb18>)
 800e116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11a:	4620      	mov	r0, r4
 800e11c:	4629      	mov	r1, r5
 800e11e:	f7f2 fcbd 	bl	8000a9c <__aeabi_dcmplt>
 800e122:	2800      	cmp	r0, #0
 800e124:	f47f acad 	bne.w	800da82 <_strtod_l+0x45a>
 800e128:	a307      	add	r3, pc, #28	; (adr r3, 800e148 <_strtod_l+0xb20>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	4620      	mov	r0, r4
 800e130:	4629      	mov	r1, r5
 800e132:	f7f2 fcd1 	bl	8000ad8 <__aeabi_dcmpgt>
 800e136:	2800      	cmp	r0, #0
 800e138:	f43f af76 	beq.w	800e028 <_strtod_l+0xa00>
 800e13c:	e4a1      	b.n	800da82 <_strtod_l+0x45a>
 800e13e:	bf00      	nop
 800e140:	94a03595 	.word	0x94a03595
 800e144:	3fdfffff 	.word	0x3fdfffff
 800e148:	35afe535 	.word	0x35afe535
 800e14c:	3fe00000 	.word	0x3fe00000
 800e150:	000fffff 	.word	0x000fffff
 800e154:	7ff00000 	.word	0x7ff00000
 800e158:	7fefffff 	.word	0x7fefffff
 800e15c:	39500000 	.word	0x39500000
 800e160:	3ff00000 	.word	0x3ff00000
 800e164:	7fe00000 	.word	0x7fe00000
 800e168:	7c9fffff 	.word	0x7c9fffff
 800e16c:	3fe00000 	.word	0x3fe00000
 800e170:	bff00000 	.word	0xbff00000
 800e174:	9b05      	ldr	r3, [sp, #20]
 800e176:	b313      	cbz	r3, 800e1be <_strtod_l+0xb96>
 800e178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e17a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e17e:	d81e      	bhi.n	800e1be <_strtod_l+0xb96>
 800e180:	a325      	add	r3, pc, #148	; (adr r3, 800e218 <_strtod_l+0xbf0>)
 800e182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e186:	4620      	mov	r0, r4
 800e188:	4629      	mov	r1, r5
 800e18a:	f7f2 fc91 	bl	8000ab0 <__aeabi_dcmple>
 800e18e:	b190      	cbz	r0, 800e1b6 <_strtod_l+0xb8e>
 800e190:	4629      	mov	r1, r5
 800e192:	4620      	mov	r0, r4
 800e194:	f7f2 fcd2 	bl	8000b3c <__aeabi_d2uiz>
 800e198:	2800      	cmp	r0, #0
 800e19a:	bf08      	it	eq
 800e19c:	2001      	moveq	r0, #1
 800e19e:	f7f2 f991 	bl	80004c4 <__aeabi_ui2d>
 800e1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	460d      	mov	r5, r1
 800e1a8:	b9d3      	cbnz	r3, 800e1e0 <_strtod_l+0xbb8>
 800e1aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1ae:	9012      	str	r0, [sp, #72]	; 0x48
 800e1b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e1b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e1b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1b8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e1bc:	1a9f      	subs	r7, r3, r2
 800e1be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1c2:	f000 fe4b 	bl	800ee5c <__ulp>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 f9f3 	bl	80005b8 <__aeabi_dmul>
 800e1d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1d6:	f7f2 f839 	bl	800024c <__adddf3>
 800e1da:	4681      	mov	r9, r0
 800e1dc:	468a      	mov	sl, r1
 800e1de:	e777      	b.n	800e0d0 <_strtod_l+0xaa8>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e1e8:	e7e3      	b.n	800e1b2 <_strtod_l+0xb8a>
 800e1ea:	a30d      	add	r3, pc, #52	; (adr r3, 800e220 <_strtod_l+0xbf8>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f7f2 fc54 	bl	8000a9c <__aeabi_dcmplt>
 800e1f4:	e79f      	b.n	800e136 <_strtod_l+0xb0e>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	930d      	str	r3, [sp, #52]	; 0x34
 800e1fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e1fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	f7ff ba55 	b.w	800d6ae <_strtod_l+0x86>
 800e204:	2b65      	cmp	r3, #101	; 0x65
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	f43f ab42 	beq.w	800d892 <_strtod_l+0x26a>
 800e20e:	2101      	movs	r1, #1
 800e210:	4614      	mov	r4, r2
 800e212:	9105      	str	r1, [sp, #20]
 800e214:	f7ff babf 	b.w	800d796 <_strtod_l+0x16e>
 800e218:	ffc00000 	.word	0xffc00000
 800e21c:	41dfffff 	.word	0x41dfffff
 800e220:	94a03595 	.word	0x94a03595
 800e224:	3fcfffff 	.word	0x3fcfffff

0800e228 <strtod>:
 800e228:	4b06      	ldr	r3, [pc, #24]	; (800e244 <strtod+0x1c>)
 800e22a:	b410      	push	{r4}
 800e22c:	681c      	ldr	r4, [r3, #0]
 800e22e:	4a06      	ldr	r2, [pc, #24]	; (800e248 <strtod+0x20>)
 800e230:	6a23      	ldr	r3, [r4, #32]
 800e232:	2b00      	cmp	r3, #0
 800e234:	bf08      	it	eq
 800e236:	4613      	moveq	r3, r2
 800e238:	460a      	mov	r2, r1
 800e23a:	4601      	mov	r1, r0
 800e23c:	4620      	mov	r0, r4
 800e23e:	bc10      	pop	{r4}
 800e240:	f7ff b9f2 	b.w	800d628 <_strtod_l>
 800e244:	20000948 	.word	0x20000948
 800e248:	200009ac 	.word	0x200009ac

0800e24c <rshift>:
 800e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24e:	6906      	ldr	r6, [r0, #16]
 800e250:	114b      	asrs	r3, r1, #5
 800e252:	429e      	cmp	r6, r3
 800e254:	f100 0414 	add.w	r4, r0, #20
 800e258:	dd31      	ble.n	800e2be <rshift+0x72>
 800e25a:	f011 011f 	ands.w	r1, r1, #31
 800e25e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e262:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e266:	d108      	bne.n	800e27a <rshift+0x2e>
 800e268:	4621      	mov	r1, r4
 800e26a:	42b2      	cmp	r2, r6
 800e26c:	460b      	mov	r3, r1
 800e26e:	d211      	bcs.n	800e294 <rshift+0x48>
 800e270:	f852 3b04 	ldr.w	r3, [r2], #4
 800e274:	f841 3b04 	str.w	r3, [r1], #4
 800e278:	e7f7      	b.n	800e26a <rshift+0x1e>
 800e27a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e27e:	4623      	mov	r3, r4
 800e280:	f1c1 0c20 	rsb	ip, r1, #32
 800e284:	40cd      	lsrs	r5, r1
 800e286:	3204      	adds	r2, #4
 800e288:	42b2      	cmp	r2, r6
 800e28a:	4617      	mov	r7, r2
 800e28c:	d30d      	bcc.n	800e2aa <rshift+0x5e>
 800e28e:	601d      	str	r5, [r3, #0]
 800e290:	b105      	cbz	r5, 800e294 <rshift+0x48>
 800e292:	3304      	adds	r3, #4
 800e294:	42a3      	cmp	r3, r4
 800e296:	eba3 0204 	sub.w	r2, r3, r4
 800e29a:	bf08      	it	eq
 800e29c:	2300      	moveq	r3, #0
 800e29e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e2a2:	6102      	str	r2, [r0, #16]
 800e2a4:	bf08      	it	eq
 800e2a6:	6143      	streq	r3, [r0, #20]
 800e2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2aa:	683f      	ldr	r7, [r7, #0]
 800e2ac:	fa07 f70c 	lsl.w	r7, r7, ip
 800e2b0:	433d      	orrs	r5, r7
 800e2b2:	f843 5b04 	str.w	r5, [r3], #4
 800e2b6:	f852 5b04 	ldr.w	r5, [r2], #4
 800e2ba:	40cd      	lsrs	r5, r1
 800e2bc:	e7e4      	b.n	800e288 <rshift+0x3c>
 800e2be:	4623      	mov	r3, r4
 800e2c0:	e7e8      	b.n	800e294 <rshift+0x48>

0800e2c2 <__hexdig_fun>:
 800e2c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e2c6:	2b09      	cmp	r3, #9
 800e2c8:	d802      	bhi.n	800e2d0 <__hexdig_fun+0xe>
 800e2ca:	3820      	subs	r0, #32
 800e2cc:	b2c0      	uxtb	r0, r0
 800e2ce:	4770      	bx	lr
 800e2d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e2d4:	2b05      	cmp	r3, #5
 800e2d6:	d801      	bhi.n	800e2dc <__hexdig_fun+0x1a>
 800e2d8:	3847      	subs	r0, #71	; 0x47
 800e2da:	e7f7      	b.n	800e2cc <__hexdig_fun+0xa>
 800e2dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e2e0:	2b05      	cmp	r3, #5
 800e2e2:	d801      	bhi.n	800e2e8 <__hexdig_fun+0x26>
 800e2e4:	3827      	subs	r0, #39	; 0x27
 800e2e6:	e7f1      	b.n	800e2cc <__hexdig_fun+0xa>
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	4770      	bx	lr

0800e2ec <__gethex>:
 800e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	b08b      	sub	sp, #44	; 0x2c
 800e2f2:	9002      	str	r0, [sp, #8]
 800e2f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e2f6:	468a      	mov	sl, r1
 800e2f8:	4690      	mov	r8, r2
 800e2fa:	9306      	str	r3, [sp, #24]
 800e2fc:	f000 face 	bl	800e89c <__localeconv_l>
 800e300:	6803      	ldr	r3, [r0, #0]
 800e302:	f04f 0b00 	mov.w	fp, #0
 800e306:	4618      	mov	r0, r3
 800e308:	9303      	str	r3, [sp, #12]
 800e30a:	f7f1 ff91 	bl	8000230 <strlen>
 800e30e:	9b03      	ldr	r3, [sp, #12]
 800e310:	9001      	str	r0, [sp, #4]
 800e312:	4403      	add	r3, r0
 800e314:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e318:	9307      	str	r3, [sp, #28]
 800e31a:	f8da 3000 	ldr.w	r3, [sl]
 800e31e:	3302      	adds	r3, #2
 800e320:	461f      	mov	r7, r3
 800e322:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e326:	2830      	cmp	r0, #48	; 0x30
 800e328:	d06c      	beq.n	800e404 <__gethex+0x118>
 800e32a:	f7ff ffca 	bl	800e2c2 <__hexdig_fun>
 800e32e:	4604      	mov	r4, r0
 800e330:	2800      	cmp	r0, #0
 800e332:	d16a      	bne.n	800e40a <__gethex+0x11e>
 800e334:	9a01      	ldr	r2, [sp, #4]
 800e336:	9903      	ldr	r1, [sp, #12]
 800e338:	4638      	mov	r0, r7
 800e33a:	f7ff f92b 	bl	800d594 <strncmp>
 800e33e:	2800      	cmp	r0, #0
 800e340:	d166      	bne.n	800e410 <__gethex+0x124>
 800e342:	9b01      	ldr	r3, [sp, #4]
 800e344:	5cf8      	ldrb	r0, [r7, r3]
 800e346:	18fe      	adds	r6, r7, r3
 800e348:	f7ff ffbb 	bl	800e2c2 <__hexdig_fun>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d062      	beq.n	800e416 <__gethex+0x12a>
 800e350:	4633      	mov	r3, r6
 800e352:	7818      	ldrb	r0, [r3, #0]
 800e354:	461f      	mov	r7, r3
 800e356:	2830      	cmp	r0, #48	; 0x30
 800e358:	f103 0301 	add.w	r3, r3, #1
 800e35c:	d0f9      	beq.n	800e352 <__gethex+0x66>
 800e35e:	f7ff ffb0 	bl	800e2c2 <__hexdig_fun>
 800e362:	fab0 f580 	clz	r5, r0
 800e366:	4634      	mov	r4, r6
 800e368:	f04f 0b01 	mov.w	fp, #1
 800e36c:	096d      	lsrs	r5, r5, #5
 800e36e:	463a      	mov	r2, r7
 800e370:	4616      	mov	r6, r2
 800e372:	7830      	ldrb	r0, [r6, #0]
 800e374:	3201      	adds	r2, #1
 800e376:	f7ff ffa4 	bl	800e2c2 <__hexdig_fun>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d1f8      	bne.n	800e370 <__gethex+0x84>
 800e37e:	9a01      	ldr	r2, [sp, #4]
 800e380:	9903      	ldr	r1, [sp, #12]
 800e382:	4630      	mov	r0, r6
 800e384:	f7ff f906 	bl	800d594 <strncmp>
 800e388:	b950      	cbnz	r0, 800e3a0 <__gethex+0xb4>
 800e38a:	b954      	cbnz	r4, 800e3a2 <__gethex+0xb6>
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	18f4      	adds	r4, r6, r3
 800e390:	4622      	mov	r2, r4
 800e392:	4616      	mov	r6, r2
 800e394:	7830      	ldrb	r0, [r6, #0]
 800e396:	3201      	adds	r2, #1
 800e398:	f7ff ff93 	bl	800e2c2 <__hexdig_fun>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d1f8      	bne.n	800e392 <__gethex+0xa6>
 800e3a0:	b10c      	cbz	r4, 800e3a6 <__gethex+0xba>
 800e3a2:	1ba4      	subs	r4, r4, r6
 800e3a4:	00a4      	lsls	r4, r4, #2
 800e3a6:	7833      	ldrb	r3, [r6, #0]
 800e3a8:	2b50      	cmp	r3, #80	; 0x50
 800e3aa:	d001      	beq.n	800e3b0 <__gethex+0xc4>
 800e3ac:	2b70      	cmp	r3, #112	; 0x70
 800e3ae:	d140      	bne.n	800e432 <__gethex+0x146>
 800e3b0:	7873      	ldrb	r3, [r6, #1]
 800e3b2:	2b2b      	cmp	r3, #43	; 0x2b
 800e3b4:	d031      	beq.n	800e41a <__gethex+0x12e>
 800e3b6:	2b2d      	cmp	r3, #45	; 0x2d
 800e3b8:	d033      	beq.n	800e422 <__gethex+0x136>
 800e3ba:	f04f 0900 	mov.w	r9, #0
 800e3be:	1c71      	adds	r1, r6, #1
 800e3c0:	7808      	ldrb	r0, [r1, #0]
 800e3c2:	f7ff ff7e 	bl	800e2c2 <__hexdig_fun>
 800e3c6:	1e43      	subs	r3, r0, #1
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	2b18      	cmp	r3, #24
 800e3cc:	d831      	bhi.n	800e432 <__gethex+0x146>
 800e3ce:	f1a0 0210 	sub.w	r2, r0, #16
 800e3d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3d6:	f7ff ff74 	bl	800e2c2 <__hexdig_fun>
 800e3da:	1e43      	subs	r3, r0, #1
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b18      	cmp	r3, #24
 800e3e0:	d922      	bls.n	800e428 <__gethex+0x13c>
 800e3e2:	f1b9 0f00 	cmp.w	r9, #0
 800e3e6:	d000      	beq.n	800e3ea <__gethex+0xfe>
 800e3e8:	4252      	negs	r2, r2
 800e3ea:	4414      	add	r4, r2
 800e3ec:	f8ca 1000 	str.w	r1, [sl]
 800e3f0:	b30d      	cbz	r5, 800e436 <__gethex+0x14a>
 800e3f2:	f1bb 0f00 	cmp.w	fp, #0
 800e3f6:	bf0c      	ite	eq
 800e3f8:	2706      	moveq	r7, #6
 800e3fa:	2700      	movne	r7, #0
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	b00b      	add	sp, #44	; 0x2c
 800e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e404:	f10b 0b01 	add.w	fp, fp, #1
 800e408:	e78a      	b.n	800e320 <__gethex+0x34>
 800e40a:	2500      	movs	r5, #0
 800e40c:	462c      	mov	r4, r5
 800e40e:	e7ae      	b.n	800e36e <__gethex+0x82>
 800e410:	463e      	mov	r6, r7
 800e412:	2501      	movs	r5, #1
 800e414:	e7c7      	b.n	800e3a6 <__gethex+0xba>
 800e416:	4604      	mov	r4, r0
 800e418:	e7fb      	b.n	800e412 <__gethex+0x126>
 800e41a:	f04f 0900 	mov.w	r9, #0
 800e41e:	1cb1      	adds	r1, r6, #2
 800e420:	e7ce      	b.n	800e3c0 <__gethex+0xd4>
 800e422:	f04f 0901 	mov.w	r9, #1
 800e426:	e7fa      	b.n	800e41e <__gethex+0x132>
 800e428:	230a      	movs	r3, #10
 800e42a:	fb03 0202 	mla	r2, r3, r2, r0
 800e42e:	3a10      	subs	r2, #16
 800e430:	e7cf      	b.n	800e3d2 <__gethex+0xe6>
 800e432:	4631      	mov	r1, r6
 800e434:	e7da      	b.n	800e3ec <__gethex+0x100>
 800e436:	4629      	mov	r1, r5
 800e438:	1bf3      	subs	r3, r6, r7
 800e43a:	3b01      	subs	r3, #1
 800e43c:	2b07      	cmp	r3, #7
 800e43e:	dc49      	bgt.n	800e4d4 <__gethex+0x1e8>
 800e440:	9802      	ldr	r0, [sp, #8]
 800e442:	f000 fa41 	bl	800e8c8 <_Balloc>
 800e446:	f04f 0b00 	mov.w	fp, #0
 800e44a:	4605      	mov	r5, r0
 800e44c:	46da      	mov	sl, fp
 800e44e:	9b01      	ldr	r3, [sp, #4]
 800e450:	f100 0914 	add.w	r9, r0, #20
 800e454:	f1c3 0301 	rsb	r3, r3, #1
 800e458:	f8cd 9010 	str.w	r9, [sp, #16]
 800e45c:	9308      	str	r3, [sp, #32]
 800e45e:	42b7      	cmp	r7, r6
 800e460:	d33b      	bcc.n	800e4da <__gethex+0x1ee>
 800e462:	9804      	ldr	r0, [sp, #16]
 800e464:	f840 ab04 	str.w	sl, [r0], #4
 800e468:	eba0 0009 	sub.w	r0, r0, r9
 800e46c:	1080      	asrs	r0, r0, #2
 800e46e:	6128      	str	r0, [r5, #16]
 800e470:	0147      	lsls	r7, r0, #5
 800e472:	4650      	mov	r0, sl
 800e474:	f000 faec 	bl	800ea50 <__hi0bits>
 800e478:	f8d8 6000 	ldr.w	r6, [r8]
 800e47c:	1a3f      	subs	r7, r7, r0
 800e47e:	42b7      	cmp	r7, r6
 800e480:	dd64      	ble.n	800e54c <__gethex+0x260>
 800e482:	1bbf      	subs	r7, r7, r6
 800e484:	4639      	mov	r1, r7
 800e486:	4628      	mov	r0, r5
 800e488:	f000 fdf5 	bl	800f076 <__any_on>
 800e48c:	4682      	mov	sl, r0
 800e48e:	b178      	cbz	r0, 800e4b0 <__gethex+0x1c4>
 800e490:	f04f 0a01 	mov.w	sl, #1
 800e494:	1e7b      	subs	r3, r7, #1
 800e496:	1159      	asrs	r1, r3, #5
 800e498:	f003 021f 	and.w	r2, r3, #31
 800e49c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e4a0:	fa0a f202 	lsl.w	r2, sl, r2
 800e4a4:	420a      	tst	r2, r1
 800e4a6:	d003      	beq.n	800e4b0 <__gethex+0x1c4>
 800e4a8:	4553      	cmp	r3, sl
 800e4aa:	dc46      	bgt.n	800e53a <__gethex+0x24e>
 800e4ac:	f04f 0a02 	mov.w	sl, #2
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	f7ff feca 	bl	800e24c <rshift>
 800e4b8:	443c      	add	r4, r7
 800e4ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4be:	42a3      	cmp	r3, r4
 800e4c0:	da52      	bge.n	800e568 <__gethex+0x27c>
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	9802      	ldr	r0, [sp, #8]
 800e4c6:	f000 fa33 	bl	800e930 <_Bfree>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4ce:	27a3      	movs	r7, #163	; 0xa3
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	e793      	b.n	800e3fc <__gethex+0x110>
 800e4d4:	3101      	adds	r1, #1
 800e4d6:	105b      	asrs	r3, r3, #1
 800e4d8:	e7b0      	b.n	800e43c <__gethex+0x150>
 800e4da:	1e73      	subs	r3, r6, #1
 800e4dc:	9305      	str	r3, [sp, #20]
 800e4de:	9a07      	ldr	r2, [sp, #28]
 800e4e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d018      	beq.n	800e51a <__gethex+0x22e>
 800e4e8:	f1bb 0f20 	cmp.w	fp, #32
 800e4ec:	d107      	bne.n	800e4fe <__gethex+0x212>
 800e4ee:	9b04      	ldr	r3, [sp, #16]
 800e4f0:	f8c3 a000 	str.w	sl, [r3]
 800e4f4:	f04f 0a00 	mov.w	sl, #0
 800e4f8:	46d3      	mov	fp, sl
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e502:	f7ff fede 	bl	800e2c2 <__hexdig_fun>
 800e506:	f000 000f 	and.w	r0, r0, #15
 800e50a:	fa00 f00b 	lsl.w	r0, r0, fp
 800e50e:	ea4a 0a00 	orr.w	sl, sl, r0
 800e512:	f10b 0b04 	add.w	fp, fp, #4
 800e516:	9b05      	ldr	r3, [sp, #20]
 800e518:	e00d      	b.n	800e536 <__gethex+0x24a>
 800e51a:	9b05      	ldr	r3, [sp, #20]
 800e51c:	9a08      	ldr	r2, [sp, #32]
 800e51e:	4413      	add	r3, r2
 800e520:	42bb      	cmp	r3, r7
 800e522:	d3e1      	bcc.n	800e4e8 <__gethex+0x1fc>
 800e524:	4618      	mov	r0, r3
 800e526:	9a01      	ldr	r2, [sp, #4]
 800e528:	9903      	ldr	r1, [sp, #12]
 800e52a:	9309      	str	r3, [sp, #36]	; 0x24
 800e52c:	f7ff f832 	bl	800d594 <strncmp>
 800e530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e532:	2800      	cmp	r0, #0
 800e534:	d1d8      	bne.n	800e4e8 <__gethex+0x1fc>
 800e536:	461e      	mov	r6, r3
 800e538:	e791      	b.n	800e45e <__gethex+0x172>
 800e53a:	1eb9      	subs	r1, r7, #2
 800e53c:	4628      	mov	r0, r5
 800e53e:	f000 fd9a 	bl	800f076 <__any_on>
 800e542:	2800      	cmp	r0, #0
 800e544:	d0b2      	beq.n	800e4ac <__gethex+0x1c0>
 800e546:	f04f 0a03 	mov.w	sl, #3
 800e54a:	e7b1      	b.n	800e4b0 <__gethex+0x1c4>
 800e54c:	da09      	bge.n	800e562 <__gethex+0x276>
 800e54e:	1bf7      	subs	r7, r6, r7
 800e550:	4629      	mov	r1, r5
 800e552:	463a      	mov	r2, r7
 800e554:	9802      	ldr	r0, [sp, #8]
 800e556:	f000 fbb5 	bl	800ecc4 <__lshift>
 800e55a:	4605      	mov	r5, r0
 800e55c:	1be4      	subs	r4, r4, r7
 800e55e:	f100 0914 	add.w	r9, r0, #20
 800e562:	f04f 0a00 	mov.w	sl, #0
 800e566:	e7a8      	b.n	800e4ba <__gethex+0x1ce>
 800e568:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e56c:	42a0      	cmp	r0, r4
 800e56e:	dd6b      	ble.n	800e648 <__gethex+0x35c>
 800e570:	1b04      	subs	r4, r0, r4
 800e572:	42a6      	cmp	r6, r4
 800e574:	dc2e      	bgt.n	800e5d4 <__gethex+0x2e8>
 800e576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d022      	beq.n	800e5c4 <__gethex+0x2d8>
 800e57e:	2b03      	cmp	r3, #3
 800e580:	d024      	beq.n	800e5cc <__gethex+0x2e0>
 800e582:	2b01      	cmp	r3, #1
 800e584:	d115      	bne.n	800e5b2 <__gethex+0x2c6>
 800e586:	42a6      	cmp	r6, r4
 800e588:	d113      	bne.n	800e5b2 <__gethex+0x2c6>
 800e58a:	2e01      	cmp	r6, #1
 800e58c:	dc0b      	bgt.n	800e5a6 <__gethex+0x2ba>
 800e58e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e592:	9a06      	ldr	r2, [sp, #24]
 800e594:	2762      	movs	r7, #98	; 0x62
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	2301      	movs	r3, #1
 800e59a:	612b      	str	r3, [r5, #16]
 800e59c:	f8c9 3000 	str.w	r3, [r9]
 800e5a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5a2:	601d      	str	r5, [r3, #0]
 800e5a4:	e72a      	b.n	800e3fc <__gethex+0x110>
 800e5a6:	1e71      	subs	r1, r6, #1
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f000 fd64 	bl	800f076 <__any_on>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d1ed      	bne.n	800e58e <__gethex+0x2a2>
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	9802      	ldr	r0, [sp, #8]
 800e5b6:	f000 f9bb 	bl	800e930 <_Bfree>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5be:	2750      	movs	r7, #80	; 0x50
 800e5c0:	6013      	str	r3, [r2, #0]
 800e5c2:	e71b      	b.n	800e3fc <__gethex+0x110>
 800e5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d0e1      	beq.n	800e58e <__gethex+0x2a2>
 800e5ca:	e7f2      	b.n	800e5b2 <__gethex+0x2c6>
 800e5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1dd      	bne.n	800e58e <__gethex+0x2a2>
 800e5d2:	e7ee      	b.n	800e5b2 <__gethex+0x2c6>
 800e5d4:	1e67      	subs	r7, r4, #1
 800e5d6:	f1ba 0f00 	cmp.w	sl, #0
 800e5da:	d132      	bne.n	800e642 <__gethex+0x356>
 800e5dc:	b127      	cbz	r7, 800e5e8 <__gethex+0x2fc>
 800e5de:	4639      	mov	r1, r7
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	f000 fd48 	bl	800f076 <__any_on>
 800e5e6:	4682      	mov	sl, r0
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	117a      	asrs	r2, r7, #5
 800e5ec:	f007 071f 	and.w	r7, r7, #31
 800e5f0:	fa03 f707 	lsl.w	r7, r3, r7
 800e5f4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	421f      	tst	r7, r3
 800e5fc:	f04f 0702 	mov.w	r7, #2
 800e600:	4628      	mov	r0, r5
 800e602:	bf18      	it	ne
 800e604:	f04a 0a02 	orrne.w	sl, sl, #2
 800e608:	1b36      	subs	r6, r6, r4
 800e60a:	f7ff fe1f 	bl	800e24c <rshift>
 800e60e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e612:	f1ba 0f00 	cmp.w	sl, #0
 800e616:	d048      	beq.n	800e6aa <__gethex+0x3be>
 800e618:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d015      	beq.n	800e64c <__gethex+0x360>
 800e620:	2b03      	cmp	r3, #3
 800e622:	d017      	beq.n	800e654 <__gethex+0x368>
 800e624:	2b01      	cmp	r3, #1
 800e626:	d109      	bne.n	800e63c <__gethex+0x350>
 800e628:	f01a 0f02 	tst.w	sl, #2
 800e62c:	d006      	beq.n	800e63c <__gethex+0x350>
 800e62e:	f8d9 3000 	ldr.w	r3, [r9]
 800e632:	ea4a 0a03 	orr.w	sl, sl, r3
 800e636:	f01a 0f01 	tst.w	sl, #1
 800e63a:	d10e      	bne.n	800e65a <__gethex+0x36e>
 800e63c:	f047 0710 	orr.w	r7, r7, #16
 800e640:	e033      	b.n	800e6aa <__gethex+0x3be>
 800e642:	f04f 0a01 	mov.w	sl, #1
 800e646:	e7cf      	b.n	800e5e8 <__gethex+0x2fc>
 800e648:	2701      	movs	r7, #1
 800e64a:	e7e2      	b.n	800e612 <__gethex+0x326>
 800e64c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e64e:	f1c3 0301 	rsb	r3, r3, #1
 800e652:	9315      	str	r3, [sp, #84]	; 0x54
 800e654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0f0      	beq.n	800e63c <__gethex+0x350>
 800e65a:	f04f 0c00 	mov.w	ip, #0
 800e65e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e662:	f105 0314 	add.w	r3, r5, #20
 800e666:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e66a:	eb03 010a 	add.w	r1, r3, sl
 800e66e:	4618      	mov	r0, r3
 800e670:	f853 2b04 	ldr.w	r2, [r3], #4
 800e674:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e678:	d01c      	beq.n	800e6b4 <__gethex+0x3c8>
 800e67a:	3201      	adds	r2, #1
 800e67c:	6002      	str	r2, [r0, #0]
 800e67e:	2f02      	cmp	r7, #2
 800e680:	f105 0314 	add.w	r3, r5, #20
 800e684:	d138      	bne.n	800e6f8 <__gethex+0x40c>
 800e686:	f8d8 2000 	ldr.w	r2, [r8]
 800e68a:	3a01      	subs	r2, #1
 800e68c:	42b2      	cmp	r2, r6
 800e68e:	d10a      	bne.n	800e6a6 <__gethex+0x3ba>
 800e690:	2201      	movs	r2, #1
 800e692:	1171      	asrs	r1, r6, #5
 800e694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e698:	f006 061f 	and.w	r6, r6, #31
 800e69c:	fa02 f606 	lsl.w	r6, r2, r6
 800e6a0:	421e      	tst	r6, r3
 800e6a2:	bf18      	it	ne
 800e6a4:	4617      	movne	r7, r2
 800e6a6:	f047 0720 	orr.w	r7, r7, #32
 800e6aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6ac:	601d      	str	r5, [r3, #0]
 800e6ae:	9b06      	ldr	r3, [sp, #24]
 800e6b0:	601c      	str	r4, [r3, #0]
 800e6b2:	e6a3      	b.n	800e3fc <__gethex+0x110>
 800e6b4:	4299      	cmp	r1, r3
 800e6b6:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6ba:	d8d8      	bhi.n	800e66e <__gethex+0x382>
 800e6bc:	68ab      	ldr	r3, [r5, #8]
 800e6be:	4599      	cmp	r9, r3
 800e6c0:	db12      	blt.n	800e6e8 <__gethex+0x3fc>
 800e6c2:	6869      	ldr	r1, [r5, #4]
 800e6c4:	9802      	ldr	r0, [sp, #8]
 800e6c6:	3101      	adds	r1, #1
 800e6c8:	f000 f8fe 	bl	800e8c8 <_Balloc>
 800e6cc:	4683      	mov	fp, r0
 800e6ce:	692a      	ldr	r2, [r5, #16]
 800e6d0:	f105 010c 	add.w	r1, r5, #12
 800e6d4:	3202      	adds	r2, #2
 800e6d6:	0092      	lsls	r2, r2, #2
 800e6d8:	300c      	adds	r0, #12
 800e6da:	f7fe fedd 	bl	800d498 <memcpy>
 800e6de:	4629      	mov	r1, r5
 800e6e0:	9802      	ldr	r0, [sp, #8]
 800e6e2:	f000 f925 	bl	800e930 <_Bfree>
 800e6e6:	465d      	mov	r5, fp
 800e6e8:	692b      	ldr	r3, [r5, #16]
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	612a      	str	r2, [r5, #16]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e6f4:	615a      	str	r2, [r3, #20]
 800e6f6:	e7c2      	b.n	800e67e <__gethex+0x392>
 800e6f8:	692a      	ldr	r2, [r5, #16]
 800e6fa:	454a      	cmp	r2, r9
 800e6fc:	dd0b      	ble.n	800e716 <__gethex+0x42a>
 800e6fe:	2101      	movs	r1, #1
 800e700:	4628      	mov	r0, r5
 800e702:	f7ff fda3 	bl	800e24c <rshift>
 800e706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e70a:	3401      	adds	r4, #1
 800e70c:	42a3      	cmp	r3, r4
 800e70e:	f6ff aed8 	blt.w	800e4c2 <__gethex+0x1d6>
 800e712:	2701      	movs	r7, #1
 800e714:	e7c7      	b.n	800e6a6 <__gethex+0x3ba>
 800e716:	f016 061f 	ands.w	r6, r6, #31
 800e71a:	d0fa      	beq.n	800e712 <__gethex+0x426>
 800e71c:	449a      	add	sl, r3
 800e71e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e722:	f000 f995 	bl	800ea50 <__hi0bits>
 800e726:	f1c6 0620 	rsb	r6, r6, #32
 800e72a:	42b0      	cmp	r0, r6
 800e72c:	dbe7      	blt.n	800e6fe <__gethex+0x412>
 800e72e:	e7f0      	b.n	800e712 <__gethex+0x426>

0800e730 <L_shift>:
 800e730:	f1c2 0208 	rsb	r2, r2, #8
 800e734:	0092      	lsls	r2, r2, #2
 800e736:	b570      	push	{r4, r5, r6, lr}
 800e738:	f1c2 0620 	rsb	r6, r2, #32
 800e73c:	6843      	ldr	r3, [r0, #4]
 800e73e:	6804      	ldr	r4, [r0, #0]
 800e740:	fa03 f506 	lsl.w	r5, r3, r6
 800e744:	432c      	orrs	r4, r5
 800e746:	40d3      	lsrs	r3, r2
 800e748:	6004      	str	r4, [r0, #0]
 800e74a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e74e:	4288      	cmp	r0, r1
 800e750:	d3f4      	bcc.n	800e73c <L_shift+0xc>
 800e752:	bd70      	pop	{r4, r5, r6, pc}

0800e754 <__match>:
 800e754:	b530      	push	{r4, r5, lr}
 800e756:	6803      	ldr	r3, [r0, #0]
 800e758:	3301      	adds	r3, #1
 800e75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e75e:	b914      	cbnz	r4, 800e766 <__match+0x12>
 800e760:	6003      	str	r3, [r0, #0]
 800e762:	2001      	movs	r0, #1
 800e764:	bd30      	pop	{r4, r5, pc}
 800e766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e76a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e76e:	2d19      	cmp	r5, #25
 800e770:	bf98      	it	ls
 800e772:	3220      	addls	r2, #32
 800e774:	42a2      	cmp	r2, r4
 800e776:	d0f0      	beq.n	800e75a <__match+0x6>
 800e778:	2000      	movs	r0, #0
 800e77a:	e7f3      	b.n	800e764 <__match+0x10>

0800e77c <__hexnan>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	2500      	movs	r5, #0
 800e782:	680b      	ldr	r3, [r1, #0]
 800e784:	4682      	mov	sl, r0
 800e786:	115f      	asrs	r7, r3, #5
 800e788:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e78c:	f013 031f 	ands.w	r3, r3, #31
 800e790:	bf18      	it	ne
 800e792:	3704      	addne	r7, #4
 800e794:	1f3e      	subs	r6, r7, #4
 800e796:	4690      	mov	r8, r2
 800e798:	46b1      	mov	r9, r6
 800e79a:	4634      	mov	r4, r6
 800e79c:	46ab      	mov	fp, r5
 800e79e:	b087      	sub	sp, #28
 800e7a0:	6801      	ldr	r1, [r0, #0]
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	f847 5c04 	str.w	r5, [r7, #-4]
 800e7a8:	9502      	str	r5, [sp, #8]
 800e7aa:	784a      	ldrb	r2, [r1, #1]
 800e7ac:	1c4b      	adds	r3, r1, #1
 800e7ae:	9303      	str	r3, [sp, #12]
 800e7b0:	b342      	cbz	r2, 800e804 <__hexnan+0x88>
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	9105      	str	r1, [sp, #20]
 800e7b6:	9204      	str	r2, [sp, #16]
 800e7b8:	f7ff fd83 	bl	800e2c2 <__hexdig_fun>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d143      	bne.n	800e848 <__hexnan+0xcc>
 800e7c0:	9a04      	ldr	r2, [sp, #16]
 800e7c2:	9905      	ldr	r1, [sp, #20]
 800e7c4:	2a20      	cmp	r2, #32
 800e7c6:	d818      	bhi.n	800e7fa <__hexnan+0x7e>
 800e7c8:	9b02      	ldr	r3, [sp, #8]
 800e7ca:	459b      	cmp	fp, r3
 800e7cc:	dd13      	ble.n	800e7f6 <__hexnan+0x7a>
 800e7ce:	454c      	cmp	r4, r9
 800e7d0:	d206      	bcs.n	800e7e0 <__hexnan+0x64>
 800e7d2:	2d07      	cmp	r5, #7
 800e7d4:	dc04      	bgt.n	800e7e0 <__hexnan+0x64>
 800e7d6:	462a      	mov	r2, r5
 800e7d8:	4649      	mov	r1, r9
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f7ff ffa8 	bl	800e730 <L_shift>
 800e7e0:	4544      	cmp	r4, r8
 800e7e2:	d944      	bls.n	800e86e <__hexnan+0xf2>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f1a4 0904 	sub.w	r9, r4, #4
 800e7ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7ee:	461d      	mov	r5, r3
 800e7f0:	464c      	mov	r4, r9
 800e7f2:	f8cd b008 	str.w	fp, [sp, #8]
 800e7f6:	9903      	ldr	r1, [sp, #12]
 800e7f8:	e7d7      	b.n	800e7aa <__hexnan+0x2e>
 800e7fa:	2a29      	cmp	r2, #41	; 0x29
 800e7fc:	d14a      	bne.n	800e894 <__hexnan+0x118>
 800e7fe:	3102      	adds	r1, #2
 800e800:	f8ca 1000 	str.w	r1, [sl]
 800e804:	f1bb 0f00 	cmp.w	fp, #0
 800e808:	d044      	beq.n	800e894 <__hexnan+0x118>
 800e80a:	454c      	cmp	r4, r9
 800e80c:	d206      	bcs.n	800e81c <__hexnan+0xa0>
 800e80e:	2d07      	cmp	r5, #7
 800e810:	dc04      	bgt.n	800e81c <__hexnan+0xa0>
 800e812:	462a      	mov	r2, r5
 800e814:	4649      	mov	r1, r9
 800e816:	4620      	mov	r0, r4
 800e818:	f7ff ff8a 	bl	800e730 <L_shift>
 800e81c:	4544      	cmp	r4, r8
 800e81e:	d928      	bls.n	800e872 <__hexnan+0xf6>
 800e820:	4643      	mov	r3, r8
 800e822:	f854 2b04 	ldr.w	r2, [r4], #4
 800e826:	42a6      	cmp	r6, r4
 800e828:	f843 2b04 	str.w	r2, [r3], #4
 800e82c:	d2f9      	bcs.n	800e822 <__hexnan+0xa6>
 800e82e:	2200      	movs	r2, #0
 800e830:	f843 2b04 	str.w	r2, [r3], #4
 800e834:	429e      	cmp	r6, r3
 800e836:	d2fb      	bcs.n	800e830 <__hexnan+0xb4>
 800e838:	6833      	ldr	r3, [r6, #0]
 800e83a:	b91b      	cbnz	r3, 800e844 <__hexnan+0xc8>
 800e83c:	4546      	cmp	r6, r8
 800e83e:	d127      	bne.n	800e890 <__hexnan+0x114>
 800e840:	2301      	movs	r3, #1
 800e842:	6033      	str	r3, [r6, #0]
 800e844:	2005      	movs	r0, #5
 800e846:	e026      	b.n	800e896 <__hexnan+0x11a>
 800e848:	3501      	adds	r5, #1
 800e84a:	2d08      	cmp	r5, #8
 800e84c:	f10b 0b01 	add.w	fp, fp, #1
 800e850:	dd06      	ble.n	800e860 <__hexnan+0xe4>
 800e852:	4544      	cmp	r4, r8
 800e854:	d9cf      	bls.n	800e7f6 <__hexnan+0x7a>
 800e856:	2300      	movs	r3, #0
 800e858:	2501      	movs	r5, #1
 800e85a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e85e:	3c04      	subs	r4, #4
 800e860:	6822      	ldr	r2, [r4, #0]
 800e862:	f000 000f 	and.w	r0, r0, #15
 800e866:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e86a:	6020      	str	r0, [r4, #0]
 800e86c:	e7c3      	b.n	800e7f6 <__hexnan+0x7a>
 800e86e:	2508      	movs	r5, #8
 800e870:	e7c1      	b.n	800e7f6 <__hexnan+0x7a>
 800e872:	9b01      	ldr	r3, [sp, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d0df      	beq.n	800e838 <__hexnan+0xbc>
 800e878:	f04f 32ff 	mov.w	r2, #4294967295
 800e87c:	f1c3 0320 	rsb	r3, r3, #32
 800e880:	fa22 f303 	lsr.w	r3, r2, r3
 800e884:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e888:	401a      	ands	r2, r3
 800e88a:	f847 2c04 	str.w	r2, [r7, #-4]
 800e88e:	e7d3      	b.n	800e838 <__hexnan+0xbc>
 800e890:	3e04      	subs	r6, #4
 800e892:	e7d1      	b.n	800e838 <__hexnan+0xbc>
 800e894:	2004      	movs	r0, #4
 800e896:	b007      	add	sp, #28
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e89c <__localeconv_l>:
 800e89c:	30f0      	adds	r0, #240	; 0xf0
 800e89e:	4770      	bx	lr

0800e8a0 <__ascii_mbtowc>:
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	b901      	cbnz	r1, 800e8a6 <__ascii_mbtowc+0x6>
 800e8a4:	a901      	add	r1, sp, #4
 800e8a6:	b142      	cbz	r2, 800e8ba <__ascii_mbtowc+0x1a>
 800e8a8:	b14b      	cbz	r3, 800e8be <__ascii_mbtowc+0x1e>
 800e8aa:	7813      	ldrb	r3, [r2, #0]
 800e8ac:	600b      	str	r3, [r1, #0]
 800e8ae:	7812      	ldrb	r2, [r2, #0]
 800e8b0:	1c10      	adds	r0, r2, #0
 800e8b2:	bf18      	it	ne
 800e8b4:	2001      	movne	r0, #1
 800e8b6:	b002      	add	sp, #8
 800e8b8:	4770      	bx	lr
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	e7fb      	b.n	800e8b6 <__ascii_mbtowc+0x16>
 800e8be:	f06f 0001 	mvn.w	r0, #1
 800e8c2:	e7f8      	b.n	800e8b6 <__ascii_mbtowc+0x16>

0800e8c4 <__malloc_lock>:
 800e8c4:	4770      	bx	lr

0800e8c6 <__malloc_unlock>:
 800e8c6:	4770      	bx	lr

0800e8c8 <_Balloc>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	460e      	mov	r6, r1
 800e8d0:	b93d      	cbnz	r5, 800e8e2 <_Balloc+0x1a>
 800e8d2:	2010      	movs	r0, #16
 800e8d4:	f7fe fdd8 	bl	800d488 <malloc>
 800e8d8:	6260      	str	r0, [r4, #36]	; 0x24
 800e8da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8de:	6005      	str	r5, [r0, #0]
 800e8e0:	60c5      	str	r5, [r0, #12]
 800e8e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e8e4:	68eb      	ldr	r3, [r5, #12]
 800e8e6:	b183      	cbz	r3, 800e90a <_Balloc+0x42>
 800e8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e8f0:	b9b8      	cbnz	r0, 800e922 <_Balloc+0x5a>
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	fa01 f506 	lsl.w	r5, r1, r6
 800e8f8:	1d6a      	adds	r2, r5, #5
 800e8fa:	0092      	lsls	r2, r2, #2
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 fbdb 	bl	800f0b8 <_calloc_r>
 800e902:	b160      	cbz	r0, 800e91e <_Balloc+0x56>
 800e904:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e908:	e00e      	b.n	800e928 <_Balloc+0x60>
 800e90a:	2221      	movs	r2, #33	; 0x21
 800e90c:	2104      	movs	r1, #4
 800e90e:	4620      	mov	r0, r4
 800e910:	f000 fbd2 	bl	800f0b8 <_calloc_r>
 800e914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e916:	60e8      	str	r0, [r5, #12]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1e4      	bne.n	800e8e8 <_Balloc+0x20>
 800e91e:	2000      	movs	r0, #0
 800e920:	bd70      	pop	{r4, r5, r6, pc}
 800e922:	6802      	ldr	r2, [r0, #0]
 800e924:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e928:	2300      	movs	r3, #0
 800e92a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e92e:	e7f7      	b.n	800e920 <_Balloc+0x58>

0800e930 <_Bfree>:
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e934:	4606      	mov	r6, r0
 800e936:	460d      	mov	r5, r1
 800e938:	b93c      	cbnz	r4, 800e94a <_Bfree+0x1a>
 800e93a:	2010      	movs	r0, #16
 800e93c:	f7fe fda4 	bl	800d488 <malloc>
 800e940:	6270      	str	r0, [r6, #36]	; 0x24
 800e942:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e946:	6004      	str	r4, [r0, #0]
 800e948:	60c4      	str	r4, [r0, #12]
 800e94a:	b13d      	cbz	r5, 800e95c <_Bfree+0x2c>
 800e94c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e94e:	686a      	ldr	r2, [r5, #4]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e956:	6029      	str	r1, [r5, #0]
 800e958:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e95c:	bd70      	pop	{r4, r5, r6, pc}

0800e95e <__multadd>:
 800e95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e962:	461f      	mov	r7, r3
 800e964:	4606      	mov	r6, r0
 800e966:	460c      	mov	r4, r1
 800e968:	2300      	movs	r3, #0
 800e96a:	690d      	ldr	r5, [r1, #16]
 800e96c:	f101 0c14 	add.w	ip, r1, #20
 800e970:	f8dc 0000 	ldr.w	r0, [ip]
 800e974:	3301      	adds	r3, #1
 800e976:	b281      	uxth	r1, r0
 800e978:	fb02 7101 	mla	r1, r2, r1, r7
 800e97c:	0c00      	lsrs	r0, r0, #16
 800e97e:	0c0f      	lsrs	r7, r1, #16
 800e980:	fb02 7000 	mla	r0, r2, r0, r7
 800e984:	b289      	uxth	r1, r1
 800e986:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e98a:	429d      	cmp	r5, r3
 800e98c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e990:	f84c 1b04 	str.w	r1, [ip], #4
 800e994:	dcec      	bgt.n	800e970 <__multadd+0x12>
 800e996:	b1d7      	cbz	r7, 800e9ce <__multadd+0x70>
 800e998:	68a3      	ldr	r3, [r4, #8]
 800e99a:	42ab      	cmp	r3, r5
 800e99c:	dc12      	bgt.n	800e9c4 <__multadd+0x66>
 800e99e:	6861      	ldr	r1, [r4, #4]
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	3101      	adds	r1, #1
 800e9a4:	f7ff ff90 	bl	800e8c8 <_Balloc>
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	6922      	ldr	r2, [r4, #16]
 800e9ac:	f104 010c 	add.w	r1, r4, #12
 800e9b0:	3202      	adds	r2, #2
 800e9b2:	0092      	lsls	r2, r2, #2
 800e9b4:	300c      	adds	r0, #12
 800e9b6:	f7fe fd6f 	bl	800d498 <memcpy>
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f7ff ffb7 	bl	800e930 <_Bfree>
 800e9c2:	4644      	mov	r4, r8
 800e9c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e9c8:	3501      	adds	r5, #1
 800e9ca:	615f      	str	r7, [r3, #20]
 800e9cc:	6125      	str	r5, [r4, #16]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e9d4 <__s2b>:
 800e9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d8:	4615      	mov	r5, r2
 800e9da:	2209      	movs	r2, #9
 800e9dc:	461f      	mov	r7, r3
 800e9de:	3308      	adds	r3, #8
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	db20      	blt.n	800ea32 <__s2b+0x5e>
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f7ff ff69 	bl	800e8c8 <_Balloc>
 800e9f6:	9b08      	ldr	r3, [sp, #32]
 800e9f8:	2d09      	cmp	r5, #9
 800e9fa:	6143      	str	r3, [r0, #20]
 800e9fc:	f04f 0301 	mov.w	r3, #1
 800ea00:	6103      	str	r3, [r0, #16]
 800ea02:	dd19      	ble.n	800ea38 <__s2b+0x64>
 800ea04:	f104 0809 	add.w	r8, r4, #9
 800ea08:	46c1      	mov	r9, r8
 800ea0a:	442c      	add	r4, r5
 800ea0c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ea10:	4601      	mov	r1, r0
 800ea12:	3b30      	subs	r3, #48	; 0x30
 800ea14:	220a      	movs	r2, #10
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7ff ffa1 	bl	800e95e <__multadd>
 800ea1c:	45a1      	cmp	r9, r4
 800ea1e:	d1f5      	bne.n	800ea0c <__s2b+0x38>
 800ea20:	eb08 0405 	add.w	r4, r8, r5
 800ea24:	3c08      	subs	r4, #8
 800ea26:	1b2d      	subs	r5, r5, r4
 800ea28:	1963      	adds	r3, r4, r5
 800ea2a:	42bb      	cmp	r3, r7
 800ea2c:	db07      	blt.n	800ea3e <__s2b+0x6a>
 800ea2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea32:	0052      	lsls	r2, r2, #1
 800ea34:	3101      	adds	r1, #1
 800ea36:	e7d9      	b.n	800e9ec <__s2b+0x18>
 800ea38:	340a      	adds	r4, #10
 800ea3a:	2509      	movs	r5, #9
 800ea3c:	e7f3      	b.n	800ea26 <__s2b+0x52>
 800ea3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea42:	4601      	mov	r1, r0
 800ea44:	3b30      	subs	r3, #48	; 0x30
 800ea46:	220a      	movs	r2, #10
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f7ff ff88 	bl	800e95e <__multadd>
 800ea4e:	e7eb      	b.n	800ea28 <__s2b+0x54>

0800ea50 <__hi0bits>:
 800ea50:	0c02      	lsrs	r2, r0, #16
 800ea52:	0412      	lsls	r2, r2, #16
 800ea54:	4603      	mov	r3, r0
 800ea56:	b9b2      	cbnz	r2, 800ea86 <__hi0bits+0x36>
 800ea58:	0403      	lsls	r3, r0, #16
 800ea5a:	2010      	movs	r0, #16
 800ea5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ea60:	bf04      	itt	eq
 800ea62:	021b      	lsleq	r3, r3, #8
 800ea64:	3008      	addeq	r0, #8
 800ea66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ea6a:	bf04      	itt	eq
 800ea6c:	011b      	lsleq	r3, r3, #4
 800ea6e:	3004      	addeq	r0, #4
 800ea70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ea74:	bf04      	itt	eq
 800ea76:	009b      	lsleq	r3, r3, #2
 800ea78:	3002      	addeq	r0, #2
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	db06      	blt.n	800ea8c <__hi0bits+0x3c>
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	d503      	bpl.n	800ea8a <__hi0bits+0x3a>
 800ea82:	3001      	adds	r0, #1
 800ea84:	4770      	bx	lr
 800ea86:	2000      	movs	r0, #0
 800ea88:	e7e8      	b.n	800ea5c <__hi0bits+0xc>
 800ea8a:	2020      	movs	r0, #32
 800ea8c:	4770      	bx	lr

0800ea8e <__lo0bits>:
 800ea8e:	6803      	ldr	r3, [r0, #0]
 800ea90:	4601      	mov	r1, r0
 800ea92:	f013 0207 	ands.w	r2, r3, #7
 800ea96:	d00b      	beq.n	800eab0 <__lo0bits+0x22>
 800ea98:	07da      	lsls	r2, r3, #31
 800ea9a:	d423      	bmi.n	800eae4 <__lo0bits+0x56>
 800ea9c:	0798      	lsls	r0, r3, #30
 800ea9e:	bf49      	itett	mi
 800eaa0:	085b      	lsrmi	r3, r3, #1
 800eaa2:	089b      	lsrpl	r3, r3, #2
 800eaa4:	2001      	movmi	r0, #1
 800eaa6:	600b      	strmi	r3, [r1, #0]
 800eaa8:	bf5c      	itt	pl
 800eaaa:	600b      	strpl	r3, [r1, #0]
 800eaac:	2002      	movpl	r0, #2
 800eaae:	4770      	bx	lr
 800eab0:	b298      	uxth	r0, r3
 800eab2:	b9a8      	cbnz	r0, 800eae0 <__lo0bits+0x52>
 800eab4:	2010      	movs	r0, #16
 800eab6:	0c1b      	lsrs	r3, r3, #16
 800eab8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eabc:	bf04      	itt	eq
 800eabe:	0a1b      	lsreq	r3, r3, #8
 800eac0:	3008      	addeq	r0, #8
 800eac2:	071a      	lsls	r2, r3, #28
 800eac4:	bf04      	itt	eq
 800eac6:	091b      	lsreq	r3, r3, #4
 800eac8:	3004      	addeq	r0, #4
 800eaca:	079a      	lsls	r2, r3, #30
 800eacc:	bf04      	itt	eq
 800eace:	089b      	lsreq	r3, r3, #2
 800ead0:	3002      	addeq	r0, #2
 800ead2:	07da      	lsls	r2, r3, #31
 800ead4:	d402      	bmi.n	800eadc <__lo0bits+0x4e>
 800ead6:	085b      	lsrs	r3, r3, #1
 800ead8:	d006      	beq.n	800eae8 <__lo0bits+0x5a>
 800eada:	3001      	adds	r0, #1
 800eadc:	600b      	str	r3, [r1, #0]
 800eade:	4770      	bx	lr
 800eae0:	4610      	mov	r0, r2
 800eae2:	e7e9      	b.n	800eab8 <__lo0bits+0x2a>
 800eae4:	2000      	movs	r0, #0
 800eae6:	4770      	bx	lr
 800eae8:	2020      	movs	r0, #32
 800eaea:	4770      	bx	lr

0800eaec <__i2b>:
 800eaec:	b510      	push	{r4, lr}
 800eaee:	460c      	mov	r4, r1
 800eaf0:	2101      	movs	r1, #1
 800eaf2:	f7ff fee9 	bl	800e8c8 <_Balloc>
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	6144      	str	r4, [r0, #20]
 800eafa:	6102      	str	r2, [r0, #16]
 800eafc:	bd10      	pop	{r4, pc}

0800eafe <__multiply>:
 800eafe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb02:	4614      	mov	r4, r2
 800eb04:	690a      	ldr	r2, [r1, #16]
 800eb06:	6923      	ldr	r3, [r4, #16]
 800eb08:	4688      	mov	r8, r1
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	bfbe      	ittt	lt
 800eb0e:	460b      	movlt	r3, r1
 800eb10:	46a0      	movlt	r8, r4
 800eb12:	461c      	movlt	r4, r3
 800eb14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eb1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb24:	eb07 0609 	add.w	r6, r7, r9
 800eb28:	42b3      	cmp	r3, r6
 800eb2a:	bfb8      	it	lt
 800eb2c:	3101      	addlt	r1, #1
 800eb2e:	f7ff fecb 	bl	800e8c8 <_Balloc>
 800eb32:	f100 0514 	add.w	r5, r0, #20
 800eb36:	462b      	mov	r3, r5
 800eb38:	2200      	movs	r2, #0
 800eb3a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800eb3e:	4573      	cmp	r3, lr
 800eb40:	d316      	bcc.n	800eb70 <__multiply+0x72>
 800eb42:	f104 0214 	add.w	r2, r4, #20
 800eb46:	f108 0114 	add.w	r1, r8, #20
 800eb4a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800eb4e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	9b00      	ldr	r3, [sp, #0]
 800eb56:	9201      	str	r2, [sp, #4]
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d80c      	bhi.n	800eb76 <__multiply+0x78>
 800eb5c:	2e00      	cmp	r6, #0
 800eb5e:	dd03      	ble.n	800eb68 <__multiply+0x6a>
 800eb60:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d05d      	beq.n	800ec24 <__multiply+0x126>
 800eb68:	6106      	str	r6, [r0, #16]
 800eb6a:	b003      	add	sp, #12
 800eb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb70:	f843 2b04 	str.w	r2, [r3], #4
 800eb74:	e7e3      	b.n	800eb3e <__multiply+0x40>
 800eb76:	f8b2 b000 	ldrh.w	fp, [r2]
 800eb7a:	f1bb 0f00 	cmp.w	fp, #0
 800eb7e:	d023      	beq.n	800ebc8 <__multiply+0xca>
 800eb80:	4689      	mov	r9, r1
 800eb82:	46ac      	mov	ip, r5
 800eb84:	f04f 0800 	mov.w	r8, #0
 800eb88:	f859 4b04 	ldr.w	r4, [r9], #4
 800eb8c:	f8dc a000 	ldr.w	sl, [ip]
 800eb90:	b2a3      	uxth	r3, r4
 800eb92:	fa1f fa8a 	uxth.w	sl, sl
 800eb96:	fb0b a303 	mla	r3, fp, r3, sl
 800eb9a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eb9e:	f8dc 4000 	ldr.w	r4, [ip]
 800eba2:	4443      	add	r3, r8
 800eba4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eba8:	fb0b 840a 	mla	r4, fp, sl, r8
 800ebac:	46e2      	mov	sl, ip
 800ebae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ebb8:	454f      	cmp	r7, r9
 800ebba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ebbe:	f84a 3b04 	str.w	r3, [sl], #4
 800ebc2:	d82b      	bhi.n	800ec1c <__multiply+0x11e>
 800ebc4:	f8cc 8004 	str.w	r8, [ip, #4]
 800ebc8:	9b01      	ldr	r3, [sp, #4]
 800ebca:	3204      	adds	r2, #4
 800ebcc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ebd0:	f1ba 0f00 	cmp.w	sl, #0
 800ebd4:	d020      	beq.n	800ec18 <__multiply+0x11a>
 800ebd6:	4689      	mov	r9, r1
 800ebd8:	46a8      	mov	r8, r5
 800ebda:	f04f 0b00 	mov.w	fp, #0
 800ebde:	682b      	ldr	r3, [r5, #0]
 800ebe0:	f8b9 c000 	ldrh.w	ip, [r9]
 800ebe4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	fb0a 440c 	mla	r4, sl, ip, r4
 800ebee:	46c4      	mov	ip, r8
 800ebf0:	445c      	add	r4, fp
 800ebf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ebf6:	f84c 3b04 	str.w	r3, [ip], #4
 800ebfa:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebfe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ec02:	0c1b      	lsrs	r3, r3, #16
 800ec04:	fb0a b303 	mla	r3, sl, r3, fp
 800ec08:	454f      	cmp	r7, r9
 800ec0a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ec0e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ec12:	d805      	bhi.n	800ec20 <__multiply+0x122>
 800ec14:	f8c8 3004 	str.w	r3, [r8, #4]
 800ec18:	3504      	adds	r5, #4
 800ec1a:	e79b      	b.n	800eb54 <__multiply+0x56>
 800ec1c:	46d4      	mov	ip, sl
 800ec1e:	e7b3      	b.n	800eb88 <__multiply+0x8a>
 800ec20:	46e0      	mov	r8, ip
 800ec22:	e7dd      	b.n	800ebe0 <__multiply+0xe2>
 800ec24:	3e01      	subs	r6, #1
 800ec26:	e799      	b.n	800eb5c <__multiply+0x5e>

0800ec28 <__pow5mult>:
 800ec28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec2c:	4615      	mov	r5, r2
 800ec2e:	f012 0203 	ands.w	r2, r2, #3
 800ec32:	4606      	mov	r6, r0
 800ec34:	460f      	mov	r7, r1
 800ec36:	d007      	beq.n	800ec48 <__pow5mult+0x20>
 800ec38:	4c21      	ldr	r4, [pc, #132]	; (800ecc0 <__pow5mult+0x98>)
 800ec3a:	3a01      	subs	r2, #1
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec42:	f7ff fe8c 	bl	800e95e <__multadd>
 800ec46:	4607      	mov	r7, r0
 800ec48:	10ad      	asrs	r5, r5, #2
 800ec4a:	d035      	beq.n	800ecb8 <__pow5mult+0x90>
 800ec4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec4e:	b93c      	cbnz	r4, 800ec60 <__pow5mult+0x38>
 800ec50:	2010      	movs	r0, #16
 800ec52:	f7fe fc19 	bl	800d488 <malloc>
 800ec56:	6270      	str	r0, [r6, #36]	; 0x24
 800ec58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec5c:	6004      	str	r4, [r0, #0]
 800ec5e:	60c4      	str	r4, [r0, #12]
 800ec60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec68:	b94c      	cbnz	r4, 800ec7e <__pow5mult+0x56>
 800ec6a:	f240 2171 	movw	r1, #625	; 0x271
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f7ff ff3c 	bl	800eaec <__i2b>
 800ec74:	2300      	movs	r3, #0
 800ec76:	4604      	mov	r4, r0
 800ec78:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec7c:	6003      	str	r3, [r0, #0]
 800ec7e:	f04f 0800 	mov.w	r8, #0
 800ec82:	07eb      	lsls	r3, r5, #31
 800ec84:	d50a      	bpl.n	800ec9c <__pow5mult+0x74>
 800ec86:	4639      	mov	r1, r7
 800ec88:	4622      	mov	r2, r4
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f7ff ff37 	bl	800eafe <__multiply>
 800ec90:	4681      	mov	r9, r0
 800ec92:	4639      	mov	r1, r7
 800ec94:	4630      	mov	r0, r6
 800ec96:	f7ff fe4b 	bl	800e930 <_Bfree>
 800ec9a:	464f      	mov	r7, r9
 800ec9c:	106d      	asrs	r5, r5, #1
 800ec9e:	d00b      	beq.n	800ecb8 <__pow5mult+0x90>
 800eca0:	6820      	ldr	r0, [r4, #0]
 800eca2:	b938      	cbnz	r0, 800ecb4 <__pow5mult+0x8c>
 800eca4:	4622      	mov	r2, r4
 800eca6:	4621      	mov	r1, r4
 800eca8:	4630      	mov	r0, r6
 800ecaa:	f7ff ff28 	bl	800eafe <__multiply>
 800ecae:	6020      	str	r0, [r4, #0]
 800ecb0:	f8c0 8000 	str.w	r8, [r0]
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	e7e4      	b.n	800ec82 <__pow5mult+0x5a>
 800ecb8:	4638      	mov	r0, r7
 800ecba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecbe:	bf00      	nop
 800ecc0:	0800f3e0 	.word	0x0800f3e0

0800ecc4 <__lshift>:
 800ecc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc8:	460c      	mov	r4, r1
 800ecca:	4607      	mov	r7, r0
 800eccc:	4616      	mov	r6, r2
 800ecce:	6923      	ldr	r3, [r4, #16]
 800ecd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ecd4:	eb0a 0903 	add.w	r9, sl, r3
 800ecd8:	6849      	ldr	r1, [r1, #4]
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	f109 0501 	add.w	r5, r9, #1
 800ece0:	42ab      	cmp	r3, r5
 800ece2:	db32      	blt.n	800ed4a <__lshift+0x86>
 800ece4:	4638      	mov	r0, r7
 800ece6:	f7ff fdef 	bl	800e8c8 <_Balloc>
 800ecea:	2300      	movs	r3, #0
 800ecec:	4680      	mov	r8, r0
 800ecee:	461a      	mov	r2, r3
 800ecf0:	f100 0114 	add.w	r1, r0, #20
 800ecf4:	4553      	cmp	r3, sl
 800ecf6:	db2b      	blt.n	800ed50 <__lshift+0x8c>
 800ecf8:	6920      	ldr	r0, [r4, #16]
 800ecfa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecfe:	f104 0314 	add.w	r3, r4, #20
 800ed02:	f016 021f 	ands.w	r2, r6, #31
 800ed06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed0e:	d025      	beq.n	800ed5c <__lshift+0x98>
 800ed10:	2000      	movs	r0, #0
 800ed12:	f1c2 0e20 	rsb	lr, r2, #32
 800ed16:	468a      	mov	sl, r1
 800ed18:	681e      	ldr	r6, [r3, #0]
 800ed1a:	4096      	lsls	r6, r2
 800ed1c:	4330      	orrs	r0, r6
 800ed1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ed22:	f853 0b04 	ldr.w	r0, [r3], #4
 800ed26:	459c      	cmp	ip, r3
 800ed28:	fa20 f00e 	lsr.w	r0, r0, lr
 800ed2c:	d814      	bhi.n	800ed58 <__lshift+0x94>
 800ed2e:	6048      	str	r0, [r1, #4]
 800ed30:	b108      	cbz	r0, 800ed36 <__lshift+0x72>
 800ed32:	f109 0502 	add.w	r5, r9, #2
 800ed36:	3d01      	subs	r5, #1
 800ed38:	4638      	mov	r0, r7
 800ed3a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ed3e:	4621      	mov	r1, r4
 800ed40:	f7ff fdf6 	bl	800e930 <_Bfree>
 800ed44:	4640      	mov	r0, r8
 800ed46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed4a:	3101      	adds	r1, #1
 800ed4c:	005b      	lsls	r3, r3, #1
 800ed4e:	e7c7      	b.n	800ece0 <__lshift+0x1c>
 800ed50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ed54:	3301      	adds	r3, #1
 800ed56:	e7cd      	b.n	800ecf4 <__lshift+0x30>
 800ed58:	4651      	mov	r1, sl
 800ed5a:	e7dc      	b.n	800ed16 <__lshift+0x52>
 800ed5c:	3904      	subs	r1, #4
 800ed5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed62:	459c      	cmp	ip, r3
 800ed64:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed68:	d8f9      	bhi.n	800ed5e <__lshift+0x9a>
 800ed6a:	e7e4      	b.n	800ed36 <__lshift+0x72>

0800ed6c <__mcmp>:
 800ed6c:	6903      	ldr	r3, [r0, #16]
 800ed6e:	690a      	ldr	r2, [r1, #16]
 800ed70:	b530      	push	{r4, r5, lr}
 800ed72:	1a9b      	subs	r3, r3, r2
 800ed74:	d10c      	bne.n	800ed90 <__mcmp+0x24>
 800ed76:	0092      	lsls	r2, r2, #2
 800ed78:	3014      	adds	r0, #20
 800ed7a:	3114      	adds	r1, #20
 800ed7c:	1884      	adds	r4, r0, r2
 800ed7e:	4411      	add	r1, r2
 800ed80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed88:	4295      	cmp	r5, r2
 800ed8a:	d003      	beq.n	800ed94 <__mcmp+0x28>
 800ed8c:	d305      	bcc.n	800ed9a <__mcmp+0x2e>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	4618      	mov	r0, r3
 800ed92:	bd30      	pop	{r4, r5, pc}
 800ed94:	42a0      	cmp	r0, r4
 800ed96:	d3f3      	bcc.n	800ed80 <__mcmp+0x14>
 800ed98:	e7fa      	b.n	800ed90 <__mcmp+0x24>
 800ed9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9e:	e7f7      	b.n	800ed90 <__mcmp+0x24>

0800eda0 <__mdiff>:
 800eda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eda4:	460d      	mov	r5, r1
 800eda6:	4607      	mov	r7, r0
 800eda8:	4611      	mov	r1, r2
 800edaa:	4628      	mov	r0, r5
 800edac:	4614      	mov	r4, r2
 800edae:	f7ff ffdd 	bl	800ed6c <__mcmp>
 800edb2:	1e06      	subs	r6, r0, #0
 800edb4:	d108      	bne.n	800edc8 <__mdiff+0x28>
 800edb6:	4631      	mov	r1, r6
 800edb8:	4638      	mov	r0, r7
 800edba:	f7ff fd85 	bl	800e8c8 <_Balloc>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800edc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc8:	bfa4      	itt	ge
 800edca:	4623      	movge	r3, r4
 800edcc:	462c      	movge	r4, r5
 800edce:	4638      	mov	r0, r7
 800edd0:	6861      	ldr	r1, [r4, #4]
 800edd2:	bfa6      	itte	ge
 800edd4:	461d      	movge	r5, r3
 800edd6:	2600      	movge	r6, #0
 800edd8:	2601      	movlt	r6, #1
 800edda:	f7ff fd75 	bl	800e8c8 <_Balloc>
 800edde:	f04f 0e00 	mov.w	lr, #0
 800ede2:	60c6      	str	r6, [r0, #12]
 800ede4:	692b      	ldr	r3, [r5, #16]
 800ede6:	6926      	ldr	r6, [r4, #16]
 800ede8:	f104 0214 	add.w	r2, r4, #20
 800edec:	f105 0914 	add.w	r9, r5, #20
 800edf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800edf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800edf8:	f100 0114 	add.w	r1, r0, #20
 800edfc:	f852 ab04 	ldr.w	sl, [r2], #4
 800ee00:	f859 5b04 	ldr.w	r5, [r9], #4
 800ee04:	fa1f f38a 	uxth.w	r3, sl
 800ee08:	4473      	add	r3, lr
 800ee0a:	b2ac      	uxth	r4, r5
 800ee0c:	1b1b      	subs	r3, r3, r4
 800ee0e:	0c2c      	lsrs	r4, r5, #16
 800ee10:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ee14:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ee1e:	45c8      	cmp	r8, r9
 800ee20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ee24:	4694      	mov	ip, r2
 800ee26:	f841 4b04 	str.w	r4, [r1], #4
 800ee2a:	d8e7      	bhi.n	800edfc <__mdiff+0x5c>
 800ee2c:	45bc      	cmp	ip, r7
 800ee2e:	d304      	bcc.n	800ee3a <__mdiff+0x9a>
 800ee30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ee34:	b183      	cbz	r3, 800ee58 <__mdiff+0xb8>
 800ee36:	6106      	str	r6, [r0, #16]
 800ee38:	e7c4      	b.n	800edc4 <__mdiff+0x24>
 800ee3a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ee3e:	b2a2      	uxth	r2, r4
 800ee40:	4472      	add	r2, lr
 800ee42:	1413      	asrs	r3, r2, #16
 800ee44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ee48:	b292      	uxth	r2, r2
 800ee4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ee4e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ee52:	f841 2b04 	str.w	r2, [r1], #4
 800ee56:	e7e9      	b.n	800ee2c <__mdiff+0x8c>
 800ee58:	3e01      	subs	r6, #1
 800ee5a:	e7e9      	b.n	800ee30 <__mdiff+0x90>

0800ee5c <__ulp>:
 800ee5c:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <__ulp+0x44>)
 800ee5e:	400b      	ands	r3, r1
 800ee60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	dd02      	ble.n	800ee6e <__ulp+0x12>
 800ee68:	2000      	movs	r0, #0
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	4770      	bx	lr
 800ee6e:	425b      	negs	r3, r3
 800ee70:	151b      	asrs	r3, r3, #20
 800ee72:	2b13      	cmp	r3, #19
 800ee74:	f04f 0000 	mov.w	r0, #0
 800ee78:	f04f 0100 	mov.w	r1, #0
 800ee7c:	dc04      	bgt.n	800ee88 <__ulp+0x2c>
 800ee7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ee82:	fa42 f103 	asr.w	r1, r2, r3
 800ee86:	4770      	bx	lr
 800ee88:	2201      	movs	r2, #1
 800ee8a:	3b14      	subs	r3, #20
 800ee8c:	2b1e      	cmp	r3, #30
 800ee8e:	bfce      	itee	gt
 800ee90:	4613      	movgt	r3, r2
 800ee92:	f1c3 031f 	rsble	r3, r3, #31
 800ee96:	fa02 f303 	lslle.w	r3, r2, r3
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	7ff00000 	.word	0x7ff00000

0800eea4 <__b2d>:
 800eea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea8:	6907      	ldr	r7, [r0, #16]
 800eeaa:	f100 0914 	add.w	r9, r0, #20
 800eeae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800eeb2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800eeb6:	f1a7 0804 	sub.w	r8, r7, #4
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff fdc8 	bl	800ea50 <__hi0bits>
 800eec0:	f1c0 0320 	rsb	r3, r0, #32
 800eec4:	280a      	cmp	r0, #10
 800eec6:	600b      	str	r3, [r1, #0]
 800eec8:	491e      	ldr	r1, [pc, #120]	; (800ef44 <__b2d+0xa0>)
 800eeca:	dc17      	bgt.n	800eefc <__b2d+0x58>
 800eecc:	45c1      	cmp	r9, r8
 800eece:	bf28      	it	cs
 800eed0:	2200      	movcs	r2, #0
 800eed2:	f1c0 0c0b 	rsb	ip, r0, #11
 800eed6:	fa26 f30c 	lsr.w	r3, r6, ip
 800eeda:	bf38      	it	cc
 800eedc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800eee0:	ea43 0501 	orr.w	r5, r3, r1
 800eee4:	f100 0315 	add.w	r3, r0, #21
 800eee8:	fa06 f303 	lsl.w	r3, r6, r3
 800eeec:	fa22 f20c 	lsr.w	r2, r2, ip
 800eef0:	ea43 0402 	orr.w	r4, r3, r2
 800eef4:	4620      	mov	r0, r4
 800eef6:	4629      	mov	r1, r5
 800eef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefc:	45c1      	cmp	r9, r8
 800eefe:	bf3a      	itte	cc
 800ef00:	f1a7 0808 	subcc.w	r8, r7, #8
 800ef04:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ef08:	2200      	movcs	r2, #0
 800ef0a:	f1b0 030b 	subs.w	r3, r0, #11
 800ef0e:	d015      	beq.n	800ef3c <__b2d+0x98>
 800ef10:	409e      	lsls	r6, r3
 800ef12:	f1c3 0720 	rsb	r7, r3, #32
 800ef16:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800ef1a:	fa22 f107 	lsr.w	r1, r2, r7
 800ef1e:	45c8      	cmp	r8, r9
 800ef20:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800ef24:	ea46 0501 	orr.w	r5, r6, r1
 800ef28:	bf94      	ite	ls
 800ef2a:	2100      	movls	r1, #0
 800ef2c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ef30:	fa02 f003 	lsl.w	r0, r2, r3
 800ef34:	40f9      	lsrs	r1, r7
 800ef36:	ea40 0401 	orr.w	r4, r0, r1
 800ef3a:	e7db      	b.n	800eef4 <__b2d+0x50>
 800ef3c:	ea46 0501 	orr.w	r5, r6, r1
 800ef40:	4614      	mov	r4, r2
 800ef42:	e7d7      	b.n	800eef4 <__b2d+0x50>
 800ef44:	3ff00000 	.word	0x3ff00000

0800ef48 <__d2b>:
 800ef48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ef4c:	461c      	mov	r4, r3
 800ef4e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ef52:	2101      	movs	r1, #1
 800ef54:	4690      	mov	r8, r2
 800ef56:	f7ff fcb7 	bl	800e8c8 <_Balloc>
 800ef5a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ef5e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ef62:	4607      	mov	r7, r0
 800ef64:	bb34      	cbnz	r4, 800efb4 <__d2b+0x6c>
 800ef66:	9201      	str	r2, [sp, #4]
 800ef68:	f1b8 0200 	subs.w	r2, r8, #0
 800ef6c:	d027      	beq.n	800efbe <__d2b+0x76>
 800ef6e:	a802      	add	r0, sp, #8
 800ef70:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ef74:	f7ff fd8b 	bl	800ea8e <__lo0bits>
 800ef78:	9900      	ldr	r1, [sp, #0]
 800ef7a:	b1f0      	cbz	r0, 800efba <__d2b+0x72>
 800ef7c:	9a01      	ldr	r2, [sp, #4]
 800ef7e:	f1c0 0320 	rsb	r3, r0, #32
 800ef82:	fa02 f303 	lsl.w	r3, r2, r3
 800ef86:	430b      	orrs	r3, r1
 800ef88:	40c2      	lsrs	r2, r0
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	9201      	str	r2, [sp, #4]
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	bf14      	ite	ne
 800ef94:	2102      	movne	r1, #2
 800ef96:	2101      	moveq	r1, #1
 800ef98:	61bb      	str	r3, [r7, #24]
 800ef9a:	6139      	str	r1, [r7, #16]
 800ef9c:	b1c4      	cbz	r4, 800efd0 <__d2b+0x88>
 800ef9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800efa2:	4404      	add	r4, r0
 800efa4:	6034      	str	r4, [r6, #0]
 800efa6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800efaa:	6028      	str	r0, [r5, #0]
 800efac:	4638      	mov	r0, r7
 800efae:	b002      	add	sp, #8
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800efb8:	e7d5      	b.n	800ef66 <__d2b+0x1e>
 800efba:	6179      	str	r1, [r7, #20]
 800efbc:	e7e7      	b.n	800ef8e <__d2b+0x46>
 800efbe:	a801      	add	r0, sp, #4
 800efc0:	f7ff fd65 	bl	800ea8e <__lo0bits>
 800efc4:	2101      	movs	r1, #1
 800efc6:	9b01      	ldr	r3, [sp, #4]
 800efc8:	6139      	str	r1, [r7, #16]
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	3020      	adds	r0, #32
 800efce:	e7e5      	b.n	800ef9c <__d2b+0x54>
 800efd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800efd4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800efd8:	6030      	str	r0, [r6, #0]
 800efda:	6918      	ldr	r0, [r3, #16]
 800efdc:	f7ff fd38 	bl	800ea50 <__hi0bits>
 800efe0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800efe4:	e7e1      	b.n	800efaa <__d2b+0x62>

0800efe6 <__ratio>:
 800efe6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efea:	4688      	mov	r8, r1
 800efec:	4669      	mov	r1, sp
 800efee:	4681      	mov	r9, r0
 800eff0:	f7ff ff58 	bl	800eea4 <__b2d>
 800eff4:	468b      	mov	fp, r1
 800eff6:	4606      	mov	r6, r0
 800eff8:	460f      	mov	r7, r1
 800effa:	4640      	mov	r0, r8
 800effc:	a901      	add	r1, sp, #4
 800effe:	f7ff ff51 	bl	800eea4 <__b2d>
 800f002:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f006:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f00a:	460d      	mov	r5, r1
 800f00c:	eba3 0c02 	sub.w	ip, r3, r2
 800f010:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f014:	1a9b      	subs	r3, r3, r2
 800f016:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bfd5      	itete	le
 800f01e:	460a      	movle	r2, r1
 800f020:	463a      	movgt	r2, r7
 800f022:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f026:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800f02a:	bfd8      	it	le
 800f02c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800f030:	462b      	mov	r3, r5
 800f032:	4602      	mov	r2, r0
 800f034:	4659      	mov	r1, fp
 800f036:	4630      	mov	r0, r6
 800f038:	f7f1 fbe8 	bl	800080c <__aeabi_ddiv>
 800f03c:	b003      	add	sp, #12
 800f03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f042 <__copybits>:
 800f042:	3901      	subs	r1, #1
 800f044:	b510      	push	{r4, lr}
 800f046:	1149      	asrs	r1, r1, #5
 800f048:	6914      	ldr	r4, [r2, #16]
 800f04a:	3101      	adds	r1, #1
 800f04c:	f102 0314 	add.w	r3, r2, #20
 800f050:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f054:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f058:	42a3      	cmp	r3, r4
 800f05a:	4602      	mov	r2, r0
 800f05c:	d303      	bcc.n	800f066 <__copybits+0x24>
 800f05e:	2300      	movs	r3, #0
 800f060:	428a      	cmp	r2, r1
 800f062:	d305      	bcc.n	800f070 <__copybits+0x2e>
 800f064:	bd10      	pop	{r4, pc}
 800f066:	f853 2b04 	ldr.w	r2, [r3], #4
 800f06a:	f840 2b04 	str.w	r2, [r0], #4
 800f06e:	e7f3      	b.n	800f058 <__copybits+0x16>
 800f070:	f842 3b04 	str.w	r3, [r2], #4
 800f074:	e7f4      	b.n	800f060 <__copybits+0x1e>

0800f076 <__any_on>:
 800f076:	f100 0214 	add.w	r2, r0, #20
 800f07a:	6900      	ldr	r0, [r0, #16]
 800f07c:	114b      	asrs	r3, r1, #5
 800f07e:	4298      	cmp	r0, r3
 800f080:	b510      	push	{r4, lr}
 800f082:	db11      	blt.n	800f0a8 <__any_on+0x32>
 800f084:	dd0a      	ble.n	800f09c <__any_on+0x26>
 800f086:	f011 011f 	ands.w	r1, r1, #31
 800f08a:	d007      	beq.n	800f09c <__any_on+0x26>
 800f08c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f090:	fa24 f001 	lsr.w	r0, r4, r1
 800f094:	fa00 f101 	lsl.w	r1, r0, r1
 800f098:	428c      	cmp	r4, r1
 800f09a:	d10b      	bne.n	800f0b4 <__any_on+0x3e>
 800f09c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d803      	bhi.n	800f0ac <__any_on+0x36>
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	bd10      	pop	{r4, pc}
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	e7f7      	b.n	800f09c <__any_on+0x26>
 800f0ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0b0:	2900      	cmp	r1, #0
 800f0b2:	d0f5      	beq.n	800f0a0 <__any_on+0x2a>
 800f0b4:	2001      	movs	r0, #1
 800f0b6:	e7f6      	b.n	800f0a6 <__any_on+0x30>

0800f0b8 <_calloc_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	fb02 f401 	mul.w	r4, r2, r1
 800f0be:	4621      	mov	r1, r4
 800f0c0:	f7fe f9fe 	bl	800d4c0 <_malloc_r>
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	b118      	cbz	r0, 800f0d0 <_calloc_r+0x18>
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	f7fe f9ef 	bl	800d4ae <memset>
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}

0800f0d4 <__ascii_wctomb>:
 800f0d4:	b149      	cbz	r1, 800f0ea <__ascii_wctomb+0x16>
 800f0d6:	2aff      	cmp	r2, #255	; 0xff
 800f0d8:	bf8b      	itete	hi
 800f0da:	238a      	movhi	r3, #138	; 0x8a
 800f0dc:	700a      	strbls	r2, [r1, #0]
 800f0de:	6003      	strhi	r3, [r0, #0]
 800f0e0:	2001      	movls	r0, #1
 800f0e2:	bf88      	it	hi
 800f0e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f0e8:	4770      	bx	lr
 800f0ea:	4608      	mov	r0, r1
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <_sbrk>:
 800f0f0:	4b04      	ldr	r3, [pc, #16]	; (800f104 <_sbrk+0x14>)
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	6819      	ldr	r1, [r3, #0]
 800f0f6:	b909      	cbnz	r1, 800f0fc <_sbrk+0xc>
 800f0f8:	4903      	ldr	r1, [pc, #12]	; (800f108 <_sbrk+0x18>)
 800f0fa:	6019      	str	r1, [r3, #0]
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	4402      	add	r2, r0
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	4770      	bx	lr
 800f104:	200095ac 	.word	0x200095ac
 800f108:	20009ff8 	.word	0x20009ff8

0800f10c <_init>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr

0800f118 <_fini>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	bf00      	nop
 800f11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11e:	bc08      	pop	{r3}
 800f120:	469e      	mov	lr, r3
 800f122:	4770      	bx	lr
